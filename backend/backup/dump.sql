-- Backup created at: 2025-03-06 03:13:02

--
-- PostgreSQL database dump
--

-- Dumped from database version 13.20 (Debian 13.20-1.pgdg120+1)
-- Dumped by pg_dump version 15.10 (Debian 15.10-0+deb12u1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: public; Type: SCHEMA; Schema: -; Owner: user
--

-- *not* creating schema, since initdb creates it


ALTER SCHEMA public OWNER TO "user";

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: alembic_version; Type: TABLE; Schema: public; Owner: user
--

CREATE TABLE public.alembic_version (
    version_num character varying(32) NOT NULL
);


ALTER TABLE public.alembic_version OWNER TO "user";

--
-- Name: articles_id_seq; Type: SEQUENCE; Schema: public; Owner: user
--

CREATE SEQUENCE public.articles_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.articles_id_seq OWNER TO "user";

--
-- Name: articles; Type: TABLE; Schema: public; Owner: user
--

CREATE TABLE public.articles (
    id bigint DEFAULT nextval('public.articles_id_seq'::regclass) NOT NULL,
    created_at timestamp without time zone,
    updated_at timestamp without time zone,
    type_id bigint,
    classification_id bigint,
    title character varying(255) NOT NULL,
    disp text,
    language character varying(255),
    code text,
    language2 character varying(255),
    code2 text,
    language3 character varying(255),
    code3 text,
    explanation text,
    sort integer NOT NULL
);


ALTER TABLE public.articles OWNER TO "user";

--
-- Name: classifications_id_seq; Type: SEQUENCE; Schema: public; Owner: user
--

CREATE SEQUENCE public.classifications_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.classifications_id_seq OWNER TO "user";

--
-- Name: classifications; Type: TABLE; Schema: public; Owner: user
--

CREATE TABLE public.classifications (
    id bigint DEFAULT nextval('public.classifications_id_seq'::regclass) NOT NULL,
    name character varying(32) NOT NULL,
    type_id bigint NOT NULL,
    sort integer NOT NULL
);


ALTER TABLE public.classifications OWNER TO "user";

--
-- Name: departments_id_seq; Type: SEQUENCE; Schema: public; Owner: user
--

CREATE SEQUENCE public.departments_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.departments_id_seq OWNER TO "user";

--
-- Name: departments; Type: TABLE; Schema: public; Owner: user
--

CREATE TABLE public.departments (
    id integer DEFAULT nextval('public.departments_id_seq'::regclass) NOT NULL,
    name character varying(50),
    sort integer DEFAULT 0
);


ALTER TABLE public.departments OWNER TO "user";

--
-- Name: employee_authority; Type: TABLE; Schema: public; Owner: user
--

CREATE TABLE public.employee_authority (
    employee_id integer NOT NULL,
    department_id integer NOT NULL,
    admin boolean NOT NULL,
    start_date date NOT NULL,
    end_date date
);


ALTER TABLE public.employee_authority OWNER TO "user";

--
-- Name: employee_credential; Type: TABLE; Schema: public; Owner: user
--

CREATE TABLE public.employee_credential (
    employee_id integer NOT NULL,
    hashed_password character varying NOT NULL,
    password_updated_at date NOT NULL
);


ALTER TABLE public.employee_credential OWNER TO "user";

--
-- Name: employeeinfos; Type: TABLE; Schema: public; Owner: user
--

CREATE TABLE public.employeeinfos (
    employee_id integer NOT NULL,
    phone_number character varying,
    gender character varying(2),
    emergency_contact character varying(20),
    address character varying,
    birth_date date,
    employment_type character varying(20) NOT NULL,
    hire_date date NOT NULL,
    leave_date date,
    contract_expiration date
);


ALTER TABLE public.employeeinfos OWNER TO "user";

--
-- Name: employees_id_seq; Type: SEQUENCE; Schema: public; Owner: user
--

CREATE SEQUENCE public.employees_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.employees_id_seq OWNER TO "user";

--
-- Name: employees; Type: TABLE; Schema: public; Owner: user
--

CREATE TABLE public.employees (
    id integer DEFAULT nextval('public.employees_id_seq'::regclass) NOT NULL,
    employee_no character varying NOT NULL,
    name character varying NOT NULL,
    email character varying,
    last_login timestamp without time zone
);


ALTER TABLE public.employees OWNER TO "user";

--
-- Name: types_id_seq; Type: SEQUENCE; Schema: public; Owner: user
--

CREATE SEQUENCE public.types_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.types_id_seq OWNER TO "user";

--
-- Name: types; Type: TABLE; Schema: public; Owner: user
--

CREATE TABLE public.types (
    id bigint DEFAULT nextval('public.types_id_seq'::regclass) NOT NULL,
    sort integer NOT NULL,
    name character varying(32) NOT NULL
);


ALTER TABLE public.types OWNER TO "user";

--
-- Data for Name: alembic_version; Type: TABLE DATA; Schema: public; Owner: user
--

COPY public.alembic_version (version_num) FROM stdin;
4bc3f0e826eb
\.


--
-- Data for Name: articles; Type: TABLE DATA; Schema: public; Owner: user
--

COPY public.articles (id, created_at, updated_at, type_id, classification_id, title, disp, language, code, language2, code2, language3, code3, explanation, sort) FROM stdin;
3	2024-06-21 22:30:56	2024-06-26 04:27:06	5	7	Gitの初期設定	\N	\N	\N	\N	\N	\N	\N	Gitのインストール<br><br><a href="https://git-scm.com/">Git公式サイト</a>よりGitをインストールします。<br><br><a href="https://github.com/">GitHub公式サイト</a>にてGithubのアカウントを作成します。<br><br>その後、コマンドプロンプトを開き、<br><br><div class="code-block p-3">git config --global user.name "ユーザー名"<br><br>git config --global user.email "メールアドレス"</div><br>をそれぞれ入力します。<br><br>通信の暗号化<br><br>Windowsキー + Rを押して「ファイル名を指定して実行」を開き、「services.msc」と入力してOKをクリックします。<br><br>サービス(ローカル)から「OpenSSH Authentication Agent」を探し、右クリックし、プロパティをクリックします。<br><br>「スタートアップの種類(E)」を「自動」に設定し、「適用」をクリックします。<br><br>「開始」をクリックしてし、「OK」をクリックします。<br><br>その後PowerShellで、<br><br><div class="code-block p-3">ssh-keygen -t ed25519 -C "メールアドレス"<br><br>Start-Service ssh-agent<br><br>ssh-add C:\\\\\\\\Users\\\\\\\\ユーザー名\\\\\\\\.ssh\\\\\\\\id_ed25519<br><br>Get-Content C:\\\\\\\\Users\\\\\\\\ユーザー名\\\\\\\\.ssh\\\\\\\\id_ed25519.pub | clip</div><br>を入力します。<br><br>GitHubにログインし、リポジトリを作成します。<br><br>コマンドプロンプトで<br><br><div class="code-block p-3"><br><br>git init<br><br>git remote add origin git@github.com:ユーザー名/リポジトリ名.git<br><br>git pull origin main --allow-unrelated-histories<br><br>git add .<br><br>git commit -m "コメント"<br><br>git push <br><br></div><br><br>と入力するとgitに反映されます。	1
5	2024-06-22 15:42:36	2024-06-23 04:47:27	5	11	Windows環境でLinuxを使用する	\N	Language 1	\N	Language 2	\N	Language 3	\N	WSLとは Windows Subsystem for Linux の略でWindows上でLinuxを使用する機能のことです。<br><br>まずコマンドプロンプトを開き、<br><br><div class="code-block p-3">wsl --install</div><br><br>と入力し、WSLをインストールします。<br><br>その後<br><br><div class="code-block p-3">wsl -l -v</div><br><br>と入力します。これはversionを確認するコマンドとなっており、versionが正しく表示されていればインストールに成功しています。<br><br><br><br>デフォルトではUbuntuがインストールされていますが、Microsoft Storeから他のLinuxディストリビューションをインストールすることもできます。<br><br><br><br>WSLの環境に入るには<br><br><div class="code-block p-3">wsl</div><br><br>特定のディストリビューションを指定して起動する場合は<br><br><div class="code-block p-3">wsl -d ディストリビューション名</div><br><br>とすることで指定したLinux環境に入ることができます。	2
6	2024-06-22 16:13:18	2024-06-30 03:13:36	4	6	Laravelのインストール	\N	\N	\N	\N	\N	\N	\N	Laravelとは、phpのフレームワークで、webアプリなどの作成に使用することができます。<br><br>まずPowerShellを開き、Windows向けのパッケージマネージャーのChocolateyをインストールします。<br><div class="code-block p-3">Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))</div><br><br>その後<br><div class="code-block p-3">choco install php -y<br>choco install composer -y</div><br>と入力し、phpとcomposerをインストールします。<br>インストールが完了したら<br><div class="code-block p-3">php -v<br>composer -v</div><br>と入力し、バージョンを確認します。<br><div class="code-block p-3">cd Laravelのプロジェクトを作りたいフォルダ <br>composer create-project --prefer-dist laravel/laravel アプリケーション名</div><br>と入力すると、Laravelがインストールされcdコマンドで移動したフォルダにアプリケーション名のフォルダが作成されます。<br>その後、<br><div class="code-block p-3">cd アプリケーション名</div><br>と入力し、先ほど作成したフォルダに移動し、<br><div class="code-block p-3">php artisan serve</div><br>と入力すると<br><div class="code-block p-3">INFO  Server running on [http://127.0.0.1:8000].<br>Press Ctrl+C to stop the server</div><br>のように表示されるのでhttp://127.0.0.1:8000にアクセスするとLaravelで作成しているアプリケーションのページを表示することができます。	1
7	2024-06-22 18:36:02	2024-07-04 13:34:21	4	6	blade.php	\N	\N	\N	\N	\N	\N	\N	Laravelのプロジェクト作成後、コマンドプロンプトで<br><div class="code-block p-3">php artisan serve</div><br>を入力後、<br><a href="http://127.0.0.1:8000">http://127.0.0.1:8000</a>にアクセスすると開かれるページはデフォルトでは<br>プロジェクトのフォルダ/resources/views/welcome.blade.php<br>となっています。<br>拡張子がblade.php<br>となっているファイルは、Laravelの様々なタグを使用して様々な処理を行うことができ、成型後にブラウザに送られます。<br>以降当サイトではblade.phpのことをテンプレートと呼びます。<br><br>また、タグを使用することで、web.phpのnameを使用してのURLの埋め込み、コントローラーから返された変数の使用、PHPの記入、if文for文の使用などもできます。<br><br>例えばfor文を使用するときは<br><div class="code-block">@for($i = 1; $i &lt;= 10; $i++)<br>    &lt;div&gt;{{ $i }}&lt;/div&gt;<br>@endfor</div><br>のように記入し、PHPの記入、if文は<br><div class="code-block">@php<br>    $test = -1;<br>@endphp<br><br>@if($test &gt; 0)<br>    &lt;div&gt;$testは{{ $test}}です。&lt;/div&gt;<br>@elseif($test == 0)<br>    &lt;div&gt;$testは0です。&lt;/div&gt;<br>@else<br>   &lt;div&gt;$testは正の数値に直してください。&lt;/div&gt;<br>@endif&lt;/div&gt;<br></div><br>のような形式で記入します。<br><br>共通部分はまとめておいて各ページから共通部分を読み込むこともできます。<br><div class="code-block">&lt;!DOCTYPE html&gt;<br>&lt;html lang="ja"&gt;<br>&lt;head&gt;<br>    @yield('head')<br>&lt;/head&gt;<br><br>&lt;body&gt;<br>    @yield('content')<br>&lt;/body&gt;</div><br>共通部分をこのような感じにしておき、各ページで<br><div class="code-block">@extends('test')<br><br>@section('head')<br>    &lt;title&gt;test&lt;/title&gt;<br>@endsection<br><br>@section('content')<br>&lt;div&gt;コンテンツ&lt;/div&gt;<br>@endsection</div><br>のように記入すると@extends('test')の部分でresources/views/test.blade.phpを読み込み、@section('head')と@section('content')でtest.blade.phpの@yield('head')と@yield('content')の部分にそれぞれ埋め込んでいます。<br>@yield()、@section()内の文字は一意であれば任意につけることができます。	3
11	2024-06-23 05:25:01	2024-06-26 17:06:32	1	1	HTMLファイルの作り方	<p>ホームページに記入したい文字を入力してください。 </p>	HTML	<!doctype=html>\n<html lange="ja">\n    <head>    　　　　　　　　　　\n       <meta charset=utf-8>　　　\n       <title>タイトル</title>\n    </head>\n\n    <body>\n       <p>ホームページに記入したい文字を入力してください。 </p><!--コメント-->\n    </body>\n</html>	\N	\N	\N	\N	HTMLファイルとは、ホームページなどwebページを作成するために使用する言語です。<br>基本的にホームページはHTMLファイルで文字、画像などを記入し、CSSで配置という流れで作成します。<br><br>まだ何もテキストエディタをインストールしていない場合はメモ帳、インストールしてある場合はテキストエディタを開きます。<br>そして下の例をコピーして貼り付け後、任意の名前.htmlという名前で保存してみてください。<br>最後に.htmlにと記載することで本来のtxtファイルではなくHTMLファイルが作成されます。<br><br><h2>&lt;!doctype　html&gt;</h2><br>このファイルはHTMLで記入されていますという内容です。<br><br><h2>&lt;html lange="ja"&gt;</h2><br>このHTMLファイルは日本語で記入されていますという内容です。<br><br><h2>head部</h2><br>&lt;head&gt;から&lt;/head&gt;までの範囲のことをhead部といいます。<br>head部にはホームページに直接表示しない内容のことを記入します。<br><br><h2>&lt;meta charset=utf-8&gt;</h2><br>このファイルはutf-8というエンコード(文字に変換する形式)を使用していますという内容です。<br><br><h2>&lt;title&gt;</h2><br>この部分はページのタイトルになります。<br><br><h2>body部</h2><br>からまでの範囲のことをbody部といいます。<br>この部分には直接ホームページに入力したいことを記入します。<br>HTMLでは&lt;p&gt;から &lt;/p&gt;までを1行として認識します。<br>改行しただけでは改行されないので行を増やしたい時は同じように&lt;p&gt;1行に表示したい内容 &lt;/p&gt;の形式で追加していってください<br><br><h2>&lt;!--コメント--&gt;</h2><br>&lt;!--任意のコメント--&gt;の形式でhtmlファイルで文字として出力しない文字を記入することができます。<br>忘れそうな内容などのメモなどの記入に使用してください。<br><br><h2>&lt;/html&gt;</h2><br>HTMLファイルはここまでですという内容です。	1
13	2024-06-24 05:04:59	2024-06-24 05:16:24	1	1	文字の表示	<h1>メインの見出しです。</h1>\n<p>ここに文字を入力します。</p>\n<br> <!--1行開けます-->\n<li>リスト1</li>\n<li>リスト2</li>       \n\n<ol type="i">\n   <li>リストの形式を変更いします</li>\n   <li>リスト2</li>\n</ol>\n        \n<ruby>振り仮名\n<rt>ふりがな</rt>\n</ruby>\n\n<p><mark>背景色を付けて目立たせる</mark></p>\n<p><s>取り消し線</s></p>	HTML	<h1>メインの見出しです。</h1>\n<p>ここに文字を入力します。</p>\n<br> <!--1行開けます-->\n<li>リスト1</li>\n<li>リスト2</li>\n       \n<ol type="i">\n   <li>リストの形式を変更いします</li>\n   <li>リスト2</li>\n</ol>\n        \n<ruby>振り仮名\n<rt>ふりがな</rt>\n</ruby>\n\n<p><mark>背景色を付けて目立たせる</mark></p>\n<p><s>取り消し線</s></p>	\N	\N	\N	\N	上の例の表示とHTMLのタブを切り替えながら見比べて実際どういう風になっているのか参考にしてみてください。<br><br><br>HTMLでは&lt;タグ&gt;から&lt;!--タグ--&gt;までの内容にそれぞれのタグの内容が適用されます。<br><br><br>&lt;h1&gt;は1ページの最上位の見出し部分として1度もしくは2度の使用にすることでSEO対策(検索に引っかかりやすいページの作成)につながります。<br><br><br>また途中に見出しを使用したい時などは&lt;2&gt;から&lt;h6&gt;まであり、数字が増えるにつれて文字の大きさが小さくなっていくので任意のものを使用してください。	2
17	2024-06-24 05:45:46	2024-06-28 16:51:03	1	1	折り畳みメニューの作成	<details>\n<summary>menu</summary>\n<a href="https://www.google.com/">Google</a>\n<p>test</p>\n</details>	HTML	<details>\n   <summary>menu</summary>\n   <a href="https://www.google.com/">Google</a>\n   <p>test<p>\n</details>	\N	\N	\N	\N	<div class="code-block">&lt;details&gt;&lt;summary&gt;折りたたんだ時に表示したい内容&lt;/summary&gt;<br>   開いたときの内容<br>&lt;/details&gt;</div><br>の形式で記入することで折り畳みメニューを作成することができます。<br>上の例のGoogleようにリンクにすることも、testのように普通の文字にすることもできます。	5
18	2024-06-24 06:05:13	2024-06-28 16:48:15	1	2	CSSとは	<div style="color: rgb(79, 79, 177);">この文字にCSSが適用されます</div>	HTML	<head>    　　　　　　　　　　\n　　　<meta charset=utf-8>　　　\n     <title>タイトル</title>\n     <style>\n     　　　#blue{\n          　　　color: rgb(79, 79, 177);\n          }\n     </style> \n　　　<link rel="stylesheet" href="ファイルのパス.css">  \n</head>\n\n<div id="blue">この文字にCSSが適用されます</div>	\N	\N	\N	\N	HTMLファイルなどと組み合わせてしようする文字、画像の配置などを変更したりするプログラムです。<br>拡張子を.cssにすることでCSSファイルを使用することができます。<br><br><h2>CSSの記入方法</h2><br>適用したい範囲{適用したい内容:適用したい値;}の形式で記入します。<br>また、適用したい範囲{適用したい内容:適用したい値;適用したい内容:適用したい値;} のように何個でも記入することができます。<br>タグに対して反映させたい時は反映させたいタグ{適用したい内容:適用したい値}の形式で記入します。<br>例)<br><div class="code-block">p{font-size:10px}</div><br>と記入すると全てのpタグ内の文字の大きさが10pxに設定されます。(pxは文字の大きさなどの単位です)<br><br><h2>特定の範囲内でのCSSの適用</h2><br>特定の範囲を指定してCSSを適用したい時はidもしくはclassを使用します。<br>重複のない1か所だけに適用させたいときはid、複数個所に適用させたいときはclassを使用してください。<br><br><h2>CSSファイルの読み込み方法</h2><br><div class="code-block">#blue{<br>   color: rgb(79, 79, 177);<br>}</div><br>のような形式で記入したCSSファイルを用意し、<br>&lt;link rel="stylesheet" href="CSSのパス"&gt;の形式でHTMLファイルのHEAD部に記入することで読み込むこともできます。<br><br><h2>タグ内に直接書き込む</h2><br>&lt;div style="color: rgb(79, 79, 177);"&gt;この文字にCSSが適用されます&lt;/div&gt;<br>のようにstyle="適用させたいCSS"<br>の形式でタグに直接書き込むこともできます。	1
19	2024-06-24 06:38:58	2024-06-24 06:45:49	1	2	位置変更など	<div style="color: rgb(154, 253, 55);">\n   <p style="text-aline:center;">中央に配置します</p>\n   <p style="padding-left: 50px;">左側50px開けます</p>\n   <p style="font-size: 40px;">文字を40pxにします</p>\n   <p style="font-family: yu 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif">文字をゴシック体にします</p>\n   <p style="font-style: italic;">文字をitalic体にします</p>\n   <p style="letter-spacing:10px;">文字間を広くします</p>\n   <p style="text-indent: 10px;">インデントを入れます</p>\n   <p style="text-shadow:white 2px 2px 8px;">文字に影を付けます</p>\n   <p style="color:blue;">文字を青色にします</p>\n   <p><span style="color:blue;">この部分だけ</span>青文字にします</p>\n   <p style="background-color:blue;">背景に色をつけます</p>\n   <p style="background-color: blue;margin-right: 50%;">真ん中までだけ背景に色をつけます</p>\n   <p style=" background-color: blue;opacity: 0.5;">半透明の色を付けます</p>\n   <p style="border: 1px solid;">四角で囲います</p>       \n   <p style="border: 1px solid;border-radius: 5px;">角を丸めます</p>\n   <p style="border: 1px solid;height: 40px;width: 100px;">四角の幅と高さを調整します</p>\n</div>	HTML	<div class="font_color">\n   <p id="center">中央に配置します</p>\n   <p id="left50">左側50px開けます</p>\n   <p id="font40">文字を40pxにします</p>\n   <p id="gothic">文字をゴシック体にします</p>\n   <p id="italic">文字をitalic体にします</p>\n   <p id="space">文字間を広くします</p>\n   <p id="indent">インデントを入れます</p>\n   <p id="shadow">文字に影を付けます</p>\n   <p id="blue">文字を青色にします</p>\n   <p><span id="blue">この部分だけ</span>青文字にします</p>\n   <p id="background">背景に色をつけます</p>\n   <p id="half">真ん中までだけ背景に色をつけます</p>\n   <p id="opacity">半透明の色を付けます</p>\n   <p id="square">四角で囲います</p>       \n   <p id="radius">角を丸めます</p>\n   <p id="square_width">四角の幅と高さを調整します</p>\n</div>	CSS	.font_color{\n    color: rgb(154, 253, 55);\n}\n\n#center{\n    text-aline:center;\n}\n\n#left50{\n    padding-left: 50px;\n}\n\n#font40{\n    font-size: 40px;\n}\n\n#gothic{\n    font-family: yu 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif\n}\n\n#italic{\n    font-style: italic;\n}\n\n#space{\n    letter-spacing:10px;\n}\n\n#indent{\n    text-indent: 10px;\n}\n\n#shadow{\n    text-shadow:white 2px 2px 8px;\n}\n\n#blue{\n    color:blue;\n}\n\n#square{\n    border: 1px solid;\n}\n\n#background{\n    background-color:blue;\n}\n\n#half{\n    background-color: blue;\n    margin-right: 50%;\n}\n\n#opacity{\n    background-color: blue;\n    opacity: 0.5;\n}\n\n#radius{\n    border: 1px solid;\n    border-radius: 5px;\n}\n\n#square_width{\n    border: 1px solid;\n    height: 40px;\n    width: 100px;\n}	\N	\N	上記ではfont_colorというclassにcolor: rgb(154, 253, 55);という処理を入れているので適用されている範囲の文字色が変更されています。<br><br>その他の行では、&lt;p id="id名"&gt;～&lt;/p&gt;の範囲にそれぞれに対応するCSSファイルの内容を適用させています。	2
20	2024-06-24 15:50:23	2024-06-28 16:48:56	1	2	サイドバーの作成方法	<div style="display: flex;">\n   <div style="width: 20%;background-color: rgb(210, 218, 171);text-align: center;order: 1;">\n            <p>目次</p>\n            <p>EXCEL</p>\n            <p>Program</p>\n            <p>その他</p>\n        </div>\n\n        <div style="width: 80%;padding-left: 10%;background-color: rgb(252, 160, 98);order: 2;">\n            <p>ここをメインのコンテンツとして使用します。</p>\n        </div>\n    </div>	HTML	<div class="test">\n   <div class="side">\n      <p>目次</p>\n      <p>EXCEL</p>\n      <p>Program</p>\n      <p>その他</p>\n   </div>\n\n   <div class="content">\n      <p>ここをメインのコンテンツとして使用します。</p>\n   </div>\n</div>	CSS	.test{\n    display: flex;\n}\n.content{\n    width: 80%;\n    padding-left: 10%;\n    background-color: rgb(252, 160, 98);\n    order: 2;\n    }\n    \n.side{\n    width: 20%;\n    background-color: rgb(210, 218, 171);\n    text-align: center;\n    order: 1;\n}	\N	\N	<h2>HTML側</h2><br>まずサイドバー、メインコンテンツともに含めた要素を作成します。<br>上の例ではtestというクラスをつけています。<br>そしてサイドバーになる、メインのコンテンツにそれぞれ要素を付けます。<br>上の例ではサイドバーになる要素にside、メインコンテンツになる要素にcontentというクラスをつけて完了です。<br><br><h2>CSS側</h2><br>まずサイドバー、メインコンテンツともに含んだ要素にdisplay:flexと記入します。<br>次にサイドバー、メインコンテンツともにorderプロパティを追加します。<br>orderプロパティは設定した数字の小さいものから順に左から並ばせることができます。	3
14	2024-06-24 05:25:05	2024-06-24 05:33:17	1	1	画像の埋め込み	<img src="https://placehold.co/600x400" alt="サンプル画像" />	HTML	<img src="画像のパス">	\N	\N	\N	\N	\N	3
21	2024-06-24 19:03:13	2024-07-11 12:59:20	1	3	Javascriptとは	<div id="alert_button">押してください</div>	HTML	<div id="alert_button">押してください</div>	Javascript	document.getElementById('alert_button').addEventListener('click',function(){\n   alert('ボタンがクリックされました');\n})	\N	\N	Javascriptはwebページに動きを付けたり、クリック時に動作させたりするときに使用する言語です。<br><br>htmlのBody部の最後に<br>&lt;script&gt;<br>   Javascriptを記入<br>&lt;/script&gt;<br>の形式で記入するか、<br>htmlのhead部もしくはbody部の末尾で<br>&lt;script src="Javascriptのパス"&gt;&lt;/script&gt;<br>の形式で記入することで使用することができます。	1
23	2024-06-25 03:49:19	2024-06-25 21:47:37	5	12	VPSでホームページを公開する	\N	\N	\N	\N	\N	\N	\N	Laravelなどのフレームワークなどを使用してホームページを公開したいときにはVPSと契約する必要があります。<br><br><h2>VPSと契約する</h2><br>当サイトはよく聞く名前で安心なのと料金が安いという理由で<a href="https://secure.sakura.ad.jp/">さくらのVPSを使用しています。</a><br><br>さくらのVPSを使用する場合は当サイトはOSをUbuntu、SSHキーを「GitHub.comから取得してインストールする」にして使用しています。<br>GitHubでのSSHキーの追加方法がわからない方はこちらを参考にしてください。<br>※さくらサーバーのSSH接続時のユーザー名は選択したOS名になるので忘れないようにしてください。<br>例)Ubuntuで契約時はubuntuとなります<br><br>その後、契約している会社のサーバーのページに行き、サーバーの電源を入れます。<br>その時にサーバーのIPアドレスも確認してください。<br><br><h2>ssh接続</h2><br><div class="code-block"> ssh -l ユーザー名 IPアドレス</div><br>の形式で入力することでサーバーに接続することができます。<br>接続中のインストールなどは自分のPCではなく接続しているサーバーにインストールされます。<br><br><h2>アップデートと必要なパッケージのインストール</h2><br><div class="code-block">sudo apt update<br>sudo apt upgrade -y<br>sudo apt install git curl unzip software-properties-common -y</div><br><br><h2>Ondrejのリポジトリを追加</h2><br><div class="code-block">sudo add-apt-repository ppa:ondrej/php<br>sudo apt update</div><br><br><h2>PHPのインストール</h2><br>下の例ではPHP8.2をインストールしています。<br><div class="code-block">sudo apt install php8.2 php8.2-cli php8.2-common php8.2-mbstring php8.2-gd php8.2-mysql php8.2-xml php8.2-curl php8.2-zip -y<br>sudo apt install php8.2-fpm</div><br><br><h2>Composerのインストール</h2><br><div class="code-block">php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"<br>sudo php composer-setup.php --install-dir=/usr/local/bin --filename=composer<br>php -r "unlink('composer-setup.php');"</div><br><br><h2>スワップファイルの作成</h2><br><div class="code-block">sudo fallocate -l 2G /swapfile<br>sudo chmod 600 /swapfile<br>sudo mkswap /swapfile<br>sudo swapon /swapfile</div><br><br><h2>MySQLのインストール</h2><br><div class="code-block">sudo apt install mysql-server -y</div><br><br><h2>mysqlのユーザー、データベースの作成</h2><br><div class="code-block">sudo mysql -u root -p<br>CREATE DATABASE データベース名;<br>CREATE USER 'ユーザー名'@'localhost' IDENTIFIED BY 'パスワード';<br>GRANT ALL PRIVILEGES ON *.* TO 'ユーザー名'@'localhost' WITH GRANT OPTION;<br>FLUSH PRIVILEGES;<br>EXIT;</div><br><br><h2>Nginxのインストール</h2><br><div class="code-block">sudo apt install nginx -y</div><br><br><h2>Nginxの設定ファイルを編集</h2><br><div class="code-block">sudo rm /etc/nginx/sites-available/default<br>sudo nano /etc/nginx/sites-available/default</div><br><br><div>開かれたファイルに以下のように書き込み、ctrl+O、Enter、ctrl+Xと順に押し、保存してファイルを閉じてください。</div><br><div class="code-block">server {<br>    listen 80;<br>    server_name IPアドレスもしくはドメイン名;<br><br>    root /var/www/アプリケーション名/public;<br>    index index.php index.html index.htm;<br><br>    location / {<br>        try_files $uri $uri/ /index.php?$query_string;<br>    }<br><br>    location ~ \\\\\\\\.php$ {<br>        include snippets/fastcgi-php.conf;<br>        fastcgi_pass unix:/run/php/php8.2-fpm.sock; # PHPのバージョンに応じて修正<br>        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;<br>        include fastcgi_params;<br>    }<br><br>    location ~ /\\\\\\\\.ht {<br>        deny all;<br>    }<br>}</div><br><br><div>以下コマンドを入力し、nginxに設定を適用させてください。</div><br><div class="code-block">sudo systemctl stop apache2<br>sudo systemctl restart nginx<br>sudo systemctl start nginx<br>sudo systemctl reload nginx</div><br><br><h2>GitHubのリポジトリをサーバーにコピーする</h2><br><div class="code-block">cd /var/www<br>sudo mkdir アプリケーション名<br>cd アプリケーション名<br>sudo git init<br>sudo git config --global --add safe.directory /var/www/アプリケーション名<br>sudo git remote add origin https://github.com/GitHubのユーザー名/GitHubのリポジトリ名.git<br>sudo git pull origin main<br></div><br><br><h2>Laravelプロジェクトのディレクトリの所有者をユーザー名に変更</h2><br><div class="code-block">sudo adduser ユーザー名<br>sudo visudo</div><br><br><div class="code-block">root    ALL=(ALL:ALL) ALL</div><br><div>の場所を探して</div><br><div class="code-block">ユーザー名   ALL=(ALL:ALL) ALL</div><br><div>に書き換え管理者権限を作成したユーザーに変更してください。</div><br><br><div class="code-block">sudo su - ユーザー名</div><br><br><h2>Laravelのenvファイルの作成と設定</h2><br><div class="code-block">sudo chown ユーザー名:ユーザー名 /var/www/アプリケーション名/.env<br>sudo cp /var/www/example-app/.env.example /var/www/アプリケーション名/.env<br>nano /var/www/アプリケーション名/.env</div><br><br><div>データベースの設定を探し、以下のように書き換えてください</div><br><div class="code-block">DB_CONNECTION=mysql<br>DB_HOST=127.0.0.1 <br>DB_PORT=3306 <br>DB_DATABASE=データベース名<br>DB_USERNAME=mysqlのユーザー名<br>DB_PASSWORD=mysqlのパスワード</div><br><br><h2>アプリケーションにcomposerのインストール</h2><br><div class="code-block">cd /var/www/アプリケーション名<br>sudo chown -R ユーザー名:ユーザー名 /var/www/example-app<br>composer install</div><br><br><h2>Laravelのキー生成</h2><br><div class="code-block">cd /var/www/example-app<br>php artisan key:generate</div><br><br><h2>データベースのマイグレーション（テーブル作成）</h2><br><div class="code-block">php artisan migrate</div><br><br><h2>アプリケーションのキャッシュクリア、権限の設定</h2><br><div class="code-block">mkdir -p /var/www/アプリケーション名/storage/logs<br>mkdir -p /var/www/アプリケーション名/bootstrap/cache<br>sudo chown -R ユーザー名:ユーザー名 /var/www/アプリケーション名/storage /var/www/example-app/bootstrap/cache<br>sudo chmod -R 775 /var/www/アプリケーション名/storage /var/www/アプリケーション名/bootstrap/cache<br><br>php artisan config:cache<br>php artisan route:cache<br>php artisan view:cache</div><br><br><h2>Node.js、npmのインストール</h2><br><div class="code-block">curl -fsSL https://deb.nodesource.com/setup_16.x | sudo -E bash -<br>sudo apt-get install -y nodejs</div><br><br><h2>Viteのインストール、ビルドを実行</h2><br><div class="code-block">cd /var/www/example-app<br>npm install vite<br>npm run build</div>	3
25	2024-06-26 01:12:37	2024-06-26 01:14:07	5	12	SSH接続ができなくなったとき	\N	\N	\N	\N	\N	\N	\N	SSH接続ができなくなったときは以下を試してください。<br><br><h2>ローカル環境での作業</h2><br><div class="code-block">type C:\\\\\\\\Users\\\\\\\\popro\\\\\\\\.ssh\\\\\\\\id_rsa.pub</div><br><div>と入力するとssh-rsaから始まる公開鍵が表示されるのでコピーしてください。</div><br><br><h2>サーバーでの作業</h2><br><div class="code-block">mkdir -p ~/.ssh<br>chmod 700 ~/.ssh<br>echo "先ほどコピーした公開鍵"<br>chmod 600 ~/.ssh/authorized_keys<br>sudo nano /etc/ssh/sshd_config</div><br><div>と入力すると、表示されるファイルから</div><br><br><div class="code-block">PubkeyAuthentication yes<br>AuthorizedKeysFile .ssh/authorized_keys<br>PasswordAuthentication yes</div><br><div>の部分を探し、#でコメントアウトされていたら#を削除してください。</div><br><br><div>その後、以下のコードを入力し、SSH設定を有効にしてください。</div><br><div class="code-block">sudo systemctl restart ssh</div>	5
30	2024-06-26 06:24:01	2024-07-11 13:02:11	1	3	コンソールログ	\N	Javascript	console.log('test');	\N	\N	\N	\N	console.log(コンソールに出力したい内容);<br>と記入することで、コンソールログに出力することができます。<br>コンソールとはデバッグ時などに使用する機能で、データの中身などを見たいときなどに使用します。<br><br>コンソールログは、ctrl+shift+Iで表示または、右上の×の少し下の︙、その他ツール、コンソールを順にクリックすることでも表示することができます。<br><br>console.logで出力した内容はユーザーメッセージとして表示されます。<br><br>当サイトではJavascriptタブでのconsole.logは対象のページのコンソールに表示されるようになっています。<br><br>このページでコンソールを開くとtestと表示されているはずです。	2
22	2024-06-25 01:47:19	2024-06-25 01:47:19	1	7	Gitに公開鍵を追加する	\N	\N	\N	\N	\N	\N	\N	Gitに公開鍵を追加するには、コマンドプロンプトを開き、\\\\r\n<div class="code-block">ssh-keygen -t rsa -b 4096 -C "メールアドレス"\\\\r\ncat ~/.ssh/id_rsa.pub</div>\\\\r\nと入力し、生成された公開鍵をコピーします。\\\\r\n\\\\r\nその後、<a href="https://github.com/">GitHub</a>にログインし、画面右上のユーザーアイコンをクリックし、settingをクリックします。\\\\r\n左側のメニューのSSH and GPG keysをクリックし、右側のNew SSH keyをクリックします。\\\\r\n\\\\r\nTitleに任意の名前を入力し、Keyのところに先ほどコピーした公開鍵を貼り付け、画面下部のAdd SSH keyボタンをクリックすると公開鍵が追加されます。	2
26	2024-06-26 01:40:17	2024-06-26 01:40:17	5	12	ローカルのmysql(XAMPP)をサーバーに移行する	\N	\N	\N	\N	\N	\N	\N	<div>このページでは、ローカルのXAMPP内のmysqlをサーバーに移行する方法についてご紹介していきます。</div>\\\\r\n\\\\r\n<h2>mysqlのデータの取り出し</h2>\\\\r\n<div class="code-block">cd C:\\\\\\\\xampp\\\\\\\\mysql\\\\\\\\bin\\\\r\nmysqldump -u ユーザー名 -p データベース名 > 保存先.sql</div>\\\\r\n\\\\r\n<h2>サーバーにデータを転送する</h2>\\\\r\n<div class="code-block">scp "先ほど出力したファイルのパス" ユーザー名@サーバーのIPアドレス:/保存先フォルダ/</div>\\\\r\n\\\\r\n<h2>サーバーのmysqlにデータを取り込む</h2>\\\\r\n<div class="code-block">mysql -u ユーザー名 -p\\\\r\nUSE データを反映したいデータベース名;\\\\r\nSOURCE /sqlファイルのパス;\\\\r\n</div>\\\\r\n\\\\r\n<div>とすることで、データをローカルのものと同じにすることができます。</div>\\\\r\n\\\\r\n\\\\r\n\\\\r\n<div class="code-block"></div>	6
32	2024-06-26 06:32:50	2024-06-28 16:40:10	1	3	定数、変数	\N	Javascript	const a = 1;\nlet b = 2;\nvar c = 'test';\n\nconsole.log(a,b,c);	\N	\N	\N	\N	定数、変数とは値を代入する入れ物のことです。<br><br>上の例ではaに1を、bに2を、cにtestを代入しています。<br><br>定数とは上書きできない変数のことをいいます。<br><br>できる限り定数を使用するようにし、書き換えが必要なところはletを使用しましょう。<br><br>letは再代入はできるが再宣言はできません。<br><br><div class="code-block">let a = 2;<br>let a = 1;</div><br>とするとエラーになるが、<br><div class="code-block">let a = 2;<br>a = 1;</div><br>とするとエラーにはならない。<br><br>また、定義時に<br><div class="code-block">a = 1;</div><br>などと書くことでも変数として定義できますが、グローバル変数(どこからでも呼び出せる変数)になってしまいバグのもとになるので絶対にやめましょう。	3
173	2024-07-11 13:50:25	2024-07-11 18:49:35	4	15	プロジェクトの作成	\N	\N	\N	\N	\N	\N	\N	Reactをインストールするにはまずnode.jsをインストールする必要があるため、まだインストールされていない方は<a href="https://nodejs.org" target="_blank">こちらのページ</a>でnode.jsをインストールしてください。<br><br>その後、Reactのコマンドプロンプトでプロジェクトを作成したいフォルダに移動し、<br><div class="code-block">npx create-react-app プロジェクト名</div><br>と入力することでプロジェクトが作成されます。<br><br>その後、プロジェクトのルートフォルダで<br><div class="code-block">npm start</div><br>と入力することでReactのデフォルトのページが表示されれば成功しています。	1
34	2024-06-26 15:44:30	2024-08-16 06:40:30	5	12	サイトをhttpsにする	\N	\N	\N	\N	\N	\N	\N	サイトをhttpsにすることで、ブラウザとサーバーサイドの通信を暗号化することができ、盗聴などを防ぐことができるようになります。<br>下の例はLaravelで作成したサイトをhttpsにする例となっています。<br><br><h2>Certbotのインストール</h2><br><div class="code-block">sudo apt update<br>sudo apt install certbot python3-certbot-nginx</div><br><br><h2>Nginx の設定ファイルを編集</h2><br><div class="code-block">sudo nano /etc/nginx/sites-available/default</div><br><div>と入力し、設定ファイルを開き以下のように書き換えます。</div><br><div class="code-block">server {<br>    listen 80 default_server;<br>    listen [::]:80 default_server;<br><br>    server_name 自分のドメイン名に置き換える; <br><br>    root /var/www/アプリケーションのパス/public;<br>    index index.php index.html index.htm index.nginx-debian.html;<br><br>    location / {<br>        try_files $uri $uri/ /index.php?$query_string;<br>    }<br><br>    location ~ \\\\\\\\.php$ {<br>        include snippets/fastcgi-php.conf;<br>        fastcgi_pass unix:/var/run/php/php8.2-fpm.sock;<br>    }<br><br>    location ~ /\\\\\\\\.ht {<br>        deny all;<br>    }<br><br>    # Let's Encrypt の ACME チャレンジ用<br>    location ~ /.well-known/acme-challenge {<br>        allow all;<br>    }<br>}</div><br><div>となるようにLet's Encrypt の ACME チャレンジ用の部分を書き足してください。</div><br><br><h2>Certbot を使用して証明書を取得</h2><br><div class="code-block">sudo certbot --nginx -d 自身のドメイン名</div><br><br><h2>証明書を自動更新するように設定する</h2><br><div class="code-block">sudo crontab -e</div><br>と入力し、番号を聞かれたら使用するテキストエディタを選択してください。<br>1を選択するとnanoで開かれます。<br>その後開かれたファイルの末尾に<br><div class="code-block">0 3 * * * /usr/bin/certbot renew --quiet</div><br>と追加してください。<br>上のコードは3時に自動更新となっているので3の部分を任意の時間に更新することで自動更新する時間を変更することができます。<br><br><h2>Nginx を再起動して設定の変更を適用</h2><br><div class="code-block">sudo systemctl restart nginx</div>	7
33	2024-06-26 06:58:16	2024-06-28 16:41:00	1	3	関数	\N	Javascript	let a = 1;\nlet b = 2;\n\nfunction test(val1, val2){\n   let val3 = val1 + val2;\n   return val3;\n};\n\nlet c = test(a, b);\nconsole.log(c)	\N	\N	\N	\N	上の例ではtestという2つの数字の足し算をする関数を作成しています。<br><br>関数は<br><div class="code-block">function 関数名(仮引数){<br>   関数の処理<br>   returun 処理後に変数などに代入する値があれば記入<br>};</div><br>の形式で定義でき、引数は,区切りで何個でも定義することができます。<br>また、引数なしで処理だけ行わせることもできます。<br>returnで関数の外に渡す値のことを戻り値といい、外に渡す値がないときはreturnだけ記入します。<br><br>上の例では、testの引数としてa, bを渡しています。<br>aには1が、bには2が入っているので、test関数のval1には1がval2には2が代入され計算されます。<br>val3にはval1とval2を足した値の3が代入されます。<br>そしてcにはtest関数からreturnで戻ってくる値のval3が代入されるのでコンソールには3が出力されます。	4
35	2024-06-26 16:03:01	2024-06-26 17:16:51	1	3	要素の情報を取得する	<div id="test" class="test-class">テスト</div>	HTML	<div id="test" class="test-class">テスト</div>	Javascript	const element = document.getElementById('test');\nlet text = element.textContent;\nlet idName = element.id;\nlet className = element. className;\n\nconsole.log("テキスト:",text);\nconsole.log("id名:",idName);\nconsole.log("クラス名:",className);	\N	\N	上の例ではidがテストの要素のテキストを取得してコンソールに出力しています。<br>変数textElementにidがtestの要素を代入し、textにはtext.Element.textContentとして取得したテキストを代入しています。<br><br>また、要素.idの形式でid名、要素.classNameの形式でクラス名を取得することができます。<br><br>	5
36	2024-06-26 16:18:36	2024-06-28 16:41:50	1	3	テキストを書き換える	<div id="test">変更しました</div>	HTML	<div id="test">テスト</div>	Javascript	const element = document.getElementById("test");\nelement.textContent = "変更しました";	\N	\N	上の例では元のHTMLではテストと表示されるようになっていますが、Javascriptで内容を書き換えています。<br><div class="code-block">要素.textContent = "変更後の文字";</div><br>の形式で要素内の表示されている文字を書き換えることができます。	6
37	2024-06-26 16:28:13	2024-06-28 16:42:48	1	3	id、クラスを変更する	<div id="newId" class="new-class3">テスト</div>	HTML	<div id="test" class="test-class">テスト</div>	Javascript	const element = document.getElementById('test');\nelement.id = 'newId';  //idの変更\nelement.className = 'new-class';  //クラスの変更\nelement.classList.add('new-class2'); //クラスの追加\nelement.classList.remove('new-class'); //クラスの削除\nelement.classList.replace('new-class2', 'new-class3') //クラス名の書き換え\n\nconsole.log('クラス名:',element.className);	\N	\N	上の例では取得した要素に対してidやクラス名の変更、削除などを行っています。<br><br>element.classNameとelement.classList.replaceの違いは要素が複数のクラスを持っているとき、<br><div class="code-block">element.className = 'new-class';</div><br>の書き方だとクラスがnew-classのみになるのに対して、<br><div class="code-block">element.classList.replace('new-class2', 'new-class3')</div><br>のようにするとnew-class2がnew-class3に代わるだけで他のクラスはそのまま保持される点です。	7
38	2024-06-26 16:45:44	2024-06-28 16:44:34	1	3	クリックで動作させる	<div id="test">クリックしてください</div>	Html	<div id="test">クリックしてください</div>	Javascript	const element = document.getElementById('test');\nelement.addEventListener('click', function(){\n   alert('クリックされました');\n});	\N	\N	上の例では押してくださいと書いてある部分をクリックするとアラートが出るようになっています。<br>このように、特定の要素をクリックしたときなどに関数などを動作させるときには<br><div class="code-block">要素名.addEventListener('動作', function(){<br>   動作内容<br>});</div><br>の形式で記入します。<br><br><div class="code-block">function test() {<br>   alert('test');<br>}<br> element.addEventListener('click', test);</div><br>のようにaddEventListenerの第2引数に関数を直接渡すこともできます。<br><br>その他addEventListenerのは要素にマウスが乗ったときのの動作などもあるのでそちらも別ページにてご紹介していきたいと思います。	8
39	2024-06-26 17:10:12	2024-06-28 16:39:12	1	3	マウスが乗ったときの動作	<div id="test">マウスが外れました</div>	HTML	<div id="test">ここにマウスを乗せたり外したりしてください</div>	Javascript	const element = document.getElementById('test')\n\nelement.addEventListener('mouseover', ()=>{\n   element.textContent = 'マウスが乗っています';\n});\n\nelement.addEventListener('mouseout', ()=>{\n   element.textContent = 'マウスが外れました';\n});	\N	\N	上の例では要素にマウスを乗せたとき、外した時で文字が変わるようになっています。<br><br><div class="code-block">element.addEventListener('mouseover', ()=&gt;{<br>   element.textContent = 'マウスが乗っています';<br>});</div><br>は以下と同じ内容になります。<br><div class="code-block">element.addEventListener('mouseover', function (){<br>   element.textContent = 'マウスが乗っています';<br>});</div><br><br>addEventListenerの第1引数を'mouseover'とするとマウスが乗ったとき、'mouseout'とするとマウスが外れた時の処理となります。<br>	9
40	2024-06-26 17:42:29	2024-06-28 16:45:07	1	3	要素の内容が変化した時の動作	<select id="test" style="color: black;" class="form-select">\n   <option value="1">test1</option>\n   <option value="2">test2</option>\n</select>	HTML	<select id="test">\n   <option value="1">test1</option>\n   <option value="2">test2</option>\n</select>	Javascript	const element = document.getElementById('test');\n\nelement.addEventListener('change', function(){\n   alert(this.value);\n});	\N	\N	上の例では、セレクトの値を変更するとアラートが出るようになっています。<br><br><div class="code-block">要素.addEventListener('change', function(){<br>   処理内容;<br>});</div><br>と記入することで、対象の値が変化したときに動作させることができます。<br><br>alertで使用しているthisは自分自身(ここでは変更したセレクト)のことを指します。<br>this.valueとすることでoptionのvalue属性の値を取得しています。	10
41	2024-06-26 17:59:52	2024-06-28 16:45:46	1	3	要素がフォーカスされたときの処理	<input id="test" class="form-control" style="color: black;" value="ここをクリックしてください">\n<input id="test2" class="form-control" style="color: black;">	HTML	<input id="test"></input>\n<input id="test2></input>	Javascript	const element = document.getElementById('test');\nconst element2 = document.getElementById('test2');\n\nelement.addEventListener('focus', function(){\n   this.value = 'フォーカスされています';\n});\n\nelement.addEventListener('blur', function(){\n   this.value = 'フォーカスが外れました';\n});	\N	\N	上の例ではフォーカス時、フォーカスが外れた時にそれぞれ上側のインプットの値を変更しています。<br><br><div class="code-block">要素.addEventListener('focus', function(){<br>   処理内容;<br>};</div><br>でフォーカスされたとき、<br><br><div class="code-block">要素.addEventListener('blur', function(){<br>  処理内容;<br>});</div><br>でフォーカスが外れた時の処理をさせることができます。	11
43	2024-06-26 19:33:05	2024-06-26 19:37:14	1	5	XAMPPのインストール	\N	\N	\N	\N	\N	\N	\N	XAMPPとは、Apache、Maria DB、PHP、Perlが含まれていて手軽にPHPでのプログラミングができるようになるものです。<br><a href="https://www.apachefriends.org/jp/index.html">こちら</a>のページよりインストールを行ってください。<br><br>インストール後、XAMPPのコントロールパネルを開き、ApachのStartをクリックすることで仮想サーバーとしてPHPを動作させることができます。<br>デフォルトではCドライブの直下にxamppフォルダが作成されます。<br>またAdminをクリックすると、xampp/htdocsフォルダに配置したindex.phpが開かれます。<br>Xamppの仮想環境内ではhttp://localhostをルートとし、フォルダと同じ構成になります。<br><br><br>例)<br>C:/xampp/htdocs/test/test.php<br>を開きたいときは<br>http://localhost/test/test.php<br>とすることで開くことができます。<br><br>データベースを使用したいときはMySQLのStartをクリックするとデータベースサーバーを使用することができ、Adminをクリックするとデータベースの管理ページに移動することができます。<br><br>PHPを初めて触る方などは、C:/xampp/htdocs/フォルダにindex.phpを作成し、そちらを使用するとXAMPPのコントロールパネルのAdminで簡単に開くこともでき手軽に学習を始めることができます。	1
42	2024-06-26 18:19:50	2024-06-28 16:46:29	1	3	キーボードの入力時の処理	<div id="output">何かキーボードのキーを押してください。</div>	HTML	<div id="output"></div>	Javascript	const output= document.getElementById('output');\n\ndocument.addEventListener('keydown', function(button){\n   output.textContent = `${button.key}が押されています。`;\n});\n\ndocument.addEventListener('keyup', function(button){\n   output.textContent = `${button.key}が離されました。`;\n});	\N	\N	上の例では、キーボードのキーが押されたとき、離されたときに表示が変わるようになっています。<br><br>特定の要素を指定せずに全体に対して処理を行うときは<br><div class="code-block">要素.addEventListener</div><br>ではなく<br><div class="code-block">document.addEventListener</div><br>とします。<br><br><div class="code-block">document.addEventListener('keydown', function(){<br>  処理内容;<br>});</div><br>とすることでキーボードから入力されたとき、<br><br><div class="code-block">document.addEventListener('keyup', function(){<br>  処理内容;<br>});</div><br>とすることでキーボードから離されたときの処理を行うことができます。<br><br>また、addEventListenerの第2引数の関数の引数を記入すると入力されたキーボードの情報を取得することができます。<br>第2引数の関数の引数.key<br>と記入することで押されたキーを取得することができます。	12
44	2024-06-26 21:08:35	2024-06-26 21:12:31	1	5	PHPとは	a	PHP	<div>\n<?php\necho 'a'; //コメント\n/*\nコメント\n*/\n?>\n</div>	\N	\N	\N	\N	PHPとは、サーバーサイドで使用する言語です。<br>PHPの特徴はphpファイルの中にHTMLは記入できることです。<br><br>のようにHTMLファイルと同じ記述の中に<br>&lt;?php<br>PHPの処理;<br>?&gt;<br><br>として記入することができます。<br><br>また、echoは出力となっており、<br>echo '出力内容';<br><br>の形式で出力することで出力したものを画面に表示することができます。<br><br>また<br>//コメント<br><br>/*<br>コメント<br>*/<br>の形式でコメントアウトすることもできます。	2
46	2024-06-26 21:20:37	2024-06-26 21:20:37	1	5	変数	3	PHP	<?php\\\\r\n   $a=1;\\\\r\n   $b=2;\\\\r\n   $c=$a+$b;\\\\r\n\\\\r\necho $c;	\N	\N	\N	\N	変数とは一時的にデータを入れる入れ物となっています。\\\\r\n\\\\r\n変数は、\\\\r\n$変数名=変数に入れる値\\\\r\nの形式で定義することができます。\\\\r\n\\\\r\n上の例のように数字の入った変数同士を足して別の変数に入れることもできます。	3
47	2024-06-26 21:50:01	2024-06-26 21:55:27	1	5	変数(参照渡し)	2	PHP	<?php\n   $a=1;\n   $b=&$a;\n   $b=2;\n\n   echo $a;	\N	\N	\N	\N	上の例では、リファレンス渡し(参照渡し)を使用し、$aと$bが連動して変更されるようにしています。<br>リファレンス渡しとは、変数に値ではなく、参照にする場所をコピーすることで片方が変更されると両方変更されるようにすることです。<br>コピー元の変数の前に&を付けることでリファレンス渡しすることができます。<br><br>上の例では、$bに$aの参照をコピーすることで$bを変更時$aの内容も変わるようにしています	4
283	2024-08-22 17:16:21	2024-08-22 17:18:43	4	19	指定したフィールドのデータのみ追加する	\N	app/controllers/test_controller.rb	class TestController < ApplicationController\n  def index\n    @sales = Sale.select(:amount, :sales_date)\n  end\nend	\N	\N	\N	\N	指定したフィールドのデータのみ取得時は、<br><div class="code-block">モデル.select(:フィールド)</div><br>の形式で記入します。<br><br>上の例は、Saleモデルのamount、sales_dateフィールドのデータのみを取得しています。	30
51	2024-06-28 02:51:53	2024-06-28 02:54:42	1	5	型について	\N	\N	\N	\N	\N	\N	\N	PHPでの型について説明していきます。<br><br>型とは、文字、整数、小数などを区別するために使用されます。<br><br>例えば1と1.0と"1"は別の型となります。<br><br>1は整数の型、1.0は小数の型、"1"は文字列の型となります。<br><br>PHPでは本来数値と文字列は計算できないはずですが計算時に文字列の型は数値の型に変換され計算されるようになっています。<br><br><h2>null</h2><br>null型は変数の中身が消去されたりして中身がないときの型です。<br><br><br><h2>int</h2><br>int型は1,2,3...などの整数の値の型となります。<br><br>また、下で出てくるbool型をint型に変換するとfalseは0,trueは1となります。<br><br><br><h2>float型</h2><br>float型は小数を使用するときの型となります。<br><br><br><h2>string</h2><br>string型は文字列を使用するときの型となります。<br><br>"1"は数値ではなく文字としての1として認識されます。<br><br><br><h2>bool型</h2><br>bool型はif文などで判断するときに使用される型となります。<br><br>if()の場合()の中の式が正しければtrueに、間違っていればfalseに置き換えて処理されます。<br><br>例)if(1==1)の場合は正しいのでif(true)となります。<br><br>また、null、""、0、array()など中身がないもの、0はfalseとして処理されます。<br><br>中身があれば文字列、マイナスの数値などもtrueとして処理されます。<br><br><br><h2>array型</h2><br>配列を使用するときの型となります。<br><br><br>callable型<br>callable型は関数を使用するときの型となります。<br><br><br><h2>オブジェクト型</h2><br>オブジェクト型はクラスを使用するときに使用される型となります。<br><br><br><h2>リソース型</h2><br>リソース型は外部ファイルを開いた時に使用される型となります。<br><br><br><h2>mixed型</h2><br>上記の全ての型を含む型です。<br><br><br><h2>void型</h2><br>戻り値のない関数を使用するときの型です。<br><br><br><h2>Iterable</h2><br>foreachで使用可能である関数などを使用するときの型です。	9
48	2024-06-27 16:34:04	2024-06-28 05:05:01	1	5	変数(可変変数)	test\ntest2\ntest3	PHP	<?php\n   $a = "test";\n   $test = "test2";\n   $test2 = "test3";\n\n   echo '<div>'.$a.'</div>';\n   echo '<div>'.$$a.'</div>';\n   echo '<div>'.$$$a.'</div>';	\N	\N	\N	\N	上の例では、まず変数aにtest、変数testにtest2、変数test2にtest3を代入しています。<br><br>最初のechoの$aでは普通に変数aの値であるtestが出力されます。<br>次に$$aではまず$aでの部分が変数aの値であるtestに変換され、$testとなり、$testの値であるtest2が出力されます。<br>最後に$$$aでは、$$aは$testとなり、$testの値はtest2なので、$test2となりその値であるtest3が出力されます。<br><br>このように$を複数つけて変数名を変化させる変数のことを可変変数といいます。	5
52	2024-06-28 02:56:57	2024-06-28 07:19:44	1	5	条件分岐(if文)	変数aは10より大きいです。	PHP	<?php\n   $a = 10;\n\n   if($a>=10){\n\\\\t\\\\techo "変数aは10より大きいです。";\n   }elseif($a==10){\n\\\\t\\\\techo "変数aは10です。";\n   }else{\n\\\\t\\\\techo "変数aは10未満です。";\n   }	\N	\N	\N	\N	if文は<br><div class="code-block">if(条件){<br>   条件に一致の処理;<br>}elseif(ifの条件が違っていた時の2番目の条件){<br>   2番目の条件に一致したときの処理;<br>}else{<br>   どの条件にも一致しなかったときの処理;<br>}</div><br><br>の形式で記入します。<br>最初に一致した部分の処理でif文は終了するので、ifの部分に一致するとelseif、elseでの処理は実行されません。<br>最初の条件に一致したときのみ処理を行いたいときは、elseif、elseは記入しなくても問題ありません。<br><br>また、条件を増やしたいときはelseifを複数記入することも可能です。	10
53	2024-06-28 03:12:24	2024-06-28 07:18:58	1	5	条件分岐(switch文)	男性です	PHP	<?php\n    $test = '男性';\n\n    switch ($test) {\n        case '男性':\n            echo '男性です';\n            break;\n\n        case '女性':\n            echo '女性です';\n            break;\n\n        case '不明':\n            echo '性別は不明です';\n            break;\n\n        default:\n            echo '性別が記入されていません';\n            break;\n    }	\N	\N	\N	\N	switch文もif文と同じように条件分岐に使用されます。<br><br><div class="code-block">switch(変数名)<br>   case 変数の値:<br>      値が一致したときの処理;<br>      break;<br>   <br>   default:<br>      一致しなかったときの処理';<br>      break;</div><br>の形式で記入します。<br>if文と違い、break;が実行された時点でswitch文が終了するので記入されていないと以降の処理も実行されますので注意してください。<br><br>また、caseやデフォルトの末尾は;ではなく:なので注意してください。	11
54	2024-06-28 03:26:09	2024-06-28 07:18:00	1	5	繰り返し処理(while文)	0回目\n1回目\n2回目\n3回目\n4回目\n5回目\n6回目\n7回目\n8回目\n9回目\n10回目	PHP	<?php\n   $count = 0;\n   while ($count <= 10) {\n      echo "<div>{$count}回目</div>";\n      $count ++;\n   }	\N	\N	\N	\N	while文は、条件に一致している間繰り返し処理を行います。<br><br><div class="code-block">while(条件){<br>   一致している間行う処理;<br>}</div><br><br>の形式で記入します。<br>条件で使用している変数の値を増やし忘れると無限ループしてしまうので気を付けてください。<br><br>上の例では、変数countに0を代入し、while文内でechoでcount回目と出力し、最後にcount++でcountの値を1増やしています。<br><br>count++やcount+=1はcount=count+1と同じ内容となり変数の値を1増やすという処理になります。	12
55	2024-06-28 03:34:12	2024-06-28 07:17:17	1	5	繰り返し処理(do while文)	1	PHP	<?php\n   $i=1;\n\n   do{\n      echo $i;\n      $i++;\n   }while($i<1);	\N	\N	\N	\N	do while文は<br><div class="code-block">do{<br>   条件が一致する間の繰り返し処理;<br>}while(条件);</div><br><br>の形式で記入します。<br>while文では、最初から条件が一致していないときは処理が行われませんが、do while文では、最初から条件が一致していないときでも1回のみ処理が行われます。	13
56	2024-06-28 03:44:56	2024-06-28 03:52:38	1	5	途中で処理を抜ける	0回目\n1回目\n2回目\n3回目\n4回目\n5回目\n6回目\n7回目\n8回目\n9回目	PHP	<?php\n   $count = 0;\n\n   while ($count < 20){\n      if($count == 10){\n         break;\n      }\n\n      echo "<div>{$count}回目</div>";\n      $count += 1;\n   }	\N	\N	\N	\N	switch文の説明で少し触れましたが、break文はその時点で処理を抜ける文となっています。<br><br>上の例ではwhile($count &lt; 20)となっており、本来20回処理が行われるのですが中にif文を記入し、その中にbreak;を記入することで、countが10になった時点で処理を抜けるようにしています。	14
57	2024-06-28 03:53:05	2024-06-28 07:16:35	1	5	処理の先頭に戻る	1回目\n3回目\n5回目\n7回目\n9回目	PHP	<?php\n\\\\t$count = 0;\n\n\\\\twhile ($count < 10){\n\n\\\\t\\\\tif ($count % 2 == 0){\n\\\\t\\\\t\\\\t$count ++;\n\\\\t\\\\t\\\\tcontinue;\n\\\\t\\\\t\\\\t}\n\n\\\\t\\\\techo "<div>{$count}回目</div>";\n\\\\t\\\\t$count ++;\n\\\\t}	\N	\N	\N	\N	処理の途中にcontinue;と記入することで、処理の先頭に戻すことができます。<br><br>上の例ではwhile文の中のif文で偶数時はcountを1増やしてwhile文の先頭に戻しています。<br>1増やした値がwhile文の条件に一致していたらそのまま引き続き処理が実行されます。<br><br><div class="code-block">$count % 2 == 0</div><br>は、countを2で割った余りが0ならばという意味になります。	15
58	2024-06-28 03:58:41	2024-06-28 07:15:39	1	5	繰り返し処理(for文)	0回目\n1回目\n2回目\n3回目\n4回目\n5回目\n6回目\n7回目\n8回目\n9回目	PHP	<?php\n\\\\tfor($count = 0; $count < 10; $count ++){\n\\\\t\\\\techo "<div>{$count}回目</div>";\n\\\\t}	\N	\N	\N	\N	for文は<br><div class="code-block">for(変数の定義, 条件, 条件終了時の変数の変化){<br>   条件に一致する間の処理;<br>}</div><br><br>の形式で使用します。<br><br>上の例ではfor文の引数でcountに0を代入、countが10になるまで繰り返す、繰り返し完了時にcountの値を1増やすという内容になっています。	16
59	2024-06-28 04:08:51	2024-06-28 07:15:07	1	5	配列	a	PHP	<?php\n\\\\t$test[0]="a";\n\\\\t$test[1]="b";\n\\\\t$test[2]="c";\n\n\\\\techo $test[0];	\N	\N	\N	\N	配列とは$変数名[要素番号]の形式で記入することで。一つの変数に複数の値を代入することができます。<br>呼び出すときは$変数名[要素番号]の形式で呼び出すことができます。<br><br>また、<br><div class="code-block">$変数名 = array(値, 値, 値)</div><br>のように定義することもでき、その場合は先頭から要素番号0から順番に要素番号が割り振られます。	17
60	2024-06-28 04:13:05	2024-06-28 07:14:32	1	5	繰り返し処理(foreach文)	a\nb\nc	PHP	<?php\n\\\\t$test[0]="a";\n\\\\t$test[1]="b";\n\\\\t$test[2]="c";\n\n\\\\tforeach($test as $value){\n\\\\t\\\\techo "<div>{$value}</div>";\n\\\\t}	\N	\N	\N	\N	foreach文は、配列などに対して繰り返し処理を行うときに使用します。<br><br><div class="code-block">foreach(繰り返し時に代入する変数 as 繰り返し対象となる変数){<br>   繰り返し時の処理;<br>}</div><br>の形式で記入します。<br><br>上の例では配列である変数testに対して繰り返し処理を行い、testの値は順番に変数valueに代入されていき、処理が行われています。	18
61	2024-06-28 04:27:38	2024-06-28 04:32:01	1	5	多次元配列	Array ( [0] => Array ( [0] => a [1] => b [2] => c ) [1] => Array ( [0] => d [1] => e [2] => f ) )\na	PHP	<?php\n    $test=array('a','b','c');\n    $test2=array('d','e','f');\n    $test3=array($test,$test2);\n\n\\\\tprint_r($test3);\n\\\\techo "<div>{$test3[0][0]}</div>";	\N	\N	\N	\N	多次元配列は配列の中に配列が入っている状態となった配列です。<br><br>上の例では、$test3は[['a', 'b', 'c'],['d', 'e', 'f']]<br>の形式の多次元配列となっています。<br><br>呼び出すときは、$test[0]は['a', 'b', 'c']となっており、最初の要素を呼び出すときは$test[0][0]となります。<br><br>配列はさらに入れ子にしていき、次元を増やすことも可能になっています。	19
62	2024-06-28 04:35:40	2024-06-28 04:38:58	1	5	配列のアンパック	Array ( [0] => 1 [1] => 2 [2] => 3 [3] => 4 [4] => 5 [5] => 6 )\n4	PHP	<?php\n\\\\t$array=[1,2,3];\n\\\\t$array2=[...$array,4,5,6];\n\n\\\\tprint_r($array2);\n\\\\techo "<div>{$array2[3]}</div>";	\N	\N	\N	\N	注意)この機能はPHPのバージョンが8.1以降でのみ使用することができます。<br>配列のアンパックは、配列の任意の場所に...$配列の代入された変数と記入することで、その要素を割り込ませることができます。<br><br>上の例では、array2の先頭に...$arrayと記入していることで$arrayの要素を割り込ませ、4, 5, 6はその後ろに配置されるようになっています。	20
63	2024-06-28 04:43:48	2024-06-28 07:11:30	1	5	配列を複数の変数に分割する	2023\n7\n30	PHP	<?php\n\\\\t$date=[2023,7,30];\n\n\\\\tlist($year,$month,$day) = $date;\n\\\\techo "<div>{$year}</div>";\n\\\\techo "<div>{$month}</div>";\n\\\\techo "<div>{$day}</div>";	\N	\N	\N	\N	listを使用することで配列の各値を別の変数にまとめて代入することができます。<br><div class="code-block">list($変数名, $変数名, $変数名) = 配列の代入された変数</div><br>の形式で記入することで、list()内の先頭の要素から順番に配列の値が先頭から順番に代入されていきます。	21
66	2024-06-28 05:08:29	2024-06-28 05:10:43	1	5	マジック定数	\N	\N	\N	\N	\N	\N	\N	マジック定数とは定数を呼び出す位置で値が変更される特殊な定数のことです。<br><br>定数と同じく定数名だけを記入すると呼び出すことができます。<br><br><br><h2>__LINE__</h2><br>ファイル内での行番号を取得することができます。<br><br><br><h2>__FILE__</h2><br>ファイル名を取得することができます。<br><br><br><h2>__DIR__</h2><br>呼び出したファイルがあるディレクトリ(フォルダ)名を取得することができます。<br><br><br><h2>__FUNCTION__</h2><br>関数名を取得することができます。<br><br><br><h2>__CLASS__</h2><br>クラス名を取得することができます。<br><br><br><h2>__TRAIT__</h2><br>トレイト名を取得することができます。<br><br><br><h2>__METHOD__</h2><br>メソッド(クラス内で定義された関数)を取得することができます。<br><br><br><h2>__NAMESPACE__</h2><br>名前空間を呼び出すことができます。	23
64	2024-06-28 04:53:07	2024-06-28 07:10:58	1	5	処理を特定の場所に移動させる	2	PHP	<?php\n\\\\tgoto test;\n\\\\techo 1;\n\n\\\\ttest:\n\\\\techo 2;	\N	\N	\N	\N	goto文を使用すると、処理を特定の場所に移動させることができます。<br><br><div class="code-block">goto 移動先;<br>その他の処理<br>移動先:</div><br>の形式で記入することでgoto文を記入したところから移動先に移動させることができます。<br><br>上の例では、最初のgoto文でtest:まで移動させているため、echo 1;は実行されません。	22
65	2024-06-28 05:00:01	2024-06-28 11:27:05	1	5	定数	1	PHP	<?php\n    const TEST=1;\n\n    echo TEST;	\N	\N	\N	\N	定数とは書き換えができない変数のことです(書き換えを行おうとするとその場所でエラーとなります)。<br><br>書き換えが必要ない変数は基本的に定数として代入するようにすることで意図しないバグを防ぐことができます。<br>また、処理速度の向上にもつながります。<br><br>定数は上記の書き方以外に<br><div class="code-block">define(定数名, 定数の値);</div><br>の形式でも定義することができます。<br>	6
68	2024-06-28 05:15:10	2024-06-28 07:10:03	1	5	別のPHPファイルの読み込み	test	PHP	<?php\n   require_once dirname(__FILE__) . '/test.php';\n   testfunc();	test.php	<?php\n   function testfunc(){\n    echo 'test';\n   }	\N	\N	上の例ではメインのPHPファイルと同じフォルダにあるtest.phpを読み込み、test.phpのtestfuncを実行している例です。<br><br><div class="code-block">require_once dirname(__FILE__) . 'ファイルのパス(現在のファイルからの相対パス)';</div><br>の形式で別のPHPファイルを読み込むことができます。<br>自分より上位の階層のファイルを読み込むときなどは/../などでフォルダをさかのぼって移動してください。<br><br>また、require_onceは、ファイルが読み込まれていなければ読み込む、ファイルが存在しない場合や読み込みエラーが発生したときエラーとなります。<br>複数回読み込みたいときはrequireを使用してください。<br><br>ファイルがないとき、読み込みでもエラーを出したくないときはinclude_onceを使用し、複数回読み込みたいときはincludeを使用してください。	24
69	2024-06-28 05:36:59	2024-06-28 06:53:32	1	5	例外処理	$testの値がマイナスです。\n処理を終了します	PHP	<?php\n    $test= -1;\n\n\\\\ttry{\n\\\\t\\\\tif($test<0){\n\\\\t\\\\t\\\\tthrow new Exception('$testの値がマイナスです。');\n\\\\t\\\\t}\n        echo 'test';\n\\\\t}catch(Exception $e){\n\\\\t\\\\techo "<div>{$e->getMessage()}</div>";\n\\\\t}finally{\n\\\\t\\\\techo "<div>処理を終了します</div>";\n\\\\t}	\N	\N	\N	\N	例外処理は意図しない値などが代入されたときに別の処理などをするときなどに使用します。<br><br>try{<br>\\\\t\\\\t処理内容<br>\\\\t}catch(Exception $e){<br>\\\\t\\\\t例外時の処理<br>\\\\t}finally{<br>\\\\t\\\\t処理成功時、例外時共に行う処理<br>\\\\t}<br>の形式で記入します。<br><br>例外を送出時は<br><div class="code-block">throw new Exception('例外メッセージ');</div><br>の形式で記入します。<br>例外が送出されると、それ以降のtry句は実行されずに、catch句が実行されます。<br>例外が送出されなかった場合は、try句が最後まで実行され、そのあとはfinally句が実行されます。<br><br>catch句では引数として、try句で作成されたExceptionクラスが渡されます。<br>$eの部分はeではなく任意の変数名を付けることが可能となっています。<br><br>$catch句で受け取った変数名-&gt;getMessage()<br>とすることで例外時のメッセージを使用することができます。	25
70	2024-06-28 06:58:26	2024-06-28 07:31:33	1	5	関数	3	PHP	<?php\n    $test1 = 1;\n\\\\t$test2 = 2;\n\n\\\\tfunction test_func($val1, $val2){\n\\\\t\\\\t$val3 = $val1 + $val2;\n\\\\t\\\\treturn $val3;\n\\\\t}\n\n\\\\t$return_val = test_func($test1, $test2);\n\\\\techo $return_val;	\N	\N	\N	\N	関数とは、特定の決まった処理をさせるためのものです。<br>関数は、定義と呼び出しがあり、定義した関数を呼び出したときに関数の処理が実行されます。<br><br>関数の定義は、<br><div class="code-block">function 関数名(仮引数){<br>   関数の処理;<br>   return 関数の外に返したい値;<br>}</div><br>の形式で定義します。<br>仮引数は、,区切りで複数定義もしくは、仮引数なしにすることもできます。<br><br>また、returnで関数外に渡す値のことを戻り値といい、戻り値がない場合はreturnのみ記入してください。<br><br><div class="code-block">関数名(引数)</div><br>の形式で記入してください。<br><br>上の例では、2つの値の足し算をするtest_func関数を定義し、その戻り値を変数$return_valに代入しています。<br>test_func呼び出し時に引数は$test1、$test2としていますが、これは関数内では$val1、$val2として扱われます。<br><br>	26
71	2024-06-28 07:22:25	2024-06-28 07:30:50	1	5	引数の初期値の設定	3	PHP	<?php\n\\\\t$test1 = 1;\n\n\\\\tfunction test_func($val1, $val2=2){\n\\\\t\\\\t$val3 = $val1 + $val2;\n\\\\t\\\\treturn $val3;\n\\\\t}\n\n\\\\t$return_val = test_func($test1);\n\\\\techo $return_val;	\N	\N	\N	\N	引数は、定義時に仮引数=値の形式で記入することで、初期値を設定することができます。<br><br>ここで設定した初期値は、呼び出し時にその位置の引数が未記入の時は設定した値が使用されます。<br>注意点は、初期値を設定した仮引数の後ろに初期値を設定していない仮引数を配置するとエラーになります。<br><div class="code-block">function test_func($val1=2, val2)</div><br>上のようにするとエラーになる。<br><br>例では、仮引数val2に2を代入しています。<br>呼び出し時にtest_func($test1)として、2つ目の引数が設定されていないので、仮引数で設定された2を使用して処理が行われています。	27
72	2024-06-28 07:33:44	2024-06-28 07:42:53	1	5	関数へ引数として参照を渡す	2	PHP	<?php\n\\\\t$test1 = 1;\n\n\\\\tfunction test_func(&$val1){\n\\\\t\\\\t$val1 ++;\n\\\\t\\\\treturn;\n\\\\t}\n\n\\\\ttest_func($test1);\n\\\\techo $test1;	\N	\N	\N	\N	上の例では引数として、変数の参照を渡しています。<br>本来、関数内での変数と関数外の変数は別物として扱われるので、関数内で値を変更しても外側の変数には影響を与えません。<br><br>関数を使用して、関数外の変数の値を変更したいときは、関数定義時の仮引数の前に&を付けます。<br>このようにすることで、引数として渡されるときに値ではなく、その変数のメモリ上の場所を渡し、関数内で値を変更したときに外側の変数の値を変化させることができるようになります。<br><br>このようにメモリ上の参照を渡すことをリファレンス渡しといいます。	28
73	2024-06-28 07:44:35	2024-06-28 07:53:13	1	5	可変長引数	6	PHP	<?php\n\\\\tfunction test_func(...$test){\n\\\\t\\\\t$sum = 0;\n\\\\t\\\\tforeach($test as $val){\n\\\\t\\\\t\\\\t$sum += $val;\n\\\\t\\\\t}\n\\\\t\\\\treturn $sum;\n\\\\t}\n\n\\\\t$return_val = test_func(1, 2, 3);\n\\\\techo $return_val;	\N	\N	\N	\N	仮引数を...$仮引数名とすることで、引数として受け取る値を配列にまとめて受け取ることができます。<br><br>上の例では、test_funcに引数として1,2,3を渡していますが、仮引数で...$testとなっているため、関数内では$test=[1, 2, 3]として扱われます。<br>変数$sum=0としてそれに対してforeachを使い順番に$testの要素の値を足していき、最終的な合計を戻り値として返しています。	29
74	2024-06-28 07:56:00	2024-06-28 08:02:41	1	5	スプレッド構文	6	PHP	<?php\n\\\\tfunction test_func($a, $b, $c){\n\\\\t\\\\t$d = $a + $b + $c;\n\\\\t\\\\treturn $d;\n\\\\t}\n\n\\\\t$test = [1, 2, 3];\n\\\\t$return_val = test_func(...$test);\n\\\\techo $return_val;	\N	\N	\N	\N	リファレンス渡しとは逆に、引数を...$配列を代入した変数として渡し、それを分解して各仮引数にあてはめる構文をスプレッド構文と呼びます。<br><br>上の例では、test_func呼び出し時の引数に、...$testとしているので、$testは配列から値に分解されて、それぞれ$a、$b、$cにあてはめられます。	30
77	2024-06-28 08:08:09	2024-06-28 08:16:59	1	5	引数、戻り値の型指定	1	PHP	<?php\n\\\\tfunction test_func(int $a): int{\n\\\\t\\\\treturn $a;\n\\\\t}\n\n\\\\techo test_func(1);	\N	\N	\N	\N	関数定義時に、引数の型、戻り値の型も指定することができます。<br><br>関数定義時に<br><div class="code-block">function 関数名(型 $仮引数): 戻り値の型</div><br>とすることで引数、戻り値の型を指定することができます。<br>引数、戻り値、どちらかのみの指定も可能となっており、戻り値がないときの戻り値の型は:voidとします。<br>また、型名の前に?を付けることでnullも許容できるようになります。<br><br>指定された型以外になるときは、エラーが送出されます。	31
78	2024-06-28 08:18:26	2024-06-28 08:23:14	1	5	クロージャ(無名関数)	1	PHP	<?php\n\\\\t$test = function(){\n\\\\t\\\\treturn 1;\n\\\\t};\n\n\\\\techo $test();	\N	\N	\N	\N	上の例のような、関数名のない関数のことをクロージャ(無名関数)といいます。<br>上の例は、$testに無名関数を代入している例です。<br>	32
79	2024-06-28 08:27:21	2024-06-28 08:33:30	1	5	アロー関数	3	PHP	<?php\n\\\\t$a = 1;\n\n\\\\t$test = fn($b) => $a + $b;\n\\\\techo $test(2);	\N	\N	\N	\N	アロー関数は、グローバル変数を使用することができ、短く書くことができる関数です。<br><div class="code-block">$変数名 = fn($仮引数) =&gt;戻り値</div><br>の形式で定義することができます。<br><br>呼び出すときは、<br><div class="code-block">アロー関数を代入した変数(引数)</div><br>の形式で記入します。<br><br>直接戻り値になるため、難しい処理をするのには向いていませんが、簡単な処理を手軽に記入することができます。	33
80	2024-06-28 08:35:27	2024-06-28 08:42:03	1	5	関数内でグローバル変数を使用する	3	PHP	<?php\n\\\\t$a = 1;\n\\\\t$b = 2;\n\n\\\\tfunction test_func(int $val){\n\\\\t\\\\tglobal $a;\n\\\\t\\\\t$b = $a + $val;\n\\\\t\\\\treturn $b;\n\\\\t}\n\n\\\\t$c = test_func($b);\n\\\\techo $c;	\N	\N	\N	\N	本来、関数の中と外では、同じ変数名でも別のものとして扱われるので、関数外の変数を直接使用することなどはできません。<br><br>上の例のように、<br><div class="code-block">global $変数名;</div><br>と関数内に記入することで、関数外の変数を使用できるようになります。<br><br>また、関数外でも、関数内でも$bを定義していますが、これらは別物となります。	34
81	2024-06-28 08:43:39	2024-06-28 08:49:10	1	5	static(静的)変数	1\n2	PHP	<?php\n\\\\tfunction test_func(){\n\\\\t\\\\tstatic $a = 0;\n\\\\t\\\\t$a ++;\n\\\\t\\\\treturn $a;\n\\\\t}\n\n\\\\t$val = test_func();\n\\\\techo "<div>{$val}</div>";\n\\\\t$val = test_func();\n\\\\techo "<div>{$val}</div>";	\N	\N	\N	\N	本来、関数内で定義された変数は、呼び出されるたびに、初期化され、再定義されるので何度呼び出しても同じ値になるのですが、<br><div class="code-block">static 変数名=値</div><br>とすることで対象の変数は値を保持するようになり、再度呼び出されたときは、再定義されず関数の終了時点での値となります。	35
82	2024-06-28 08:51:57	2024-06-28 08:54:23	1	5	エラー制御演算子	\N	PHP	<?php\n\\\\techo @$a;	\N	\N	\N	\N	本来、変数を定義していない状態で呼び出すとエラーになるのですが、変数名の前に@を付けることでエラーが出ないようにすることができます。<br>この@のことをエラー制御演算子と呼びます。	36
83	2024-06-28 09:01:37	2024-06-28 09:06:36	1	5	実行演算子	\N	PHP	<?php\n\\\\techo `dir`;	\N	\N	\N	\N	``を使用することで、``の中に書いた内容が、コマンドプロンプトで実行されます。	37
84	2024-06-28 09:12:42	2024-06-28 09:14:50	1	5	論理演算子	test1が実行されました\n------------------------\ntest2が実行されました\ntest1が実行されました\n------------------------\ntest1が実行されました\ntest2が実行されました\n------------------------\ntest2が実行されました	PHP	<?php\n\\\\tfunction test1(){\n\\\\t\\\\techo '<div>test1が実行されました</div>';\n\\\\t\\\\treturn false;\n\\\\t}\n\n\\\\tfunction test2(){\n\\\\t\\\\techo '<div>test2が実行されました</div>';\n\\\\t\\\\treturn true;\n\\\\t}\n\n\\\\ttest1() && test2();\n\\\\techo '------------------------';\n\\\\ttest2() && test1();\n\\\\techo '------------------------';\n\\\\ttest1() || test2();\n\\\\techo '------------------------';\n\\\\ttest2() || test1();	\N	\N	\N	\N	論理演算子は、&&演算子はfalseが返されるまで、||演算子は、trueが返されるまで実行を続けます。<br><br>上の例では戻り値がtrueの関数とfalseの関数を使用して実行を確認しています。	38
86	2024-06-28 10:32:19	2024-06-28 10:44:34	1	5	クラス	name\ntest_funcが実行されました	PHP	<?php\n\\\\tclass Test{\n\\\\t\\\\tpublic $name = 'name';\n\n\\\\t\\\\tpublic function test_func(){\n\\\\t\\\\t\\\\techo '<div>test_funcが実行されました</div>';\n\\\\t\\\\t}\n\\\\t}\n\n\\\\t$test_class = new Test();\n\\\\techo "<div>{$test_class->name}</div>";\n\\\\t$test_class->test_func();	\N	\N	\N	\N	クラスとは、プロパティ(クラス内の変数)とメソッド(クラス内の関数)をひとまとめにしたものです。<br><br>クラスは、<br><div class="code-block">class{<br>   プロパティ、メソッドの定義<br>}</div><br>の形式で定義することができます。<br><br>プロパティ、メソッドについているpublicは、アクセス装飾子と呼ばれ、プロパティ、メソッドへのアクセス可能範囲のことで、publicはどこからでもアクセスで切るようになっています。<br><br>クラスはの定義は、設計図のようなもので、クラスを実際に使用するには、インスタンスの作成(実際のオブジェクトを作成)をする必要があります。<br><br>インスタンスの作成は<br><div class="code-block">new クラス名()</div><br>の形式で行うことができます。<br>また、同じクラスから複数インスタンスを作成したとしてもそれらのインスタンスは別物として扱われます。(どれかのインスタンスのプロパティを変更してもほかのインスタンスには影響を与えません。)<br><br>インスタンスからプロパティを呼び出すには<br><div class="code-block">インスタンス->メソッド名</div><br>の形式で呼びだすことができます。<br>呼び出し時のプロパティ名の前に$がない点に注意してください。<br><br>インスタンスからメソッドを呼び出すときは<br><div class="code-block">インスタンス->メソッド()</div><br>の形式で呼び出すことができます。	40
87	2024-06-28 10:46:48	2024-06-28 10:51:07	1	5	プロパティの値の変更	2	PHP	<?php\n\\\\tclass Test{\n\\\\t\\\\tpublic $test_value = 1;\n\\\\t}\n\n\\\\t$test_class = new Test();\n\\\\t$test_class->test_value = 2;\n\\\\techo $test_class->test_value;	\N	\N	\N	\N	クラスのプロパティは<br><div class="code-block">インスタンス->プロパティ = 変更後の値</div><br>の形式で変更することができます。	41
88	2024-06-28 10:52:10	2024-06-28 11:26:26	1	5	クラス内定数	1	PHP	<?php\n\\\\tclass Test{\n\\\\t\\\\tconst TEST_VALUE = 1;\n\\\\t}\n\n\\\\t$test_class = new Test();\n\\\\techo $test_class::TEST_VALUE;	\N	\N	\N	\N	クラス内での定数は、<br><div class="code-block">アクセス装飾子 const 定数名 = 定数の値</div><br>の形式で定義することができます。<br><br>また、定数はアクセス装飾子未記入でもエラーにはならず、publicとして扱われます。<br><br>定数はインスタンスごとではなく、同一クラスからのインスタンスであれば共有されます。<br>呼び出し方法もプロパティとは違い、<br><div class="code-block">インスタンス::定数</div><br>または、インスタンスを作成していなくても呼び出すことができ、<br><div class="code-block">クラス::定数</div><br>と記入して呼び出すことができます。	42
90	2024-06-28 11:02:55	2024-06-28 11:08:04	1	5	擬似変数(this)	1	PHP	<?php\n\\\\tclass Test{\n\\\\t\\\\tpublic $test_value = 1;\n\n\\\\t\\\\tpublic function test_method(){\n\\\\t\\\\t\\\\treturn $this->test_value;\n\\\\t\\\\t}\n\\\\t}\n\n\\\\t$test_class = new Test();\n\\\\techo $test_class->test_method();	\N	\N	\N	\N	メソッド内で同一インスタンスのプロパティを使用するときは<br><div class="code-block">$this-&gt;プロパティ</div><br>と記入します。<br><br>$thisは自分自身(インスタンス)を指します。	43
91	2024-06-28 11:09:17	2024-06-28 11:15:48	1	5	クラスの継承	1	PHP	<?php\n\\\\tclass Test{\n\\\\t\\\\tpublic $test_value = 1;\n\n\\\\t\\\\tpublic function test_method(){\n\\\\t\\\\t\\\\treturn $this->test_value;\n\\\\t\\\\t}\n\\\\t}\n\n\\\\tclass Test2 extends Test{\n\n\\\\t}\n\n\\\\t$test_class = new Test2();\n\\\\techo $test_class->test_method();	\N	\N	\N	\N	クラスの継承を行うと、継承元のプロパティ、メソッドが継承先に引き継がれます。<br><br>クラスの継承はクラス作成時に、<br><div class="code-block">クラス名 extends 継承するクラス</div><br>の形式で記入します。<br><br>継承は1つのクラスからしか行えないですが、多段的に複数回継承することはできます。<br><br>上の例では、Test2クラスにTestクラスを継承させています。<br>Test2クラスでは何も定義していないですが、test_value、test_methodが継承されているので使用可能となっています。<br><br>また、継承元のクラスを親クラス、継承先のクラスを子クラスと呼びます。	44
92	2024-06-28 11:22:45	2024-06-28 11:22:45	1	5	アクセス装飾子	\N	\N	\N	\N	\N	\N	\N	アクセス装飾子は、public、protected、privateの3種類があります。\\\\r\n\\\\r\npublicはどこからでも呼び出すことができます。\\\\r\nprotectedは自クラスのインスタンスもしくは親子クラスから呼び出すことができます。\\\\r\nprivateは自クラスからのインスタンスからのみ呼び出すことができます。\\\\r\n\\\\r\nできる限り厳しいアクセス装飾子を使用するようにしてください。	45
93	2024-06-28 11:28:22	2024-06-28 11:41:02	1	5	静的プロパティ、静的メソッド	1\n1	PHP	<?php\n\\\\tclass Test{\n\\\\t\\\\tpublic static $test_value = 1;\n\n\\\\t\\\\tpublic static function test_method(){\n\\\\t\\\\t\\\\treturn self::$test_value;\n\\\\t\\\\t}\n\\\\t}\n\n\\\\t$test_class = new Test2();\n\\\\techo Test::$test_value .'<br>';\n\\\\techo $test_class::test_method();	\N	\N	\N	\N	静的プロパティ、静的メソッドは、インスタンスごとではなく、クラスで共有されるプロパティ、メソッドとなっています。<br>静的プロパティ、静的メソッドともに、クラスに紐づいているため、インスタンスからでもクラスからでも呼び出すことができます。<br><br>静的プロパティは、<br><div class="code-block">アクセス装飾子 static プロパティ名</div><br>で定義することができ、静的メソッドは、<br><div  class="code-block">アクセス装飾子 static メソッド名()</div><br>で定義することができます。<br><br>静的プロパティの呼び出し方法は、<br><div class="code-block">インスタンスもしくはクラス::$プロパティ名</div><br>静的メソッドの呼び出し方法は、<br><div cllass="code-block">インスタンスもしくはクラス名::メソッド名</div><br>となっています。<br>静的メソッド呼び出し時はプロパティの前に$が必要な点に注意してください。<br><br>また、インスタンス、クラスのメソッドから自クラスの静的プロパティを使用するときは$thisではなくselfを使用し、<br><div class="code-block">self::$プロパティ名</div><br>としてください。	46
94	2024-06-28 11:42:09	2024-06-28 11:49:30	1	5	継承先で再定義できないメソッドの定義	1	PHP	<?php\n\\\\tclass Test{\n\\\\t\\\\tpublic $test_value = 1;\n\n\\\\t\\\\tfinal public function test_method(){\n\\\\t\\\\t\\\\treturn $this->test_value;\n\\\\t\\\\t}\n\\\\t}\n\n\\\\t$test_class = new Test();\n\\\\techo $test_class->test_method();	\N	\N	\N	\N	メソッド定義時に<br><div class="code-block">final アクセス装飾子 function メソッド名()</div><br>とすると、子クラスで同名のメソッドの再定義ができなくなります。<br><br>finalを付けていないメソッドを再定義するとメソッドな内容が書き換わってしまうので、書き換わると不都合のあるメソッドの前にはfinalを付けるようにしてください。	47
95	2024-06-28 11:55:37	2024-06-28 12:04:14	1	5	抽象クラス、抽象メソッド	1	PHP	<?php\n\\\\tabstract class Test{\n\\\\t\\\\tprotected $test_value=1;\n\n\\\\t\\\\tabstract public function test_method();\n\\\\t}\n\n\\\\tclass Test2 extends Test{\n\\\\t\\\\tpublic function test_method(){\n\\\\t\\\\t\\\\treturn $this->test_value;\n\\\\t\\\\t}\n\\\\t}\n\n\\\\t$test_class = new Test2();\n\\\\techo $test_class->test_method();	\N	\N	\N	\N	抽象クラスは、子クラスに未定義のメソッドなどの定義を任せて自身は他のクラスなどにも使えるような汎用性をもった共有な機能のみを持った基幹クラスの定義時などに使用されます。<br>抽象クラスはインスタンスを作成できない点に注意してください。<br><br>抽象クラスは、<br><div class="code-block">abstract class クラス名</div><br>とclassの前にabstractを付けることで定義することができます。<br><br>抽象メソッドは、処理内容などを記入せずに子クラスに処理内容を任せるときに使用します。<br><div class="code-block">abstract function メソッド名()</div><br>の形式で定義することができます。<br>抽象メソッドは、抽象クラスにしか定義できない点に注意してください。<br><br>また、再定義していない抽象メソッドがある状態でインスタンスを作成しようとするとエラーになるので注意してください。	48
96	2024-06-28 14:29:34	2024-06-28 14:40:45	1	5	インターフェース	test1	PHP	<?php\n\\\\tinterface Test{\n\\\\t\\\\tpublic function test_func();\n\\\\t}\n\n\\\\tinterface Test2{\n\\\\t\\\\tpublic function test_func2();\n\\\\t}\n\n\\\\tclass Test_class implements Test, Test2{\n\\\\t\\\\tpublic function test_func(){\n\\\\t\\\\t\\\\techo 'test1';\n\\\\t\\\\t}\n\n\\\\t\\\\tpublic function test_func2(){\n\\\\t\\\\t\\\\techo 'test2';\n\\\\t\\\\t}\n\\\\t}\n\n\\\\t$test_class = new Test_class();\n\\\\t$test_class->test_func();	\N	\N	\N	\N	インターフェースとは、インターフェースを実装するクラスがインターフェースで定義されているメソッドを実装することを強制する機能です。<br><br>インターフェースは<br><div class="code-block">interface インターフェース名{<br>  アクセス装飾子 function メソッド名();<br>}</div><br>の形式で定義することができます。<br>また、一つのインターフェースで複数のメソッドの実装を強制することもできます。<br><br>インターフェースの実装は<br><div class="code-block">class クラス名 implements インターフェース名</div><br>の形式で実装することができます。<br><br>インターフェースは,区切りで複数のインターフェースを実装することも可能となっています。<br>インターフェースを実装したクラスがインターフェースで定義したメソッドをオーバーライドしなかった場合はエラーとなります。	49
97	2024-06-28 14:45:04	2024-06-28 14:48:54	1	5	トレイト	1	PHP	<?php\n\\\\ttrait Test_trait{\n\\\\t\\\\tpublic $test = 1;\n\n\\\\t\\\\tpublic function test_func(){\n\\\\t\\\\t\\\\treturn $this->test;\n\\\\t\\\\t}\n\\\\t}\n\n\\\\tclass TestClass{\n\\\\t\\\\tuse Test_trait;\n\\\\t}\n\n\\\\t$test_class = new TestClass();\n\\\\techo $test_class->test_func();	\N	\N	\N	\N	トレイトで定義したものはクラスに対してコピペのような感じで使用することができます。<br><br>トレイトは<br><div class="code-block">trait トレイト名{<br>   プロパティやメソッドを定義<br>}</div><br>の形式で定義することができます。<br><br>トレイトの使用はクラス内に<br><div class="code-block">use トレイト名</div><br>の形式で使用することができます。	50
98	2024-06-28 14:53:50	2024-06-28 14:56:39	1	5	コンストラクタ	1	PHP	<?php\n\\\\tclass TestClass{\n\\\\t\\\\tpublic $a;\n\\\\t\\\\tpublic $b;\n\\\\t\\\\tpublic function __construct($value, $value2){\n\\\\t\\\\t\\\\t$this->a = $value;\n\\\\t\\\\t\\\\t$this->b = $value2;\n\\\\t\\\\t}\n\\\\t}\n\n\\\\t$test_class = new TestClass(1, 2);\n\\\\techo $test_class->a;	\N	\N	\N	\N	コンストラクタとは、クラスからインスタンスが作成されるときに実行される特殊なメソッドなどでプロパティの値の設定などに使用されます。<br>__constructの名称で定義したメソッドはコンストラクタとして扱われます。<br><br>また、クラス作成時の引数は、コンストラクタの引数として使用されます。	51
99	2024-06-28 15:01:16	2024-06-28 15:26:40	1	5	デストラクタ	1\nインスタンスが破棄されました	PHP	<?php\n\\\\tclass TestClass{\n\\\\t\\\\tpublic $a;\n\\\\t\\\\tpublic function __construct($value){\n\\\\t\\\\t\\\\t$this->a = $value;\n\\\\t\\\\t}\n\n\\\\t\\\\tpublic function __destruct(){\n\\\\t\\\\t\\\\techo '<div>インスタンスが破棄されました</div>';\n\\\\t\\\\t}\n\\\\t}\n\n\\\\t$test_class = new TestClass();\n\\\\techo $test_class->a;\n\\\\t$test_class = null;	\N	\N	\N	\N	デストラクタはクラスが破棄されたときに実行される特殊なメソッドです。<br>メソッド名を__destructとすることでデストラクタとなります。	52
100	2024-06-28 15:06:22	2024-06-28 15:26:28	1	5	クラスを文字列として呼び出したときの処理	文字列として呼び出されました	PHP	<?php\n\\\\tclass TestClass{\n\\\\t\\\\tpublic function __toString(){\n\\\\t\\\\t\\\\treturn '<div>文字列として呼び出されました</div>';\n\\\\t\\\\t}\n\\\\t}\n\n\\\\t$test_class = new TestClass();\n\\\\techo $test_class;	\N	\N	\N	\N	__toStringメソッドを定義することでインスタンスを文字列として呼び出されたときの処理を実装することができます。<br>__tostringメソッドは、戻り値を文字列にしないとエラーとなります。	53
101	2024-06-28 15:20:50	2024-06-28 15:26:10	1	5	アクセスできないプロパティを呼び出したときの処理	aにはクラス外からアクセスすることはできません	PHP	<?php\n\\\\tclass TestClass{\n\\\\t\\\\tprivate $a = 1;\n\\\\t\\\\tpublic function __get($name){\n\\\\t\\\\t\\\\treturn "{$name}にはクラス外からアクセスすることはできません";\n\\\\t\\\\t}\n\\\\t}\n\n\\\\t$test_class = new TestClass();\n\\\\techo $test_class->a;	\N	\N	\N	\N	__getメソッドは、アクセス装飾子などでアクセスできないプロパティにアクセスしようとしたときの処理を記入することができます。<br>__getメソッドの引数には呼び出そうとしたプロパティ名が代入されます。	54
102	2024-06-28 16:27:25	2024-06-28 16:31:28	1	5	アクセスできないプロパティを変更しようとしたときの処理	aはクラス外から変更することはできません	PHP	<?php\n\\\\tclass TestClass{\n\\\\t\\\\tprivate $a = 1;\n\\\\t\\\\tpublic function __set($name, $value){\n\\\\t\\\\t\\\\techo "{$name}はクラス外から変更することはできません";\n\\\\t\\\\t}\n\\\\t}\n\n\\\\t$test_class = new TestClass();\n\\\\t$test_class->a = 1;	\N	\N	\N	\N	__setメソッドはアクセス装飾子などでアクセスできないプロパティを変更しようとしたときに呼び出されるメソッドです。<br><br>__setメソッドの第1引数は変更しようとしたプロパティ名、第2引数は変更しようとした変更後の値となります。	55
103	2024-06-28 16:32:51	2024-06-28 16:37:37	1	5	アクセスできないメソッドを呼び出そうとしたときの処理	test_methodにはクラス外からアクセスすることはできません。	PHP	<?php\n\\\\tclass TestClass{\n\\\\t\\\\tprivate function test_method(){\n\\\\t\\\\t\\\\techo 'test_methodが呼び出されました。';\n\\\\t\\\\t}\n\\\\t\\\\tpublic function __call($name, $arg){\n\\\\t\\\\t\\\\techo "{$name}にはクラス外からアクセスすることはできません。";\n\\\\t\\\\t}\n\\\\t}\n\n\\\\t$test_class = new TestClass();\n\\\\t$test_class->test_method();	\N	\N	\N	\N	__callメソッドは、アクセス装飾子などでアクセスできないメソッドを呼び出そうとしたときに実行されるメソッドです。<br>第1引数には呼び出そうとしたメソッド名、第2引数には呼び出そうとしたときの引数が代入されます。	56
106	2024-06-29 15:51:33	2024-06-29 16:09:54	1	4	Python環境構築	\N	\N	\N	\N	\N	\N	\N	Pythonとは、AI、データ分析などでよく使用されるプログラミング言語ですが、モジュールが多数あり、簡単な記述で様々なことができます。<br>拡張子を.pyとすることでPythonファイルを作成することができます。<br>また、環境構築をせずにとりあえず触ってみたいという方は、<a href="https://colab.research.google.com/">Colaboratory</a>ですぐにPythonを実行することができます。<br><br><h2>Pythonのインストール</h2><br>コマンドプロンプトで<br><div class="code-block">Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))<br><br>choco install python</div><br>と入力することでPythonをインストールすることができます。<br>長いですが、最初の3行(Set～ps1))まで)で1つのコマンドとなっています。<br><div class="code-block">python --version</div><br>と入力してPythonのバージョンが表示されるとインストールに成功しています。<br>作成したPythonファイルは<br><div class="code-block">python ファイル名</div><br>の形式でコマンドプロンプトに入力することで使用することができます。<br><br><h2>Jupyter Notebookのインストール</h2><br>Jupyter Notebookとは、手軽にPythonを実行して試すことができるツールです。<br><div class="code-block">pip install notebook</div><br>とコマンドプロンプトに入力することができます。<br>インストール後、<br><div class="code-block">jupyter notebook</div><br>とコマンドプロンプトに入力するとJupyter Notebookが開かれます。<br>右上のnewからPythonを選択するとPythonを手軽に使用することができます。<br><br>また、visual stadio codeを使用している方は、拡張機能Jupyterをインストールすることで、拡張子を.ipynbとしたファイルを開くと、Jupyter Notebookのような感じで使用できます。<br><br><br>	1
107	2024-06-29 16:11:39	2024-06-29 16:13:51	1	4	文字出力	test	Python	print('test')	\N	\N	\N	\N	Pythonでは<br><div class="code-block">print(出力したい内容)</div><br>と入力することで文字として出力することができます。	2
104	2024-06-28 16:53:00	2024-06-28 16:57:16	1	5	アクセスできない静的メソッドを呼び出そうとしたときの処理	test_methodにはクラス外からアクセスすることはできません。	PHP	<?php\n\\\\tclass TestClass{\n\\\\t\\\\tprivate static function test_method(){\n\\\\t\\\\t\\\\techo 'test_methodが呼び出されました。';\n\\\\t\\\\t}\n\\\\t\\\\tpublic static function __callstatic($name, $arg){\n\\\\t\\\\t\\\\techo "{$name}にはクラス外からアクセスすることはできません。";\n\\\\t\\\\t}\n\\\\t}\n\n\\\\t$test_class = new TestClass();\n\\\\t$test_class::test_method();	\N	\N	\N	\N	__callstaticメソッドは、アクセス装飾子などで呼び出せない静的メソッドを呼び出そうとしたときに呼び出されるメソッドです。<br>第1引数には呼び出そうとしたメソッド名、第2引数には引数にしようとした値が代入されます。<br><br>__callstaticメソッド自身もstaticをつけて静的メソッドにする必要がある点に注意してください。	57
105	2024-06-28 16:58:52	2024-06-28 17:03:18	1	5	クラスを関数として呼び出そうとしたときの処理	TestClassが関数として呼び出されました。	PHP	<?php\n\\\\tclass TestClass{\n\\\\t\\\\tpublic function __invoke(){\n\\\\t\\\\t\\\\techo 'TestClassが関数として呼び出されました。';\n\\\\t\\\\t}\n\\\\t}\n\n\\\\t$test_class = new TestClass();\n\\\\t$test_class();	\N	\N	\N	\N	__invokeメソッドはクラスを関数として呼び出そうとしたときに実行されるメソッドです。<br>仮引数を設定することもできますが、クラスを関数として呼び出す側にも対応する引数を設定する必要があります。	58
108	2024-06-29 16:14:34	2024-06-29 16:17:18	1	4	変数	test	Python	a = 'test'\nprint(a)	\N	\N	\N	\N	変数とは値を一時的に格納する入れ物のことです。<br><div class="code-block">変数名 = 値</div><br>とすることで定義することができます。<br>定義以降、変数を呼び出すと格納した値が使用されます。	3
109	2024-06-29 16:20:17	2024-06-29 16:32:28	1	4	リスト	[1, 2, 'test']	Python	test = [1, 2, 'test']\nprint(test)	\N	\N	\N	\N	リストとは一つの変数に複数の値を代入するためのものです。<br><div class="code-block">変数名=[値,]</div><br>の形式で定義することができ,区切りで増やすことができます。<br>異なる型(数字と文字など)が混ざっていても問題ありません。	4
110	2024-06-29 16:24:45	2024-06-29 16:31:12	1	4	辞書	{'name': 'tarou', 'country': 'Japan'}\ntarou	Python	dict = {\n   'name': 'tarou',\n   'country': 'Japan',\n}\n\nprint(dict)\nprint(dict['name'])	\N	\N	\N	\N	辞書型とは、キーと値からなりキーをタグとして呼び出したりすることができる機能です。<br><div class="code-block">変数名={キー: 値}</div><br>の形式で定義することができ,区切りで増やしていくことができます。<br><br><div class="code-block">変数名[キー]</div><br>として呼び出すとキーに対応する値を取得することができます。	5
111	2024-06-29 16:40:16	2024-06-29 16:42:36	1	4	集合	{1, 2}	Python	set = {1, 2, 1}\nprint(set)	\N	\N	\N	\N	集合とは重複した値を除外したリストのようなものです。<br><div class="code-block">変数名={値}</div><br>の形式で定義することができ,区切りで増やすことができます。	6
112	2024-06-29 16:46:04	2024-06-29 16:51:48	1	4	関数	3	Python	def test(a, b):\n   c = a+ b\n   return c\n\nd = test(1, 2)\nprint(d)	\N	\N	\N	\N	関数とは与えられた値をもとに、処理を実行し、その結果を返す命令のことです。<br><br>関数は<br><div class="code-block">def 関数名(仮引数):<br>   関数の処理内容<br>   return 戻り値(関数外に返したい値)</div><br>の形式で作成することができます。<br>また、仮引数は,区切りで増やすことができます。<br><br>関数呼び出し時は、<br><div class="code-block">関数名(引数)</div><br>の形式で呼び出すことができます。<br><br>上の例では、test関数は2つの値の合計を返す関数となっています。<br>呼び出し時に引数が(1, 2)となっており、それぞれが関数のa, bに代入され計算されています。	7
113	2024-06-29 16:53:38	2024-06-29 16:59:19	1	4	条件分岐(if文)	a=1\n\nif(a<0):\n   print('aは0未満です')\nelif(a==0):\n   print('aは0です')\nelse:\n   print('aは0より大きいです')	Python	a=1\n\nif(a<0):\n   print('aは0未満です')\nelif(a==0):\n   print('aは0です')\nelse:\n   print('aは0より大きいです')	\N	\N	\N	\N	if文は、条件によって処理を分岐するときに使用します。<br><br>if文は<br><div class="code-block">if(条件):<br>   条件に一致していた時の処理<br>elif(条件2):<br>   条件2に一致していた時の処理<br>else:<br>   どの条件にも一致しなかったときの処理</div><br>の形式で記入します。<br>条件に一致するとそれ以降の処理は行われません。	8
114	2024-06-29 17:05:35	2024-06-29 17:10:46	1	4	条件分岐(match文)	男性です	Python	value='男性'\n\nmatch value:\n    case '男性':\n        print("男性です")\n    case '女性':\n        print("女性です")\n    case _:\n        print("性別不明です")	\N	\N	\N	\N	match文は変数の内容に応じて条件分岐するときに使用される文となっています。<br><div class="code-block">match 変数名:<br>   case 条件:<br>      条件に一致したときの処理<br>   case _:<br>      どの条件にも一致しなかったときの処理</div><br>の形式で記入します。<br>また、一致する条件以降の処理は行われません。	9
117	2024-06-30 03:34:34	2024-06-30 12:08:46	4	10	インストール、プロジェクトの作成など	\N	\N	\N	\N	\N	\N	\N	Djangoとは、PythonのサーバーサイドのWebフレームワークでWebアプリの作成などに使われます。<br><br>Pythonがインストールされている環境であれば、<br><div class="code-block">pip install django</div><br>とコマンドプロンプトに入力することでインストールすることができます。<br><br>コマンドプロンプトを開きプロジェクトを作成したいフォルダに移動後、<br><div class="code-block">django-admin startproject プロジェクト名</div><br>と入力することで現在のフォルダにプロジェクト名のフォルダが作成されます。<br><br>また、フォルダが作成されたら、最初からあるフォルダの中にあるsetting.pyを開き、<br><div class="code-block">from pathlib import Path</div><br>と記入してある部分を探し、<br><div class="code-block">from pathlib import Path<br>import os</div><br>と変更し、osモジュールを読み込んでください。<br><br>日本語、日本の時間に設定するために、<br><div class="code-block">LANGUAGE_CODE = "en-us"<br><br>TIME_ZONE = "UTC"</div><br>の部分を<br><div class="code-block">LANGUAGE_CODE = "ja"<br><br>TIME_ZONE = "Asia/Tokyo"</div><br>と書き換えてください。<br><br><br>テンプレートを直下のテンプレートとして使用するのに<br><div class="code-block">TEMPLATES = [<br>    {<br>        "BACKEND": "django.template.backends.django.DjangoTemplates",<br>        "DIRS": [],<br>        "APP_DIRS": True,<br>        "OPTIONS": {<br>            "context_processors": [<br>                "django.template.context_processors.debug",<br>                "django.template.context_processors.request",<br>                "django.contrib.auth.context_processors.auth",<br>                "django.contrib.messages.context_processors.messages",<br>            ],<br>        },<br>    },<br>]</div><br>の部分を探し、<br><div class="code-block">TEMPLATES = [<br>    {<br>        "BACKEND": "django.template.backends.django.DjangoTemplates",<br>        'DIRS': [os.path.join(BASE_DIR, 'templates')],<br>        "APP_DIRS": True,<br>        "OPTIONS": {<br>            "context_processors": [<br>                "django.template.context_processors.debug",<br>                "django.template.context_processors.request",<br>                "django.contrib.auth.context_processors.auth",<br>                "django.contrib.messages.context_processors.messages",<br>            ],<br>        },<br>    },<br>]</div>と書き直してください。<br>これは、views.pyで使用するテンプレートのパスを設定しています。<br><br>その後、プロジェクト直下に、templatesフォルダを作成してください。<br>このフォルダは、viewで読み込むhtmlのテンプレートファイルを置くためのフォルダとなっています。	3
119	2024-06-30 04:12:00	2024-06-30 12:08:46	4	10	アプリケーションの作成、Djangoの処理の流れ	\N	\N	\N	\N	\N	\N	\N	コマンドプロンプトで作成したプロジェクトのフォルダ内に移動後、<br><div class="code-block">python manage.py startapp アプリケーション名</div><br>と入力し、アプリケーション名のフォルダが作成されます。<br><br>アプリケーションが作成されたら、settings.pyを開き<br><div class="code-block">INSTALLED_APPS = [<br>    "django.contrib.admin",<br>    "django.contrib.auth",<br>    "django.contrib.contenttypes",<br>    "django.contrib.sessions",<br>    "django.contrib.messages",<br>    "django.contrib.staticfiles",<br>]</div><br>と記入してある場所を探し、<br><div class="code-block">INSTALLED_APPS = [<br>    "django.contrib.admin",<br>    "django.contrib.auth",<br>    "django.contrib.contenttypes",<br>    "django.contrib.sessions",<br>    "django.contrib.messages",<br>    "django.contrib.staticfiles",<br>    "追加したアプリケーション名",<br>]</div><br>となるように記入してください。<br><br>フォルダの中身は<br>migrationsフォルダ　モデルが変更された履歴などが保存されるフォルダ。<br>__init__.pyファイル　ディレクトリをパッケージとして認識させるために使用され、パッケージの初期化コードを含めることができます。<br>admin.py　Djangoのadminページに表示する内容の変更を行うためのファイル。<br>apps.py　アプリケーションの初期化や設定をカスタマイズするために使用されます。<br>models.py　モデル(データベースのテーブル)の定義に使用するファイル<br>tests.py　テストを記入するファイル。<br>view.py　フロントエンドに返すデータの整形などを行うファイル。<br>urls.py　ルーティング(受け取ったファイルをview.pyのどのクラスで処理させるのか)を行うファイル。<br><br>またurls.pyは初期ではフォルダ内にないですが、ルーティングをわかりやすくするためにできれば作成してください。<br>admin.py、model.py、view.py、urls.pyはよく触るファイルとなるので覚えておいてください。<br><br>Djangoでは、フロントエンドから要求を受けると要求に応じてurls.pyで使用するアプリケーション、view.pyのクラスの選定を行います。<br>その後view.pyの対象のクラスで処理が行われ、フロントエンドに返されるという流れになります。<br><br>その他、全体に適用させたい内容などがあるときは、プロジェクト作成時にできたフォルダ内にあるsetting.pyで読み込ませます。	5
115	2024-06-29 17:12:47	2024-06-29 17:16:43	1	4	繰り返し処理(while文)	0\n1\n2\n3\n4\n5\n6\n7\n8\n9	Python	value = 0\n\nwhile value < 10:\n    print(value)\n    value += 1	\N	\N	\N	\N	while文は条件に一致する間繰り返しよりを行う文です。<br><div class="code-block">while 条件:<br>   条件に一致する間行う処理</div><br>の形式で記入します。<br><br>最後に使用する変数の値の増減を忘れると無限ループしてしまうので気を付けてください。<br><div class="code-block">変数名 += 1</div><br>は変数の値を+1するという内容となっています。	10
118	2024-06-30 03:45:37	2024-06-30 12:08:46	4	10	仮想サーバーの立ち上げ	\N	\N	\N	\N	\N	\N	\N	<div class="code-block">python manage.py runserver</div>\\\\r\nとすることで仮想サーバーを作動させることができます。\\\\r\n\\\\r\n<a href="http://127.0.0.1:8000/">http://127.0.0.1:8000/</div>にアクセスして画面が表示されたら成功です。	4
120	2024-06-30 04:13:54	2024-06-30 12:08:46	4	10	urls.py	\N	\N	\N	\N	\N	\N	\N	urls.pyは、フロントから受け取った内容に応じてルーティング(どのアプリケーションのviews.py内のどのクラスで処理をおこなうのか)を選定するクラスとなっています。<br><br>プロジェクト作成時にできたフォルダのurls.pyを開くと、<br><div class="code-block">from django.contrib import admin<br>from django.urls import path<br><br>urlpatterns = [<br>    path("admin/", admin.site.urls),<br>]</div><br>となっていると思います。<br>これはルート(ローカル環境だとhttp://127.0.0.1:8000)/admin/にアクセスするとデータベースの管理者ページが開かれるという内容になっています。<br><br>新たにルーティングは、<br><div class="code-block">urlpatterns = [<br>    path("admin/", admin.site.urls),<br>    path('ルートからの相対パス',views.使用するviews内のクラス名.as_view(), name = 'テンプレートから呼び出すときの名称'),<br>]</div><br>の形式で追加することができます。<br>,区切りで何個でも追加することができるので大規模なアプリケーションでも対応可能となっています。<br><br>また、別ファイルのurls.pyを読み込むときは<br><div class="code-block">path('ルートからの相対パス/', include(('読み込むurls.pyのあるアプリケーション名.urls', '読み込み時の名称),namespace='読み込み時の名称')),</div><br><br>の形式で記入します。<br>例)<br>アプリケーション作成時にできたフォルダのurls.py<br><div class="code-block">from django.contrib import admin<br>from django.urls import path<br><br>urlpatterns = [<br>    path("admin/", admin.site.urls),<br>    path('test/', include(('test_application.urls', 'test_application'),namespace='test_application')),<br>]</div><br><br>作成したアプリケーションのurls.py(例では'test_applicationとしています。)<br><div class="code-block">from django.contrib import admin<br>from django.urls import path<br>from . import views<br><br>urlpatterns = [<br>    path('test_page',views.TestView.as_view(), name = 'test_view'),<br>]</div><br><br>このようにすると、ルート/test/test_pageにアクセスするとtest_applicationフォルダのviews.pyのTestViewクラスが動作します。(まだTestViewkクラスを作成していないため現状ではエラーが出ます。)<br><br>また、<br><div class="code-block">path('test_page/&lt;str:test_string&gt;/&lt;int:test_int&gt;/', views.TestView.as_view(), name='test_view'),</int:test_int></str:test_string></div><br>の形式で記入すると、test_page/test/1のようにアクセスするとTestViewクラスに対して変数test_stringとしてtestを、変数test_intとして1を渡すことができます。<br>str、intは型と呼ばれるもので、strは文字列、intは整数を指します。	6
121	2024-06-30 06:12:59	2024-06-30 13:58:18	4	10	views.py	\N	プロジェクト作成時にできたフォルダのurls.py	from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path("admin/", admin.site.urls),\n    path('test/', include(('test2.urls', 'test2'),namespace='test2')),\n]	作成したアプリケーション内のurls.py	from django.contrib import admin\nfrom django.urls importるー path\nfrom . import views\n\nurlpatterns = [\n    path('test_page',views.TestView.as_view(), name = 'test_view'),\n]	作成したアプリケーション内のviews.py	from django.shortcuts import render\nfrom django.views.generic import View\nfrom django.http import JsonResponse\n\nclass TestView(View):\n    def get(self, request):\n        return render(request, 'test.html')\n\n    def post(self, request):\n        return JsonResponse({'test': 'test_value'})	views.pyでは、フロントエンドに返す値の整形を行います。<br>上の例では、settings.pyのTEMPLATESの'DIRS'が[os.path.join(BASE_DIR, 'templates')]となっていれば、<br>ルート/test/test_pageにアクセス時にtemplatesフォルダのtest.htmlがブラウザに表示されるようになっています。<br><br>view.pyで作成するクラスはViewを継承させてください(ListViewなどを継承させても間接的に継承される)<br><br>urls.pyでルーティングされ、対象のクラスに処理が来ると、HTTPリクエストメソッド(getやpostなど)によって使用されるメソッドが切り替えられます。<br>getはデータをもらうだけの通常のアクセス<br>postはテンプレート側からもデータを渡す必要があるとき<br>putはデータベースなどのデータの更新時<br>deleteはデータベースなどのデータ削除時<br>に使用されるHTTPリクエストメソッドで、継承しているViewクラスにはget、post、put、deleteメソッドが用意されており、対象のメソッドをオーバーライド(クラス内で新たに定義して上書き)することで使用されます。<br>またそれらの第1引数はself(自クラスのこと)、第2引数はrequest(テンプレート側から渡されるデータ)としてください。<br><br>通常アクセス時にはgetメソッドが使用されます。<br><div class="code-block">return render(request,  'フロントエンドに返すテンプレート', フロントエンドに返したい変数などがあれば辞書型で)</div><br>とすることでブラウザには返されたHTMLファイルが表示されます。<br>render()の第3引数の辞書型はフロントエンドでキーを変数名として、値を使用することができます。<br>フロントエンドに変数を返す必要がないときはrender()の第3引数は未記入で問題ありません。<br>通常の画面表示のみの時はgetメソッドを記入するだけで問題ありません。<br><br>Ajaxなどで、テンプレート側からpostメソッドでデータを受け取ったときはpostメソッドが使用されます。<br><div class="code-block">JsonResponse({フロントエンドに返すデータを辞書型で記入})</div><br>と記入することで非同期通信を行うことができます。<br><br>postメソッドなどで画面を遷移させたいときは<br><div class="code-block">return redirect(移動したいページのurls.pyのname)</div><br>の形式で記入することで遷移させることができます。	7
123	2024-06-30 06:46:44	2024-06-30 12:08:46	4	10	models.py	\N	models.py	class Company(models.Model):\n    name = models.CharField(\n        verbose_name='会社名', max_length=20)\n    \nclass Person(models.Model):\n    name = models.CharField(\n        verbose_name='氏名', max_length=20)\n    age = models.PositiveIntegerField(\n        verbose_name='年齢', blank=True, default='')\n    birth = models.DateTimeField(\n        null=True, blank=True, verbose_name='誕生日', default=None)\n    company = models.ForeignKey(\n        Company, null=True, on_delete=models.CASCADE, related_name='person')	\N	\N	\N	\N	models.pyは、データベースにテーブルを作成したりするのに使用されます。<br><div class="code-block">class テーブル名(model.Model):<br>   定義するカラム名</div><br><br>の形式でテーブルを作成することができます。<br>models.CharFieldは文字列<br>models.PositiveIntegerFieldは正の整数<br>models.DateTimeFieldは日時<br>models.ForeignKeyは多側のテーブルからの他の1側のテーブルへのへのリレーション<br>となっています。<br>また、verbose_nameはadminページに表示されるときの列名となっています。<br><br>上の例では、Companyテーブルは<br>上限20文字の文字列のnameフィールド<br><br>Personテーブルは<br>上限20文字の文字列のフィールドnameフィールド<br>正の整数のageフィールド(未記入時は'')<br>日時型のbirthフィールド(未記入時はNone)<br>Companyテーブルへのリレーションのcompanyフィールド<br>となっています。<br><br>リレーションは<br>models.Foreigkeyは多対1の多側からのリレーション<br>models.OneToOneFieldは1対1でのリレーション<br>となっています。<br>また、1側から多側のデータを取得したいときなどはrelated_nameで指定されている文字列を使用してさかのぼります。<br><br>models.py内でクラスを定義後プロジェクトのルートディレクトリで、<br><div class="code-block">python manage.py makemigrations<br>python manage.py migrate</div><br>と入力することでテーブルが作成されます。<br>	8
127	2024-06-30 07:22:46	2024-06-30 12:08:46	4	10	マスターユーザーの作成	\N	\N	\N	\N	\N	\N	\N	プロジェクトのルートディレクトリで、<br><div class="code-block">python manage.py createsuperuser</div><br>と入力し、ユーザー名、パスワードを設定(メールアドレスは任意)を設定するとマスターユーザーが作成されます。<br>	9
128	2024-06-30 07:25:44	2024-06-30 12:08:46	4	10	admin.py	\N	admin.py	from django.contrib import admin\nfrom .models import *\n\nadmin.site.register(Company)\nadmin.site.register(Person)	\N	\N	\N	\N	admin.pyは、adminページで表示するテーブルの設定などを行うファイルです。<br><div class="code-block">admin.site.register(models.py内のクラス名)</div><br>と記入することでadminページに対象のテーブルが表示されるようになります。<br>上の例では、models.pyのCompanyクラスとPersonクラスをadminページに表示させています。<br><br>adminページはデフォルトのローカル環境なら<a href="http://127.0.0.1:8000/admin/">http://127.0.0.1:8002/admin/</a>にアクセスすることで開くことができます。<br><br>ファイルの先頭でmodels.pyの読み込み忘れには注意してください。<br>これで表示されない場合は、settings.pyでアプリケーションの追加をできていないかもしれないので確認してください。	10
129	2024-06-30 13:15:50	2024-06-30 13:53:00	4	10	テンプレート	test\ntest2	base.html	{% load static %}\n\n<!DOCTYPE html>\n<html lang="ja">\n    <head>\n        <title>{% block title %}{% endblock %}</title>\n　　　　　<link href="{% static 'css/styles.css' %}" rel="stylesheet" />\n    </head>\n\n    <body>\n        {% block body %}{% endblock %}\n        <script src="{% static 'js/scripts.js' %}"></script>\n    </body>\n</html>	test.html	{% extends 'base.html' %}\n\n{% block title %}test_title{% endblock %}\n\n{% block body %}\n<div>test</div>\n<div>test2</div>\n{% endblock %}	\N	\N	Djangoのテンプレートでは通常のHTMLの記述とは別にDjango独自のタグを使用することもできます。<br><br>上の例ではまず、土台となるテンプレートとしてbase.htmlを作成しています。<br>1行目の{% load static %}は、settings.pyで設定したstaticフォルダのファイルを読み込むという内容になっています。<br><br>settings.pyで<br><div class="code-block">STATIC_URL = "static/"</div><br>の部分を<br><div class="code-block">STATIC_URL = '/static/'<br>STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]</div><br>とすることでプロジェクト直下のstaticフォルダのファイルを読み込むことができるようになります。<br><br>staticフォルダのファイルは、<br><div class="code-block">&lt;&lt;link href="{% static 'staticフォルダからのパス' %}" rel="stylesheet"&gt;<br>&lt;script src="{% static 'staticフォルダからのパス' %}"&gt;&lt;/script&gt;</div><br>のような形式で読み込むことができます。<br><br>上の例では、static/css/styles.cssとstatic/js/scripts.jsの2つのファイルを読み込んでいる例です。<br><br>特定の場所に別ファイルのHTMLなどを埋め込みたいときは土台側のHTMLファイルに、<br><div class="code-block">{% block ブロック名 %}{% endblock %}</div><br>と記入し、埋め込む側のHTMLには、先頭に<br><div class="code-block">{% extends '土台側のHTMLのファイル名' %}</div><br>と記入して土台側のHTMLを読み込ませ、<br>埋め込みたい場所は<br><div class="code-block">{% block ブロック名 %}埋め込み内容{% endblock %}</div><br>とすることで土台側の同じブロック名の場所に埋め込まれます。<br><br>また、<br><div class="code-block">{% url 'urls.pyで定義しているname' %}</div><br>の形式で記入することで、urls.pyの一致するnameのURLを埋め込むことができます。<br><br>Djangoのテンプレートでは、views.pyから受け取った変数等を利用して、if文、for文を記入することができます。<br><div class="code-block">{% if  条件 %}<br>    条件に一致したときの処理<br>{% elif 条件2 %}<br>    条件2に一致したときの処理<br>{% else %}<br>    条件に一致しなかったときの処理<br>{% endif %}</div><br>の形式でif文、<br><div class="code-block">{% for 代入する変数 in views.pyから受け取った変数 %}<br>    繰り返し時の処理<br>{% endfor %}</div><br>の形式でfor文を記入することができます。<br><br>また、フォームやAjaxなどでサーバーサイドにデータを送るときはフォーム内やAjax内に<br><div class="code-block">{% csrf_token %}</div><br>を記入することでなりすましを防ぐことができます。<br><br>その他にも様々なタグがあるので興味のある方は調べてみてください。	11
140	2024-06-30 16:56:23	2024-06-30 17:01:08	4	13	データの並び替え	\N	views.py	model = Company.objects.all().order_by('-pk')	\N	\N	\N	\N	<div class="code-block">モデル.objects.all()もしくはfilter(条件).order_by('並べ替えに使用するフィールド')</div><br>の形式で記入することで並べ替えに使用するフィールドの昇順に並べ変わります。<br><br>また、-並べ替えるフィールドとすることで、降順に並べ替えることができます。<br><br>上の例では、pkが降順になるように並べ替えています。	10
130	2024-06-30 14:05:24	2024-06-30 17:13:09	4	13	ORMとは	\N	\N	\N	\N	\N	\N	\N	ORMとは、DjangoのModelsのメソッドを使用してSQL(データベースで処理を行う言語)を発行する機能です。<br>通常のSQLより簡単に記述することができますが、SQを直接記入するのに比べて処理速度は低下します。<br><br>ORMのコードはviews.pyのgetメソッドやpostメソッドなどに記入することで対象のアクセスが行われたときに実行されます。<br>また、views.py内で使用するモデルのインポートを忘れないようにしてください。<br>インポート例)<br><div class="code-block">from .models import Company, Person</div><br>上の例では、同じフォルダにあるmodels.pyのCompany, Personモデルを読み込んでいます。	1
131	2024-06-30 14:15:37	2024-06-30 14:16:35	4	13	データの作成	\N	views.py	Company(name='test').save()	\N	\N	\N	\N	<div class="code-block">models.py内のモデル名(フィールド名=値).save()</div><br>の形式で新しくデータを作成することができます。<br>保存するフィールドが複数あるときは,区切りで複数記入することができます。<br>上の例はnameフィールドの値をtestとしてCompanyモデルにデータを追加しています。<br><br>リレーションのフィールドで紐づいたモデルを保存したいときは、<br><div class="code-block">フィールド名_id = 対象のリレーションのpk</div><br>の形式で記入してください。<br>また、<div class="code-block">フィールド名 = 変数等に代入した対象のリレーションのモデル</div><br>の形式でも可能となっています。	2
132	2024-06-30 14:18:47	2024-06-30 16:12:45	4	13	モデルからデータの取得(1つのみ)	\N	views.py	model = Company.objects.get(pk=1)\n\nprint(model.name)	\N	\N	\N	\N	<div class="code-block">モデル名.objects.get(取得するモデルの条件)</div><br>の形式で対象のモデルからデータを取得することができます。<br><br>上の例では、Companyモデルのpkが1のデータを取得しています。<br>getメソッドでは、条件に一致するデータが複数ある、データがないときはエラーとなります。<br><br>データにアクセスするときは<br><div class="code-block">モデルを代入した変数.フィールド名</div><br>の形式でアクセスすることができます。	3
134	2024-06-30 15:55:25	2024-06-30 16:39:54	4	13	モデルからデータの取得(複数)	\N	views.py	model = Company.objects.filter(name='test');\n\nprint(model[0].name)	\N	\N	\N	\N	<div class="code-block">モデル.objects.filter(条件)</div><br>の形式で記入することで、条件に一致するモデルを取得します。<br>上の例ではCompanyモデルのnameがtestのデータを全て取得しています。<br><br>また、条件を以上、以下などとしたいときは条件を<br>大きい フィールド名gt=比べる値<br>以上 フィールド名gte=比べる値<br>以下 フィールド名lte=比べる値<br>未満 フィールド名lt=比べる値<br>と記入してください。<br><br>部分的に一致したいデータを取得したいときは、<br>対象の値を含む フィールド__contains=値<br>対象の値を含む(大文字、小文字の区別なし) フィールド__icontains=値<br>大文字、小文字を区別しない完全一致 フィールド__icontains=値<br>と記入してください。<br><br>また、条件は,区切りで増やすことができ、すべての条件に一致するモデルのみ取得されます。<br><br>取得したモデルはリスト形式となっているため、データにアクセスするときは<br><div class="code-block">モデルを代入した変数[インデックス].フィールド名<br>の形式で記入します。</div><br>	4
135	2024-06-30 16:03:25	2024-06-30 18:44:49	4	13	データの取得(全件)	\N	views.py	model = Company.objects.all();\n\nprint(model[0].name)	\N	\N	\N	\N	<div class="code-block">モデル.objects.all()</div><br>の形式で記入することで、対象のモデルのデータを全権取得することができます。<br><br>上の例ではCompanyモデルのデータを全権取得しています。<br><br>取得したモデルはリスト形式となっているため、データにアクセスするときは、<br><div class="code-block">モデルを代入した変数[インデックス].フィールド名</div><br>の形式で記入します。	5
136	2024-06-30 16:15:43	2024-06-30 17:00:24	4	13	データを値にして取得する	\N	views.py	model = Company.objects.all().values();	\N	\N	\N	\N	<div class="code-block">モデル.objects.all()もしくはfilter(条件).values()</div><br>の形式で記入することで、モデルのデータを辞書型にして取得することができます。<br>データはリストの中に{フィールド名: 値}の形式で取得されます。<br><br>また、データは&lt;QuerySet [{'id': 1, 'name': 'test'}]&gt;のような形式でQuerySetというものがついているのでフロントエンドにこのデータを返したいときは<br><div class="code-block">list(データを格納した変数)</div><br>の形式で通常のリストに変換します。<br><br>単一のモデルを取得したモデルのデータとして取得したいときは、<br><div class="code-block">モデル.objects.values().get(条件)</div><br>の形式で記入します。<br>values()が末尾ではなくなるため注意してください。	6
137	2024-06-30 16:31:17	2024-06-30 16:35:59	4	13	データの取得(除外)	\N	views.py	model = Company.objects.all().exclude(pk=1);	\N	\N	\N	\N	<div class="code-block">モデル.objects.all()もしくはfilter(条件).exclude(除外する条件)</div><br>の形式で記入することで、取得したモデルからexcludeで指定した条件に一致するモデルを除外することができます。<br><br>上の例ではCompanyモデルをpkが1のもの以外を取得しています。	7
138	2024-06-30 16:43:15	2024-06-30 17:02:19	4	13	データの更新	\N	views.py	model = Company.objects.get(pk=1)\nmodel.name = 'test2'\nmodel.save()	\N	\N	\N	\N	<div class="code-block">モデルを代入した変数.フィールド名 = 変更後の値<br>model.save()</div><br>の形式で対象のフィールドの値を変更することができます。<br><br>filterやallメソッドで取得した複数のデータをまとめて書き換えたいときは、<br><div class="code-block">モデル名.objects.all()もしくはfilter(条件).update(変更するフィールド=変更後の値)</div><br>の形式で記入してください。<br><br>上の例では、pkが1のデータのnameをtest2に変更しています。	8
139	2024-06-30 16:50:20	2024-06-30 17:01:40	4	13	データの削除	\N	views.py	model = Company.objects.filter(name='test')\nmodel.delete()	\N	\N	\N	\N	<div class="code-block">モデルを代入した変数.delete()</div><br>と記入することで、対象のモデルのデータを削除することができます。<br><br>deleteメソッドは、1件時(get()での取得)でも複数件時(all()、filter()での取得)でも使用することができます。<br><br>また、変数に代入せずに末尾に.delete()をつけて直接消しても問題はないです。<br><br>上の例ではnameがtestのデータを全て削除しています。	9
141	2024-06-30 17:04:43	2024-06-30 17:10:49	4	13	対象のデータがあるか調べる	\N	views.py	age = 30\n\nif Person.objects.filter(age__gte=age).exists():\n    print(str(age) + "歳以上の人が存在します。")\nelse:\n    print(str(age) + "歳以上の人は存在しません。")	\N	\N	\N	\N	<div class="code-block">モデル.objects.all()もしくはfilter(条件).exists()</div><br>とすることで対象のモデルがあるかどうかを判別することができます。<br><br>対象のモデルがあればTrue、対象のモデルがなければFalseとなるため、if文と合わせて使用することができます。<br><br>上の例では、Personモデルのageが30以上のモデルがあるかどうかを判別しています。	11
143	2024-06-30 17:53:24	2024-06-30 18:07:02	4	13	リレーションされているモデルのデータを取得する(1側から多側)	\N	views.py	model = Company.objects.prefetch_related('person').get(pk=1)\n\nfor person in model.person.all():\n   print(person.name)	\N	\N	\N	\N	<div class="code-block">1側のモデル.objects.select_related('リレーションのフィールド名').get(条件)やfilter(条件)やall()など</div><br><br>先ほどのselect_relatedの場合は、多側からだったので、自身が決まれば紐づいているモデルが確定したのに対して、prefetch_relatedは、1側からなので、自身が決まっても、自身に紐づいているモデルが複数あるという状態になります。<br>Company(1)に対してPerson(多)がある場合1つのCompanyに紐づいているPersonは複数あるという関係です。<br><br>このように紐づいたモデルが複数あるときは、それらがリスト形式で紐づきます。<br>なので、アクセスするにはselect_relatedとは違い、for文で繰り返し処理をするかインデックスを指定してアクセスすることになります。	13
144	2024-06-30 18:08:42	2024-06-30 18:14:04	4	13	filter内での条件をor形式にする	\N	views.py	from django.db.models import Q\n\nmodel = Company.objects.filter(Q(name='test') | Q(name='test2'))	\N	\N	\N	\N	filterメソッド内を、<br><div class="code-block">Q(条件) | Q(条件)</div><br>の形式にすることで、どちらかに一致しているデータを取得することができます。<br>Qオブジェクトを使用すると、&もしくは|でさらに条件を増やすこともできるので柔軟なフィルタリングを行うことができます。<br><br>上の例では、Companyモデルのnameフィールドがtestもしくはtest2のデータを取得しています。<br>	14
142	2024-06-30 17:16:13	2024-06-30 17:57:28	4	13	リレーションされているモデルのデータを取得する(多側から1側)	\N	views.py	model = Person.objects.select_related('company').all().values('company__name')	\N	\N	\N	\N	<div class="code-block">多側のモデル.objects.select_related('1側のモデルのrelated_name').get(条件)やfilter(条件)やall()など.values('1側のモデルのrelated_name__1側のフィールド名')</div><br>とすることで多側からの紐づいた1側のモデルのデータを取得することができます。<br>本来、値取得のたびに取得するモデルのsqlの発行がされるのですが、select_relatedを使用すると、多側のモデル取得時に1側のモデルのデータも同時に取得するため、複数回sqlが発行されることを防ぐことができます。<br>次に紹介するprefetch_relatedも同じような理由で使用されます。<br>これらは、for文でデータを繰り返し処理するときなどに顕著に表れます。<br>このように必要以上にsqlが発行されパフォーマンスが悪くなる問題をN+1問題といいます。<br><br>多対1の関係というのは、<br>会社(1)に対して人(多)が存在するという関係のことを言います。<br>なので、人側から見ると会社は1個に特定されるので、紐づいたモデルは1つとなる関係です。<br><br>上の例では、Personモデルと紐づいたCompanyモデルのnameフィールドの値を取得しています。<br><br>また、1件のみデータを取得したいときなどは<br><div class="code-block">Person.objects.select_related('company').all()<br>test[0].company.name</div><br>このような形式でも紐づいているモデルにアクセスすることができます。	12
146	2024-06-30 18:21:10	2024-08-16 14:44:40	4	13	フィルタリングしたリレーションのデータを取得する	\N	views.py	from django.db.models import Prefetch\n\nperson_prefetch = Prefetch('person', queryset=Person.objects.filter(name='test'))\ncompany = Company.objects.prefetch_related(person_prefetch).get(pk=1)\n\nfor person in company.person.all():\n   print(person.name)	\N	\N	\N	\N	Prefetchを使用すると、prefetch_relatedで取得するモデルに対してフィルタリングを行うことができます。<br><div class="code-block">変数名 = Prefetch('リレーションのフィールド名', queryset=多側のモデルでのORM)</div><br>の形式で記入し、定義した変数をprefetch_related()の引数にすることでフィルタリングされたリレーションのデータのみを取得することができます。<br><br>Prefetchは第1引数は、リレーションのフィールド名、querysetは多側のモデルをどのようにするかを記入してください。<br>filterだけではなく、order_byで並べ替えたりexcludeで除外したりすることもできます。<br><br>上の例では、Companyモデルのpkが1のモデルに紐づいたPersonの中でnameフィールドがtestのデータだけを取得しています。	16
147	2024-06-30 18:33:11	2024-06-30 18:45:37	4	13	特定の計算などをしたフィールドを追加して取得する	\N	views.py	model = Person.objects.all().annotate(\n    next_age=F('age') + 1\n).values()	\N	\N	\N	\N	<div class="code-block">annotate(追加するフィールド名)=追加するデータ)</div><br>の形式で記入することで、特定のフィールドを追加することができます。<br><br>annotateを使用しても取得したデータに対してフィールドを追加するだけなので元のモデルにフィールドが増えるわけではありません。<br><br>上の例では、Personモデルにannotateでnext_ageフィールドにageフィールドの値+1した値を追加しています。	17
145	2024-06-30 18:15:54	2024-06-30 18:19:17	4	13	特定のフィールドの値を使用して演算する	\N	views.py	update_model = Sales.objects.update(sale = F('sale')*1.1)	\N	\N	\N	\N	<div class="code-block">F('フィールド名')計算式</div><br>の形式で記入することで、フィールド名の値に対して計算を行うことができます。<br><br>上の例は、Salesモデルのsaleフィールドを全て1.1倍した値にして更新しています。	15
148	2024-06-30 18:46:55	2024-06-30 18:50:34	4	13	追加したフィールドに値を代入する	\N	views.py	from django.db.models import Value\n\nmodel = Person.objects.all().annotate(\n    test = Value(1)\n).values()\n\nprint(model)	\N	\N	\N	\N	<div class="code-block">Value(値)</div><br>とすると値を代入することができます。<br>ORMではannotateで作成したフィールドに直接値を代入しようとするとエラーとなるので、Valueオブジェクトを使用してください。<br><br>上の例では、testフィールドに1を代入しています。	18
149	2024-06-30 18:52:08	2024-06-30 18:55:25	4	13	カウントした数を代入する	\N	views.py	from django.db.models import Count\n\nmodel = Company.objects.all().annotate(\n    persons=Count('person')\n).values()\n\nprint(model)	\N	\N	\N	\N	<div class="code-block">Count(数えたいフィールド)</div><br>の形式で記入することで、紐づいたモデルの数を数えたりすることができます。<br><br>上の例は、自身に紐づいたPersonモデルの数量をpersonsフィールドに代入しています。	19
150	2024-06-30 18:57:00	2024-06-30 19:01:09	4	13	紐づいたモデルの合計値を取得する	\N	views.py	from django.db.models import Sum\n\nmodel = Person.objects.all().annotate(\n    sale =Sum('sales__sale')\n).values()\n\nprint(model)	\N	\N	\N	\N	<div class="code-block">Sum('合計したいフィールド')</div><br>の形式で記入することで、紐づいたモデルの対象のフィールドの合計値を取得することができます。<br><br>上の例は、自身に紐づいたSalesモデルのsaleフィールドの値を合計してsaleフィールドに代入しています。	20
151	2024-06-30 19:04:07	2024-06-30 19:16:57	4	13	自身を呼び出しているモデルのデータを使ってフィルタリングする	\N	views.py	from django.db.models import Subquery, OuterRef\n\nlast_sales_date = Sales.objects.filter(\n    name=OuterRef('pk')\n   ).order_by('-date').values('date')[:1]\n\nmodel = Person.objects.annotate(\n    last_sale_date=Subquery(last_sales_date))\n\nprint(model.values('name', 'last_sale_date'))	\N	\N	\N	\N	SubqueryとOuterRefを使用することによって、自身を呼び出しているデータを使用してフィルタリングし、そのデータをannotateで追加することができます。<br><br>Subqueryは複数データがある状態が返ってくるとエラーになるので返ってくるデータが1つになるようにしてください。<br><br>上の例は、OuterRefを使用して、自身を呼び出しているモデル(Person)のpkを使用してフィルタリングしています。<br>last_sales_dateはnameフィールドが自身を呼び出しているモデルのpkのデータを取得し、それをdateで降順にし、最初の1件目を取得しています。<br><br>Subqueryはannotateにほかのモデルのデータを埋め込むのに使用され、ここでは、変数last_sales_dateで処理された結果がlast_sale_dateフィールドに代入されています。<br><br>上の例では、PersonモデルごとのSalesモデルのsaleが最新のもの(最終売上日)をlast_sale_dateフィールドに代入している例となります。	21
152	2024-06-30 19:19:43	2024-06-30 19:26:31	4	13	ORM内での条件分岐	\N	views.py	sales_exists = Sales.objects.filter(name=OuterRef('pk'))\n\nperson_model = Person.objects.annotate(\n    has_sales=Case(\n        When(Exists(sales_exists), then=Value('売り上げあり')),\n        default=Value('売り上げなし'),\n    )\n)\n\nprint(person_model.values('name', 'has_sales'))	\N	\N	\N	\N	<div class="code-block">Case(<br>   When(条件, then=条件に一致したときの値),<br>   default=条件に一致しなかったときの値,<br>)</div><br>の形式で記入することでORM内で条件分岐を行うことができます。<br><br>When(条件, then=条件に一致したときの値)は,区切りで追加することもできます。<br><br>上の例では、自身に紐づいたSalesが1つでもあれば売り上げあり、なければ売り上げなしがhas_salesフィールドに代入されています。<br>	22
153	2024-06-30 19:27:58	2024-06-30 19:35:01	4	13	データがないときはデフォルト値を代入する	\N	views.py	from django.db.models.functions import Coalesce\nfrom django.utils import timezone\n\nmodel=Sales.objects.annotate(test=Coalesce('date', timezone.now()))\nprint(model.values('test'))	\N	\N	\N	\N	<div class="code-block">Coalesce(データがあるときの値, データがないときの値)</div><br>の形式で記入することで、データがないときのデフォルトの値を設定することができます。<br><br>上の例では、testフォール度に、dateフィールドがあればdateを、なければ今の日時を代入しています。	23
154	2024-06-30 19:37:16	2024-06-30 19:42:09	4	13	年、月、日ごとに集計する	\N	views.py	from django.db.models import Sum\nfrom django.db.models.functions import TruncMonth\n\nmonth_sales = Person.objects.annotate(\n    month=TruncMonth('sales__date')).annotate(total_sales=Sum('sales__sale')\n).values('month', 'name','total_sales').order_by('month')\n\nprint(month_sales)	\N	\N	\N	\N	TruncManthを使用することでデータを月毎にまとめることができます。<br>annotateでPersonモデルのmonthフィールドにsales__dateを月でまとめたもの(1日から31日までのデータが当月の1日としてまとめられる)を、total_salesには月でまとめたもののsaleの合計が代入されます。<br><br>TruncYearにすると年ごと、<br>TruncWeekにすると週ごと、<br>TruncDayにすると日ごと、<br>TruncHourにすると1時間ごと<br>にすることもできます。	24
155	2024-07-01 04:13:33	2024-07-11 12:42:22	1	3	オブジェクト	\N	Javascript	let user = {\n      name: 'tarou',\n      age: 30,\n   }\n\n   console.log(user.name);\n   console.log(user.age);\n\nlet users = [{\n      name: 'tarou',\n      age: 30,\n   },{\n      name: 'hanako',\n      age: 20,\n   }]\n\n   console.log(users[0].name);	\N	\N	\N	\N	オブジェクトとは、Pythonの辞書型のようなもので、キーと値を設定し、キーを使用して値にアクセスできる機能です。<br><div class="code-block">変数名 = {<br>   キー名: 値,<br>}</div><br>の形式で定義することができ,区切りでキーと値を追加することができます。<br><br>アクセス時は、<br><div class="code-block">オブジェクトを代入した変数.キー</div><br>の形式でアクセスすることができます。<br><br>また、変数と同名のプロパティの時は、キーを省略して記入することができ、<br><div class="code-block">const test = 'test';<br>const test2 = 'test2';<br><br>const dict = {test, test2};</div><br>と記入すると、dictは{test: test, test2: test2}と同じ内容となります。<br><br>オブジェクトには、関数も代入することが可能となっており、<br><div class="code-block">const dict = {<br>    test: 'test',<br>    testFunc(){<br>        console.log(this.test)<br>    }<br>}<br><br>dict.testFunc();</div><br>のように記入します。<br>呼び出し時はプロパティ時と同じくオブジェクトを代入した変数.オブジェクト内の関数()の形式で呼び出します。<br>また、thisを使用することで、オブジェクト自身のほかのプロパティを使用することもできます。	14
156	2024-07-01 04:24:37	2024-07-01 04:30:55	1	3	配列	\N	Javascript	let test_array = [1, 2, 3, 'test'];\n    console.log(test_array);\n    console.log(test_array[0])	\N	\N	\N	\N	配列は、一つの変数に複数の値を代入時などに使用されます。<br><div class="code-block">配列を代入する変数 = [値]</div><br>の形式で定義することができ,区切りで値を追加することができます。<br><br>配列は先頭を0としてインデックスという値がふられ、<br><div class="code-block">配列を代入した変数[インデックス]</div><br>の形式でアクセスすることができます。<br><br>また、配列には異なる型(数字と文字など)を混ぜて代入することができます。	13
157	2024-07-01 05:56:58	2024-07-01 06:06:07	1	3	繰り返し処理(while文)	\N	Javascript	let count = 0;\nwhile(count <= 10) {\n    console.log(count);\n    count++;\n}	\N	\N	\N	\N	while文は、条件を満たしている間繰り返し処理を行う文となっています。<br><br>while文は、<br><div class="code-block">while(条件){<br>    条件に一致する間行う処理<br>}</div><br>の形式で記入します。<br><br>上の例では、変数countが10以下の間繰り返し処理を行っています。<br>最後のcount ++;はcount = count +1;と同じ意味となります。<br>変数++などで変数の値を変化させないと繰り返し条件を満たし続けることとなり無限ループしてしまうので注意してください。	15
158	2024-07-01 06:09:16	2024-07-01 06:13:55	1	3	繰り返し処理(最低1回は実行する)	\N	Javascript	let count = 11;\ndo {\n    console.log(count);\n    count++;\n} while(count <= 10);	\N	\N	\N	\N	do-while文を使用することで、最初から条件を満たしていないときでも最低1回は実行させることができます。<br><br>do-while文は<br><div class="code-block">do{<br>   条件を満たす間繰り返す処理(最初から条件を満たさないときは1回実行される)<br>}while(条件)</div><br>の形式で記入します。<br><br>上の例では、変数countの値が11となっており、最初から条件が満たされていませんが1回だけ実行されています。	16
160	2024-07-03 19:29:01	2024-08-06 01:12:50	4	6	Laravel基本構造	\N	\N	\N	\N	\N	\N	\N	LaravelはPHPのフレームワークで、サーバーサイドで使用されています。<br><br>Laravelをインストールすると様々なフォルダが作成されますが、よく使用するフォルダ、ファイルは以下のものとなります。<br><br><h2>.env</h2><br>アプリケーションの基本的な設定を行うファイル<br><br><h2>routes/web.php</h2><br>ルーティング(アクセスされたURLによっての使用するクラス、メソッドの選択)を行うファイル<br><br><h2>app/Http/Controllers</h2><br>ルーティングで使用するファイルが入るフォルダ<br><br><h2>app/Providers</h2><br>すべてのページに共通する処理などを記入するファイルが入るフォルダ<br><br><h2>app/Models</h2><br>モデル(データベースのテーブル)のバリデーションやORMでの紐づきなどを記入したファイルが入るフォルダ<br><br><h2>database/migrations</h2><br>モデルの作成などに使用し、フォルダ内にはモデルの作成、変更履歴のファイルが入るフォルダ<br><br><h2>resouces/views</h2><br>画面に表示するためのテンプレートとなるファイルを入れるフォルダ<br><br><h2>public</h2><br>テンプレートで使用したいファイルを入れるフォルダ	2
161	2024-07-03 19:59:33	2024-07-04 09:13:04	4	6	web.php	\N	\N	\N	\N	\N	\N	\N	routes/web.phpは、ルーティング(アクセスされたページに対してどのクラス、メソッドを使用するのか)を設定するファイルとなっています。<br><br>まずファイルの先頭で<br><div class="code-block">use App\\\\\\\\Http\\\\\\\\Controllers\\\\\\\\使用するコントローラーのクラス</div><br>の形式で使用するコントローラーを読み込みます。<br><br>特にデータベースからデータを取得する必要がないときなどは、以下のように記入します。<br><div class="code-block">Route::get('/アクセスされるURL, function(){ return view('使用するテンプレート'); })-&gt;name('テンプレートから呼び出すときの名前');</div><br>nameは一意にする必要があるのでアプリケーション内で重複がないようにしてください。<br><br>例えば、<br><div class="code-block">Route::get('/test', function(){ return view('test_template'); })-&gt;name('test_name');</div><br>とすると、ルート/testにアクセスするとresources/views/test.blade.phpが開かれます。<br><br>テンプレートでデータベースからの値を取得するなど、何かしらの処理をする必要があるときは、<br><div class="code-block">Route::get('/アクセスされるURL}', [使用するクラス:class, '使用するメソッド'])-&gt;name('テンプレートから呼び出すときの名前');</div><br>例えば、<br><div class="code-block">Route::get('/test', [TestController::class, 'get'])-&gt;name('test.get');</div><br>のとすると、ルート/testにアクセスするとapp/Http/Controllers/TestController.phpのTestControllerクラスのgetメソッドが使用されます。<br><br>また、アクセスされたURLのデータを使用されるクラスに変数として渡すこともできます。<br><div class="code-block">Route::get('/test'/{test_data}, [TestController::class, 'get'])-&gt;name('test.get');</div><br>のようにすると、ルート/test/test_valueにアクセスすると、TestControllerのgetメソッドでは変数test_dataとしてtest_valueの値を使用することができます。<br><br>HTTPリクエストメソッド(getやpost)によって使用するクラスを変更することもでき、その時は<br><div class="code-block">Route::get</div><br>のgetの部分がHTTPリクエストメソッドとなっているので書き換えてください。<br><div class="code-block">Route::post('/test', [TestController::class, 'post'])-&gt;name('test.post');</div><br>このように記入すると、ルート/testにpostメソッドでアクセスするとapp/Http/Controllers/TestController.phpのTestControllerクラスのpostメソッドが使用されます。<br><br>また、テンプレート側でnameを使用して呼び出すときは<br><div class="code-block">&lt;a href="{{ route('呼び出したいURLのname') }}"&gt;テキスト&lt;/a&gt;</div><br>の形式で記入してください。<br>	4
162	2024-07-04 08:17:04	2024-08-06 01:40:20	4	6	コントローラー	\N	\N	\N	\N	\N	\N	\N	コントローラーは、web.phpでアクセスされたURLごとに振り分けを行い、それに対して処理を行う部分となっています。<br><br>コントローラーは、コマンドプロンプトでアプリケーションのルートディレクトリに移動し、<br><div class="code-block">php artisan make:controller コントローラーのクラス名</div><br>の形式で記入すると作成することができます。<br>このコマンドを実行すると、app/Http/Controllersフォルダに記入したクラス名.phpファイルが作成されます。<br>また、app/Http/Controllersの中でさらにフォルダを指定したい場合はコントローラーのクラス名の部分をフォルダ名/クラス名の形式にします。<br><br>コントローラーは<br><div class="code-block">class コントローラーのクラス名 extends Controller<br>{<br>    public function メソッド名(Request $request){<br>        行う処理<br>    }<br>}</div><br>の形式で記入します。<br><br>例えば<br><div class="code-block">public function get()<br>    {<br>        $data = [<br>            'data1' =&gt; 'test',<br>            'data2' =&gt; 'test2',<br>        ];<br>        return view('test', compact('data'));<br>    }</div><br>のように記入すると、getメソッドはtest.blade.phpに変数dataを渡します。<br>testの部分はテンプレートのファイル名から拡張子を外したものにしてください。<br>テンプレートファイルがviewsフォルダの中にさらにフォルダがあり、その中に配置されている場合は、フォルダ名.ファイル名から拡張子を外したものの形式にしてください。<br><br>テンプレート側では、<br><div class="code-block">{{ $data['data1'] }}</div><br>のように記入することで変数の内容を表示させることができます。<br><br>また、テンプレート側でリスト形式などで受け取っている場合は<br><div class="code-block">@foreach($data as $value)<br>    &lt;div&gt;{{ $value }}&lt;/div&gt;<br>@endforeach</div><br>のように記入すると、変数に対しての繰り返し処理を行うことができます。<br>上の例では変数$dataを$valueに代入して繰り返し処理を行っています。	5
163	2024-07-04 13:36:45	2024-07-04 18:50:08	4	6	テーブルの作成、編集	\N	\N	\N	\N	\N	\N	\N	データベースに新たにテーブルを作成したり、編集したりするときは、コマンドプロンプトでアプリケーションのルートディレクトリに移動し、<br><div class="code-block">php artisan make:model 作成するテーブル名 -m</div><br>の形式で記入すると、app/Models内に作成したテーブル名のファイル、database/migrationsフォルダの中に新たにファイルが作成されます。<br><br><br>database/migrationsフォルダの中に作成されたファイルはテーブルの列を定義したりするのに使用します。<br>upメソッドは、作成、または列を増やす操作、downメソッドには、テーブル削除時の操作を記入します。<br><div class="code-block">return new class extends Migration<br>{<br>    public function up(): void<br>    {<br>        Schema::create('employees', function (Blueprint $table) {<br>            $table-&gt;id();<br>            $table-&gt;string('name');<br>            $table-&gt;text('address');<br>            $table-&gt;string('phone');<br>            $table-&gt;date('birth_date');<br>            $table-&gt;foreignId('depertment_id')-&gt;nullable()-&gt;constrained('depertments')-&gt;onDelete('set null');<br>            $table-&gt;timestamps();<br>        });<br>    }<br><br>    public function down(): void<br>    {<br>        Schema::dropIfExists('employees');<br>    }<br>};</div><br>このように記入すると、Employeeテーブルは、重複のないid、作成日時、文字列のname、phone、テキスト形式のaddress、日付形式のbirth_day、外部参照のdepartment_idの列が作成されます。<br><br>外部参照とは、depertmentテーブルのidを使用してdepertmentテーブルのデータを取得できるようにするための紐づけのことを言います。<br>また、<br>onDelete('set null')の部分は、紐づいているdepartmentが削除されたときにどうするのかという内容となっています。<br>onDelete('set null')とするとdepartment削除時に参照しているemployeeのdepartmentはnullに書き換わります。<br>onDelete('cascade')とするとdepartment削除時に参照しているemployeeはすべて削除されます。<br><br>またこのDepartment(部署)とEmployee(社員)の関係は1つの部署に複数の社員がいるという1対多の関係となっています。<br><br><div class="code-block">$table->フィールド-&gt;nullable()</div><br>とすることで、nullを許容するようにすることができます。	6
159	2024-07-01 06:16:45	2024-07-01 06:27:57	1	3	繰り返し処理(for文)	\N	Javascript	for(let i=0; i<=10; i++){\n    console.log(i);\n}	\N	\N	\N	\N	for文は、繰り返し処理に使用される文となっています。<br>for文は、<br><div class="code-block">for(変数の定義; 条件; 処理が1回完了するごとの値の変化){<br>   繰り返しを行う処理<br>}</div><br>の形式で記入します。<br><br>for文は他の配列やオブジェクトに対しても繰り返し処理を行うことができ、<br><div class="code-block">let obj = {a: 1, b:2};<br>for(let i in obj){<br>    console.log(i);<br>    console.log(obj[i])<br>}</div><br>のように記入すると、objのキーの値がiに代入されます。<br>配列に対してfor文を行った場合は繰り返し時に値が直接代入されます。<br>	17
164	2024-07-04 18:58:24	2024-07-04 19:07:51	4	6	ORMでのリレーションを設定する	\N	\N	\N	\N	\N	\N	\N	ORMで作成したテーブルと紐づいたテーブルのデータを取得するようにするためには、app/Modelsフォルダにある対象のモデル名のファイルで設定する必要があります。<br>対象のモデル名のファイルがない場合は、コマンドプロンプトでアプリケーションのルートに移動して<br><div class="code-block">php artisan make:model テーブル名</div><br>と入力することで作成することができます。<br><br>下の例ではDepartment(部署)1に対してEmployee(社員)多の1対多でのリレーションで設定していきます。<br>まず紐づけるテーブル名のメソッドを作成し、Depertment側では以下のようになるようにします。<br><div class="code-block">class Depertment extends Model<br>{<br>    use HasFactory;<br><br>    public function employee(){<br>        return $this->hasMany(Employee::class);<br>    }<br>}</div><br><br>$this->hasMany(Employee::class)の部分で自クラス1に対してEmployeeが多側であるという設定をしています。<br><br>Employee側では、<br><div class="code-block">class Employee extends Model<br>{<br>    use HasFactory;<br><br>    public function department(){<br>        return $this->belongsTo(Department::class);<br>    }<br>}</div><br>と記入し、自クラス多に対して1のDepartmentがあるという設定をしています。	7
165	2024-07-05 06:24:08	2024-07-05 06:42:54	4	14	モーダルの表示	\N	HTML	<!DOCTYPE html>\n<html lang="ja">\n    <head>\n        <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css" integrity="sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO" crossorigin="anonymous">\n        <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.4.2/css/all.css" integrity="sha384-/rXc/GQVaYpyDdyxK+ecHPVYJSN9bmVFBvjA/9eOB+pb3F2w2N6fc5qB9Ew5yIns" crossorigin="anonymous">\n    </head>\n    </head>\n\n    <body>\n        <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#testModal">モーダル表示</button>\n\n        <div class="modal fade" id="testModal" tabindex="-1" role="dialog" aria-labelledby="testModalLabel" aria-hidden="true">\n            <div class="modal-dialog" role="document">\n                <div class="modal-content">\n                    <div class="modal-header">\n                        <h5 class="modal-title" id="testModalLabel">タイトル</h5>\n                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">\n                            <span aria-hidden="true">×</span>\n                        </button>\n                    </div>\n                    <div class="modal-body">\n                        <form id="testForm">\n                            <label for="testName">氏名</label>\n                            <input type="text" class="form-control" id="testName" name="name" required>\n                        </form>\n                    </div>\n\n                    <div class="modal-footer">\n                        <button type="submit" class="btn btn-primary">登録</button>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>\n        <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js" integrity="sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49" crossorigin="anonymous"></script>\n        <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js" integrity="sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy" crossorigin="anonymous"></script>\n    </body>\n</html>	\N	\N	\N	\N	Bootstrapでは簡単にモーダル(画面上にもう一つウィンドウを表示させる)を表示させることができます。<br><br>上の例ではボタンをクリックするとモーダルが表示されるようになっています。<br>ボタンのdata-target=#モーダルのid<br>に対応したidのモーダルが表示されます。	1
167	2024-07-11 12:24:32	2024-07-11 12:29:48	1	3	アロー関数	\N	Javascript	const test = (value, value2) => value + value2;\n\nlet return_value = test(1,2);\nconsole.log(return_value)	\N	\N	\N	\N	上の例のように記入することで、定数testは<br><div class="code-block">function test(value, value2){<br>    return value + value2;<br>}</div><br><br>と同じ内容となります。<br>returnを記入せず、=&gt;の後ろ側がそのまま戻り値となるため、簡単な関数はアロー関数を使用することで短く書くことができます。	18
168	2024-07-11 12:44:38	2024-07-11 12:50:19	1	3	配列を複数の変数に分割する	\N	Javascript	const testArray = [1, 2, 3, 4];\nconst [test, test2, ...test3] = testArray;\n\nconsole.log(test, test2, test3);	\N	\N	\N	\N	Javascriptでは配列の要素を複数の変数に分割することが可能となっており、上はその例となっています。<br>test、test2には、testArrayの前から2つの値が代入されています。<br><br>最後のtest3は...test3とすることで、残りの要素を全て配列形式で代入しています。	19
169	2024-07-11 12:53:42	2024-07-11 12:58:32	1	3	オブジェクトを複数の変数に分割する	\N	Javascript	const dict = {\n    name: 'tarou',\n    age: '20',\n    adress: 'test@gmail.com',\n};\n\nconst {name, ...other} = dict;\nconsole.log(name, other);	\N	\N	\N	\N	オブジェクトも配列と同様に、複数の変数に分割をすることができます。<br><br>配列と同様に、最後の代入する変数の前に...を付けることで残りのすべての要素を代入することができます。<br>...で代入した変数にはオブジェクト形式で代入されます。	20
170	2024-07-11 13:07:52	2024-07-11 13:19:21	1	3	引数を配列として扱う	\N	Javascript	function test(...array){\n    let sum = 0;\n    for(let val of array){\n        sum += val;\n    }\n    console.log(sum)\n}\n\ntest(1, 2, 3)	\N	\N	\N	\N	上の例のように関数の引数名の前に、...を付けることで、複数ある引数を一つの配列として受け取ることができます。<br><br>上の例では、引数として1, 2, 3を渡しているため、関数内のarrayは[1, 2, 3]となります。<br><br>また、普通の引数との併用も可能となっており、<br><div class="code-block">function test(val, ...array){<br>    let sum = 0;<br>    for(let val of array){<br>        sum += val;<br>    }<br>    console.log(sum)<br>}<br><br>test(1, 2, 3)</div><br>とすると、valには最初の引数1が代入され、arrayには残りの要素が代入されるので[2, 3]が代入されます。<br><br>このように配列として扱う引数のことを可変長引数といいます。	21
171	2024-07-11 13:16:13	2024-07-11 13:23:02	1	3	配列をばらけさせて引数として使用する	\N	Javascript	const testArray = [1, 2, 3];\n\nfunction testFunc(val, val2, val3){\n    console.log(val, val2, val3);\n}\n\ntestFunc(...testArray);	\N	\N	\N	\N	関数呼び出し時に、配列を代入した変数の前に...を付けることで、配列を分解して引数に代入することができます。<br><br>上の例では、引数valには1、val2には2、val3には3が代入されています。<br><br>このような記入方法をスプレッド構文と呼びます。	22
174	2024-07-11 19:00:37	2024-07-11 20:04:19	4	15	構成	\N	\N	\N	\N	\N	\N	\N	Reactでは対象のページにアクセスされると<br>public/index.html-&gt;src/index.js-&gt;src-&gt;App.js<br>の順番に読み込まれていきます。<br><br>public/index.htmlはタイトルなどのhead部の設定<br>src/index.jsはファイルの読み込み、ルートの設定、<br>src/App.jsはルートの表示内容<br><br>ルートはsrc/index.jsで<br><div class="code-block">const root = ReactDOM.createRoot(document.getElementById('root'));</div><br>このように定義されており、デフォルトではpublic/index.htmlのroot部に表示されるようになっています。<br><br><br><div class="code-block">root.render(<br>  &lt;react.strictmode&gt;<br>    &lt;App /&gt;<br>  &lt;/react.strictmode&gt;<br>);</div><br>この部分はrootに対してApp.jsのApp関数で定義された内容を埋め込むようになっています。<br><br>また、root.render()内に、直接表示内容を記入することもできます。<br>その場合は、Reactでは使用されていないクラスを読み込んでいるとエラーとなるため、一番下に追記もしくは<br><div class="code-block">import React from 'react';<br>import App from './App';</div><br>の2行を削除してください。<br><div class="code-block">const name = 'test';<br>root.render(&lt;React.Fragment&gt;<br>  &lt;p&gt;{name}&lt;/p&gt;<br>  &lt;p&gt;test2&lt;/p&gt;<br>&lt;/React.Fragment&gt;)</div><br>のようにすると画面に<br>test<br>test2<br>と表示されるはずです。<br>ここでの注意点は、render関数では複数の要素を入れるとエラーになるという点です。<br>複数要素を表示したいときは上の例のようにReact.Fragmentもしくはdivの中に入れるようにしてください。<br>また{変数名}とすることで変数を埋め込むことも可能となっています。<br><br>App関数は初期状態ではreturn()のみ記入されており、この()内の内容がpublic/index.htmlのidがrootの要素に表示されるようになっています。<br>デフォルトだと<br><div class="code-block">&lt;img src={logo} className="App-logo" alt="logo" /&gt;</div><br>を削除するとエラーになるため、書き直すときは<br><div class="code-block">import logo from './logo.svg';</div><br>を削除してください。	2
178	2024-07-12 15:47:41	2024-07-12 15:51:28	3	16	リストに対する繰り返し処理	\N	Javascript	const list = [1, 2, 3];\n\nlist.map(val=>{\n    console.log(val);\n})	\N	\N	\N	\N	<div class="code-block">リストの代入された変数.map(繰り返し時に代入する変数=&gt;{<br>   繰り返し時の処理<br>})</div><br>の形式で記入することでリストに対する繰り返し処理を行うことができます。<br><br>上の例では、listが繰り返されるときに値を順番にvalに代入し、console.logで出力しています。	1
180	2024-07-12 15:56:08	2024-07-12 15:59:21	3	16	リストから条件に合うもののみを抽出する	\N	Javascript	const dictList = [\n    {\n        name: 'test',\n        age: 10,\n    },{\n        name: 'test2',\n        age: 20,\n    },{\n        name: 'test3',\n        age: 30,\n    },\n];\n\nconst under_20 = dictList.filter(dict => dict.age <= 20)\nconsole.log(under_20)	\N	\N	\N	\N	<div class="code-block">リストの代入された変数.filter(繰り返し時に代入する変数 =&gt; 条件)</div><br>の形式で記入することで、リストから条件に合うもののみを抽出することができます。<br><br>上の例では、under_20にdictListのageが20以下のデータのみを抽出して代入しています。	2
183	2024-08-02 05:11:22	2024-08-02 05:14:46	1	17	コメント	test	Ruby	puts 'test' #コメント\n\n=bigin\nコメント\nコメント\n=end	\N	\N	\N	\N	Rubyでは、<br><div class="code-block"># コメントの内容</div><br>もしくは、<br><div class="code-block">=bigin<br>コメントの内容<br>=end</div><br>の形式で記入することでコメントアウトすることができます。<br><br>コメントアウトはメモのような感じでプログラムとして実行されません。<br><br>#は記入した行の末尾まで、=begin、=endは複数行にわたるコメントアウトを行うことができます。	3
185	2024-08-02 05:23:10	2024-08-02 05:29:31	1	17	変数	test\ntest2	Ruby	text = "test"\nputs text\n\ntext ="test2"\nputs text	\N	\N	\N	\N	変数とは値を代入する入れ物のことです。<br><div class="code-block">変数名 = 変数の値</div><br>の形式で変数を定義することができ、以降変数名を呼び出すことで変数の値を使用することができるようになります。<br><br>また、変数は使用している変数に対して再び値を代入することで値を書き換えることができます。	5
182	2024-08-02 05:07:29	2024-08-02 05:08:13	1	17	実行、出力	test	Ruby	puts 'test'	\N	\N	\N	\N	Rubyでは<br><br><div class="code-block">puts 出力する内容</div><br>の形式で記入することで文字などを出力することができます。<br><br>拡張子を.rbにして保存することでRubyファイルを作成することができ、コマンドプロンプトで<br><div class="code-block">ruby ファイル名</div><br>と入力することでrubyファイルが実行されます。	2
186	2024-08-02 05:34:13	2024-08-02 05:34:13	1	17	定数	test	Ruby	TEXT = "test"\\\\r\nputs TEXT	\N	\N	\N	\N	定数は変数と同じように値を代入するのに使用しますが、変数とは違い、値を上書きしようとすると警告が出ます。\\\\r\n定数名は変数と見分けがつくようにすべて大文字で記入してください。\\\\r\n\\\\r\n定数は消費税率など、プログラム内で書き換える必要がない値を代入するのに使用してください。	6
184	2024-08-02 05:19:01	2024-08-02 05:21:00	1	17	文字列の連結	testtest	Ruby	puts 'test' + 'test'	\N	\N	\N	\N	<div class="code-block">任意の文字列+任意の文字列</div><br>の形式で文字列同士を結合することができます。<br>	4
188	2024-08-02 05:44:51	2024-08-02 05:46:21	1	17	文字列内での変数展開	変数の値はtestです	Ruby	text = 'test'\nputs "変数の値は#{text}です"	\N	\N	\N	\N	文字列を囲っている''を""に変更し、#{変数名}の形式で記入することで、文字列の中で変数を展開することができます。<br>また、#{2-1}のように計算結果を埋め込むこともできます。	7
190	2024-08-02 05:50:40	2024-08-02 05:52:18	1	17	変数に文字列を追加する	testtext	Ruby	text = 'test'\ntext << 'text'\nputs text	\N	\N	\N	\N	<div class="code-block">変数名 << 文字列</div><br>の形式で記入することで、変数の末尾に文字列を追加することができます。	8
284	2024-08-22 17:25:24	2024-08-22 17:28:16	4	19	フィールドを追加して取得する	\N	app/controllers/test_controller.rb	class TestController < ApplicationController\n  def index\n    @sales = Sale.select(:amount, :sales_date, 'amount * 1.1 AS tax_included')\n  end\nend	\N	\N	\N	\N	計算した値などのフィールドを追加するには、<br><div class="code-block">モデル.select('計算式 AS 追加するフィールド名')</div><br>の形式で記入します。<br><br>上の例では、amount、sales_dateフィールドとともに、amount*1.1した値をtax_includedフィールドとして取得しています。	31
191	2024-08-02 06:44:54	2024-08-02 07:02:12	1	17	条件分岐(if文)	testは10より小さいです	Ruby	test = 9\n\nif test > 10\n  puts 'testは10より大きいです'\nelsif test < 10\n  puts 'testは10より小さいです'\nelse\n  puts 'testは10です'\nend	\N	\N	\N	\N	if文は、処理を分岐するのに使用します。<br><div class="code-block">if 条件<br>   条件に一致したときの処理<br>elsif 条件2<br>   条件2に一致したときの処理<br>else<br>   どの条件にも一致しなかったときの処理<br>end</div><br>の形式で記入します。<br>一致したときのみ処理を行いたいときは、elsif、elseを省略することができます。<br><br>値が同じかどうかを比較するときは値1==値2もしくは値1===値2の形式で記入して下さい。<br>==では型の比較はなし、===は型の比較ありとなっています。<br><br>また、複数条件にしたい場合は<br>条件1&&条件2とすると両方に一致したとき、<br>条件1||条件2とするとどちらかに一致したときという内容になります。<br><br>!条件とすると条件に一致しなかったときという内容にすることもできます。	9
192	2024-08-02 07:02:53	2024-08-02 07:06:38	1	17	条件分岐(unless文)	testは10ではありません	Ruby	test = 8\n\nunless test === 10\n  puts "testは10ではありません"\nelse\n  puts "testは10です"\nend	\N	\N	\N	\N	unless文はif文の逆で、条件に一致しなかったときに処理を行うのに使用します。<br><div class="code-block">unless 条件<br>   条件に一致しなかったときの処理<br>else<br>   条件に一致したときの処理<br>end</div><br>の形式で記入します。<br><br>条件に一致しなかったときの処理のみの場合はelseを省略することができます。	10
193	2024-08-02 07:16:25	2024-08-02 07:20:21	1	17	条件分岐(case文)	testは2もしくは3です	Ruby	test = 3\n\ncase test\nwhen 1\n  puts 'testは1です'\nwhen 2,3\n  puts 'testは2もしくは3です'\nelse\n  puts 'testの値は3より大きいもしくは正の整数ではありません'\nend	\N	\N	\N	\N	case文は変数の値によって条件分岐するのに使用します。<br><br><div class="code-block">case 条件分岐に使用する変数<br>when 値<br>   条件分岐に使用する変数が値だった時の処理<br>else<br>   どのwhenにも一致しなかったときの処理<br>end</div><br>の形式で記入します。<br><br>whenは複数個追加することもでき、,区切りでどれかに一致したときの処理とすることもできます。	11
196	2024-08-02 07:27:14	2024-08-02 07:32:34	1	17	３項演算子	1	Ruby	test = 1\ntest2 = test>0 ? 1 : 0\n\nputs test2	\N	\N	\N	\N	３項演算子は<br><div class="code-block">変数 = 条件 ? 条件に一致したときの値 : 条件に一致しなかったときの値</div><br>の形式で記入することで条件によって変数の値を変えることができます。<br><br>上の例では変数test2には変数testが0より大きいときには1、それ以外の時(0以下)の時には0が代入されています。<br><div class="code-block">if test >0<br>   test2 = 1<br>else<br>   test2 = 0<br>end</div><br>と記入しても同じ内容となります。	12
197	2024-08-02 07:39:22	2024-08-02 07:42:39	1	17	繰り返し処理(while文)	0\n1\n2\n3\n4\n5	Ruby	num = 0\n\nwhile num<=5\n  puts num\n  num += 1\nend	\N	\N	\N	\N	while文は条件に一致する間繰り返す文となっています。<br><div class="code-block">while 条件<br>   条件に一致する間繰り返す処理<br>end</div><br>の形式で記入します。<br>処理内で値を更新させないと無限ループになってしまう点に注意してください。<br><br>上の例では、num += 1とすることで、繰り返しのたびに変数numの値を1ずつ増やしています。	13
198	2024-08-02 08:07:04	2024-08-02 08:12:51	1	17	繰り返し処理(until文)	5\n4\n3\n2\n1	Ruby	num = 5\n\nuntil num<=0\n  puts num\n  num -= 1\nend	\N	\N	\N	\N	until文は条件に一致しない間繰り返し処理を行う文となっており、while文の逆となっています。<br><br><div class="code-block">until 条件<br>   条件に一致しないときの処理<br>end</div><br>の形式で記入します。<br><br>while文と同じで繰り返し処理内で値を更新しないと無限ループになってしまう点に注意してください。	14
199	2024-08-02 08:25:50	2024-08-02 08:33:57	1	17	配列	1\n[1, 2, 3, "test"]\n[1, 2, 3, "test", [10, 20]]\n10\n5	Ruby	array = [1, 2, 3, 'test']\n\nputs array[0]\np(array)\n\narray[4] = [10, 20]\np(array)\nputs array[4][0]\n\nputs array.length	\N	\N	\N	\N	配列は、一つの変数に対して複数の値を代入したりするのに使用します。<br><br><div class="code-block">変数名 = [値, 値, 値...]</div><br>のような形式で変数に代入することができます。<br><br>配列の特定の要素のみ取り出すときは、<br><div class="code-block">配列を代入した変数[インデックス]</div><br>の形式で記入します。<br>インデックスとは、配列の何番目の要素化を指す番号で先頭の要素は0となっています。<br><br>配列全体を出力したいときは<br><div class="code-block">p(配列を代入した変数)</div><br>の形式で使用します。<br><br>また、インデックスを指定して配列の特定の要素を追加、上書きすることもできるようになっています。<br>配列の中に配列を入れることも可能となっており、上の例では、array[4]に[10, 20]を追加しています。<br><br><div class="code-block">配列を代入した変数.length</div><br>の形式で記入することで配列の要素数を調べることもできます。<br><div class="code-block">配列を代入した変数.size</div><br>としても同様の意味となります。	15
201	2024-08-02 22:57:06	2024-08-02 23:03:25	1	17	ハッシュ	{:test=>1, :test2=>2}\n1\n4	Ruby	dict = {'test': 1, 'test2': 2}\n\np(dict)\nputs dict[:test]\n\ndict2 = {'test'=> 3, 'test2'=> 4}\nputs dict2['test2']	\N	\N	\N	\N	ハッシュとは他の言語での辞書型のことで、キーに対して値を持たせる機能です。<br><br>ハッシュは<br><div class="code-block">変数 = {キー: 値}</div><br>もしくは<br><div class="code-block">変数 = {キー=&gt; 値}</div><br>の形式で定義することができます。<br>また,区切りでキー、値を増やすこともできます。<br><br>キー: 値の形式で記入しているものに対しては<br><div class="code-block">変数名[:キー]</div><br>キー=&gt;値の形式で記入しているものに対しては<br><div class="code-block">変数名['キー']</div><br>の形式で値を取得することができます。<br><br>ハッシュ全体の値取得時は<br><div class="code-block">p(変数名)</div><br>と記入してください。<br>	16
16	2024-06-24 05:39:43	2024-06-28 16:49:47	1	1	リンクを作成する	<a href="https://www.google.com/" target="_blank">Google</a>	HTML	<a href="https://www.google.com/">Google</a>	\N	\N	\N	\N	上の例ではGoogle文字にGoogleホーム画面へのリンクを貼り付けています。<br>リンクを作成する場合は、<br><div class="code-block">&lt;a href="リンク先のURL"&gt;画面に表示したい文字&lt;/a&gt;</div><br>の方式で記入します。	4
202	2024-08-02 23:08:14	2024-08-02 23:12:44	1	17	繰り返し処理(for文)	1\n2\n3\n4\nキー=test 値=1\nキー=test2 値=2	Ruby	list = [1, 2, 3, 4]\nfor val in list\n  puts val\nend\n\ndict = {'test': 1, 'test2': 2}\nfor key, val in dict\n  puts "キー=#{key} 値=#{val}"\nend	\N	\N	\N	\N	for文は配列、ハッシュに対して繰り返し処理を行うのに使用します。<br><br><div class="code-block">for 繰り返し時に代入する変数 in 配列<br>   繰り返し時の処理<br>end</div><br>の形式で記入することで、配列の要素を順番に繰り返し時に代入する変数に代入して繰り返し処理を行います。<br><br>ハッシュに対してfor文を使用するときは<br><div class="code-block">for 繰り返し時にキーを代入する変数, 繰り返し時に値を代入する変数 in ハッシュ<br>   繰り返し時の処理<br>end</div><br>の形式で記入します。	17
203	2024-08-02 23:17:46	2024-08-02 23:21:29	1	17	繰り返し処理(eachメソッド)	1\n2\n3\n4\ntest: 1\ntest2: 2	Ruby	list = [1, 2, 3, 4]\nlist.each{|val|\n  puts  val\n}\n\ndict = {'test': 1, 'test2': 2}\ndict.each{|key, val|\n  puts "#{key}: #{val}"\n}	\N	\N	\N	\N	eachメソッドも、for文と同様に配列、ハッシュに対して繰り返し処理を行うのに使用します。<br><br><div class="code-block">配列.each{|繰り返し時に代入する変数|<br>   繰り返し時の処理<br>}</div><br>の形式で記入することで、配列の要素を順番に繰り返し時に代入する変数に代入して繰り返し処理を行うことができます。<br><br><div class="code-block">ハッシュ.each{|繰り返し時にキーを代入する変数, 繰り返し時に値を代入する変数|<br>   繰り返し時の処理<br>}</div><br>の形式で記入することで、ハッシュの要素を順番に繰り返し時に代入する変数に代入して繰り返し処理を行うことができます。	18
204	2024-08-02 23:30:57	2024-08-02 23:41:32	1	17	メソッド	3	Ruby	def test(val, val2=0)\n  puts val + val2\nend\n\ntest(1, 2)	\N	\N	\N	\N	メソッドとは、他の言語での関数のことです。<br>他の言語では、クラス内で定義された関数のことをメソッドと呼びますがRubyではすべてメソッドと呼ぶようです。<br><br>メソッドは<br><div class="code-block">def メソッド名(仮引数)<br>   処理<br>end</div><br>の形式で定義し、<br><div class="code-block">メソッド名(引数)</div><br>の形式でメソッドを呼び出します。<br><br>メソッドは定義しただけでは実行されないので実行時に呼び出す必要があります。<br><br>呼び出し時に引数として()内に記入した値がメソッドの仮引数に代入され、処理が行われます。<br>上の例は2つの値の足し算を行うメソッドとなっています。<br><br>また、上の例の2つ目の仮引数のように仮引数=値の形式で記入することで対象の引数が省略されたときのデフォルトの値を設定することができます。	19
206	2024-08-03 07:25:02	2024-08-03 07:51:47	1	17	クラス	1	Ruby	class Test\n  def initialize(val)\n    @val = val\n  end\n\n  def testMethod()\n    puts @val\n  end\nend\n\ntest = Test.new(1)\ntest.testMethod()	\N	\N	\N	\N	クラスとは、プロパティ(クラス内での変数)とメソッドをひと固まりにしたものです。<br><br>クラスは<br><div class="code-block">class クラス名<br>   プロパティ、メソッドの定義<br>end</div><br>の形式で定義することができます。<br><br>クラスも、メソッドと同じく、定義しただけでは実行することができず、インスタンスというものを作成する必要があります。<br><br>インスタンスは、<br><div class="code-block">変数 = クラス.new(引数)</div><br>の形式で作成することができます。<br>インスタンス作成時にはインスタンス作成時の引数がinitializeメソッドに渡され実行されるので、このメソッドでプロパティの初期値の設定などを行います。(他の言語でのコンストラクタ)<br>クラス内でのプロパティは@プロパティ名の形式で前に@を付ける必要があります。<br><br>メソッドは、<br><div class="code-block">インスタンスを代入した変数.メソッド名(引数)</div><br>の形式で呼び出すことができます。	21
207	2024-08-03 07:48:59	2024-08-03 07:59:40	1	17	プロパティを読み書き可能にする	1\n3	Ruby	class Test\n  attr_accessor :val, :val2\n  def initialize(val, val2)\n    @val = val\n    @val2 = val2\n  end\nend\n\ntest = Test.new(1, 2)\nputs test.val\ntest.val = 3\nputs test.val	\N	\N	\N	\N	プロパティはデフォルトの状態ではクラス外から読み書きともに行うことができず、更新、出力用のメソッドを作成する必要がありますが、クラス内に<br><div class="code-block">attr_accessor :プロパティ名</div><br>と記入することで、対象のプロパティの読み書きをクラス外から直接行えるようになります。<br>:プロパティ名は,区切りで読み書き可能にするプロパティを複数にすることもできます。<br><br>また、<br><div class="code-block">attr_reader :プロパティ名</div><br>で読み込み専用、<br><div class="code-block">attr_writer :プロパティ名</div><br>で書き込み専用にすることもできます。	22
208	2024-08-03 08:09:31	2024-08-03 08:12:39	1	17	クラス定数	1\n3	Ruby	class Test\n  VAL = 1\n\n  def initialize(val)\n    @val = val\n  end\n\n  def testMethod()\n    puts @val + VAL\n  end\nend\n\nputs Test::VAL\ntest = Test.new(2)\ntest.testMethod()	\N	\N	\N	\N	クラスでは定数も定義できるようになっており、クラス定数はインスタンスを作成しなくても<br><div class="code-block">クラス名::定数名</div><br>の形式で呼び出せるようになっています。	6
209	2024-08-05 00:39:23	2024-08-05 00:42:09	1	17	クラス変数	2\n3	Ruby	class Test\n  @@val = 1\n\n  def testMethod()\n    @@val += 1\n    puts @@val\n  end\nend\n\ntest = Test.new()\ntest.testMethod()\ntest2 = Test.new()\ntest2.testMethod()	\N	\N	\N	\N	initializeメソッドで定義したプロパティは、インスタンスごとに独立した値となりますが、クラス変数を使用することで、クラス共有の変数を定義することができます。<br><br>クラス変数は、<br><div class="code-block">@@変数名 = 値</div><br>の形式で定義することができます。	23
217	2024-08-06 02:01:47	2024-08-06 02:17:48	4	18	ルーティングの設定	\N	\N	\N	\N	\N	\N	\N	config/routes.rbを以下のように書き換えます。<br><div class="code-block">Rails.application.routes.draw do<br>  get "/" =&gt; "コントローラー名#メソッド名"<br>end</div><br>と変更することで<a href="http://127.0.0.1:3000" blank="true">http://127.0.0.1:3000</a>にアクセスしたときに先ほどコントローラーで設定した内容が表示されます。<br><br>コントローラー名は末尾のControllerは必要なく、すべて小文字で入力してください。<br><br>また、getの直後の"/"はアクセスされるURLを示しており、例えばhttp://127.0.0.1:3000/testにアクセスしたときに対象のページを表示したい場合は<br>"/test"としてください。	4
210	2024-08-05 00:51:07	2024-08-05 01:12:16	1	17	継承	3\n10	Ruby	class Parent\n  VAL = 10\n  @@val = 1\n  def initialize(val)\n    @val2 = val\n  end\n\n  def testMethod()\n    puts @@val + @val2\n  end\nend\n\nclass Child < Parent\nend\n\ntest = Child.new(2)\ntest.testMethod()\nputs Child::VAL	\N	\N	\N	\N	継承とは、別のクラスのプロパティ、メソッドなどを使用できるようにすることです。<br><br>継承されるクラス(上の例のParentクラス)のことを親クラス、継承するクラス(上の例のChildクラス)のことを子クラスと呼びます。<br>クラス定義時に<br><div class="code-block">class クラス名 &lt; 継承するクラス名</div><br>の形式で記入することで継承を行うことができます。<br><br>Rubyでは、複数のクラスを同時に継承する多重継承(親が複数になる状態)は出来ません。<br><br>親クラスで定義されているメソッドと同名のメソッドを子クラスで再定義することでメソッドを上書きすることもでき、この上書きのことをオーバーライドと呼びます。<br><br>オーバーライド後に親のメソッドを呼び出したいときは、<br><div class="code-block">def メソッド名<br>   処理<br>   super(引数)<br>   処理<br>end</div><br>のようにするとsuper(引数)を記入した場所で親の同名のメソッドが実行されます。	24
211	2024-08-05 01:13:41	2024-08-05 01:24:10	1	17	アクセス装飾子	1\n2	Ruby	class Test\n  def testMethod()\n    puts 1\n    testMethod2()\n  end\n\n  private\n  def testMethod2()\n    puts 2\n  end\n\n  def testMethod3()\n    puts 3\n  end\nend\n\ntest = Test.new()\ntest.testMethod()	\N	\N	\N	\N	メソッドの前にアクセス装飾子と呼ばれるものを付けることで、メソッドに対するアクセスを制限することができます。<br>アクセス装飾子はpublic、protected、privateの3種類があります。<br>public どこからでも呼び出せる<br>protected 自クラスもしくは自身の子クラスのメソッドからしか呼び出せない<br>private 自クラスのメソッドからしか呼び出せない<br>となっています。<br><br>アクセス装飾子はデフォルトではpublicとなっており、クラス内でアクセス装飾子を記入すると、新たにアクセス装飾子を記入した場所までのメソッドは対象のアクセス装飾子が適用されます。<br>上の例だとtestMethod2、testMethod3privateとなっています。	25
212	2024-08-05 01:42:21	2024-08-05 01:58:01	1	17	モジュール	1\n2	Ruby	module TestModule\n  def testMethod\n    puts 1\n  end\n\n  def testMethod2\n    puts 2\n  end\n\n  module_function :testMethod\n  public :testMethod\nend\n\nclass Test\n  include TestModule\nend\n\nTestModule.testMethod\n\ntest = Test.new\ntest.testMethod2	\N	\N	\N	\N	モジュールという機能を使用することで、同じ内容のクラスメソッドが複数あるときに何度も定義する必要がなくなります。<br><br><div class="code-block">module モジュール名<br>   メソッドの定義<br>end</div><br>の形式でモジュールを定義することができ、<br><br>クラス内で<br><div class="code-block">include モジュール名</div><br>とすることで、モジュールで定義したメソッドを埋め込むことができます。<br><br>また、モジュールで定義したメソッドは<br>メソッド内に<br><div class="code-block">module_function :メソッド名</div><br>の形式で記入することでクラス外から<br><div class="code-block">モジュール名.メソッド</div><br>の形式で呼び出すことができます。<br><br>module_functionで設定したメソッドは、クラス内で読み込んだ時にprivateとなるので、アクセス装飾子を変更したいときは上の例のように<br><div class="code-block">アクセス装飾子 :メソッド名</div><br>の形式で記入してください。	26
214	2024-08-05 07:39:39	2024-08-06 01:11:02	4	18	インストール、プロジェクトの作成	\N	\N	\N	\N	\N	\N	\N	Rubyがインストールされた状態で<a href="https://www.msys2.org/">こちら</a>のページからMsys2をインストール後、Windowsボタンを押し、Msys2と入力し、MSYS2 MSYSのところで右クリック→管理者として実行をクリックします。<br><br>MSYS2が開かれたら<br><div class="code-block">pacman -Syu</div><br>と入力し、パッケージデータベースを更新します。<br><br>更新が完了したら、<br><div class="code-block">pacman -S mingw-w64-ucrt-x86_64-libyaml</div><br>と入力し、libyamlをインストールします。<br><br>インストールが完了したらMSYS2を閉じ、Windowsボタンを押し、cmdと入力し、コマンドプロンプトのところで右クリック→管理者として実行をクリックします。<br><br>コマンドプロンプトが開かれたら<br><div class="code-block">gem update --system</div><br><div class="code-block">gem install bundler</div><br>をそれぞれ実行します。<br><br>その後、cdコマンドでプロジェクトを作成したいフォルダに移動し、<br><div class="code-block">rails new プロジェクト名</div><br>と入力することで新しくプロジェクトが作成されます。<br><br>もしエラーが出た場合は、コマンドプロンプトで<br><div class="code-block">gem install psych --platform=ruby -- --with-libyaml-dir=C:/msys64/mingw64</div><br>を入力後、再度プロジェクトを作成してください。<br><br>プロジェクト作成後に、コマンドプロンプトでプロジェクトのフォルダに入り、<br><div class="code-block">rails server</div><br>と入力することでサーバーを起動することができ、<a href="http://127.0.0.1:3000/" target="blank">http://127.0.0.1:3000</a>にアクセスすることでRubyで作成したページを開くことができます。<br>	1
215	2024-08-06 01:13:34	2024-08-06 01:27:38	4	18	よく使用するフォルダ	\N	\N	\N	\N	\N	\N	\N	よく使用するフォルダは以下になっています。<br><br><h2>app/asset</h2><br>イメージファイルやcssを配置するフォルダになっています。<br><br><h2>app/controllers</h2><br>アクセスされたURLごとの処理を書くファイルを配置するフォルダです。<br><br><h2>app/javascript</h2><br>Javascriptファイルを配置するフォルダです。<br><br><h2>app/models</h2><br>データベースアクセスのファイルを配置するフォルダです。<br><br><h2>app/views</h2><br>画面に表示するファイルを配置するフォルダです。<br><br><h2>config</h2><br>設定ファイルを配置するフォルダです。<br><br><h2>config/routes.rb</h2><br>アクセスされたURLごとに使用するコントローラーを切り替えるファイルです。	2
216	2024-08-06 01:39:35	2024-08-06 02:20:15	4	18	コントローラー	\N	\N	\N	\N	\N	\N	\N	コントローラーは、コマンドプロンプトでプロジェクトのルートディレクトリで<br><div class="code-block">rails generate conntroller コントローラー名</div><br>と入力することで作成することができます。<br><br>上記のコマンドを実行すると、<br>app/controllers/コントローラー名_controller.rb<br>app/view/コントローラー名のフォルダ<br>app/helpers/コントローラー名_helper.rb<br>test/controllers/コントローラー名_controller_test.rb<br>がそれぞれ作成されます。<br><br>コントローラーの操作を行うファイルは<br>app/controllers/コントローラー名_controller.rb<br>となるのでこちらのファイルの説明をしていきます。<br><br>このファイルを開くと<br><div class="code-block">class コントローラー名Controller &lt; ApplicationController<br>end</div><br>となっているので<br><div class="code-block">class コントローラー名Controller &lt; ApplicationController<br>  def メソッド名<br>    render plain: "表示する内容"<br>  end<br>end</div><br>のようにendの前に処理内容を記入します。<br><br>この時点では、アクセスされたURLごとの設定がされていないためこのページはまだ表示することはできません。	3
228	2024-08-15 17:57:24	2024-08-16 01:25:44	4	19	データベースを作成する	\N	\N	\N	\N	\N	\N	\N	プロジェクトのルートフォルダで<br><div class="code-block">rails db:create</div><br>と入力することでデータベースを作成することができます。<br><br>デフォルトではsqlite3のデータベースが作成されるようになっています。<br><br>config/database.ymlを編集することで別のデータベースを使用したり、データベース名の名称を変更したりすることもできます。<br>mysqlなどの別のデータベースを使用時にはGemfileの編集を行い、追加でインストールする必要があるので当サイトではデフォルトのままで進めていきます。<br><br>データベースを削除したいときはプロジェクトのルートフォルダで<br><div class="code-block">rails db:drop</div><br>と入力してください。	1
218	2024-08-06 02:31:40	2024-08-06 02:56:37	4	18	ビューを作成する	\N	\N	\N	\N	\N	\N	\N	コントローラー作成時に作成されたapp/views/コントローラー名のフォルダに.html.erb形式のファイルを作成することで、そのHTMLの内容を画面に表示することができます。<br><br>ルーティングで使用しているコントローラーのメソッドを<br><div class="code-block">def メソッド名<br>end</div><br>のように処理を何も記入していない状態にし、<br>app/views/コントローラー名/コントローラーのメソッド名.html.erbファイルを作成し、そこにhtmlを記入することで対象のルーティングで設定されたURLにアクセスするとapp/views/コントローラー名/コントローラーのメソッド名.html.erbファイルに記入した内容が表示されるようになります。<br><br>.html.erbと普通の.htmlの違いは.html.erbはタグというものを使用し、ファイル内でif文、for文などを使用できる点です。<br>また、.html.erbファイルに記載するのはbody部のみでよくなっており、デフォルトでは、app/views/layouts/application.html.erbファイルの<br><div class="code-block">&lt;%= yield %&gt;</div><br>の部分に埋め込まれるようになっています。<br><br>対象のページにcssを当てたいときは、<br>app/assets/stylesheets/コントローラー名(Controller不要、すべて小文字).scss<br>ファイルを作成し、そのファイルにcssを記入することでcssを適用することができます。<br><br>もし、scssファイルを追加時にエラーが出たらプロジェクトのルートにあるGemfileを開き、<br><div class="code-block">gem 'sassc-rails'</div><br>を追記後、コマンドプロンプトでプロジェクトのルートディレクトリで<br><div class="code-block">bundle install</div><br>と入力してください。	5
220	2024-08-09 15:35:58	2024-08-09 15:44:12	5	7	ブランチの操作	\N	\N	\N	\N	\N	\N	\N	現在のブランチを確認する<br><div class="code-block">git branch</div><br><br>全てのブランチを確認する<br><div class="code-block">git branch -a</div><br><br>ブランチを切り替える<br><div class="code-block">git checkout ブランチ名</div><br><br>ブランチを新たに作成して切り替える<br><div class="code-block">git checkout -b ブランチ名</div><br><br>ローカルのブランチを削除する<br><div class="code-block">git blanch -d ブランチ名</div><br><br>ローカルのブランチの強制削除<br><div class="code-block">git branch -D ブランチ名</div><br><br>リポジトリのブランチを削除する<br><div class="code-block">git push origin --delete ブランチ名</div>	2
221	2024-08-09 15:47:54	2024-08-09 15:53:40	5	7	ローカルでの変更をリポジトリに反映させる	\N	\N	\N	\N	\N	\N	\N	ローカルでの変更をリポジトリに反映させるには<br><div class="code-block">git add .</div><br>もしくは<br><div class="code-block">git add ファイル名</div><br>　　　　　↓<br><div class="code-block">git commit -m コメント</div><br>　　　　　↓<br><div class="code-block">git push</div><br>の流れになります。<br><br>git add .は現在のディレクトリ以下のすべてのファイルの更新に使用します。<br>特定のファイルのみを更新したいときはgit add ファイル名としてください。<br><br><br><br>	3
222	2024-08-09 15:55:39	2024-08-09 16:10:23	5	7	ローカルのデータを更新する	\N	\N	\N	\N	\N	\N	\N	リモートリポジトリからすべてのブランチのデータを取得する<br><div class="code-block">git fetch</div><br><br>指定したリモートからのデータを取得する<br><div class="code-block">git fetch リモート名</div><br><br>指定したブランチからデータを取得する<br><div class="code-block">git fetch リモート名 ブランチ名</div><br><br>全てのデータをローカルに反映させる<br><div class="code-block">git pull</div><br><br>指定したブランチのデータをローカルに反映させる<br><div class="code-block">git pull リモート名 ブランチ名</div><br><br>強制的にリモートリポジトリと同じにする<br><div class="code-block">git fetch origin<br>git reset --hard origin/main</div>	4
223	2024-08-09 16:11:31	2024-08-09 16:14:11	5	7	特定のファイルの更新を取得しないようにする	\N	\N	\N	\N	\N	\N	\N	特定のファイルの更新を取得しないようにするには、ルートフォルダ直下にある.gitignoreファイルに更新を取得したくないファイル名を追加します。<br><br>ルートからの相対パスで<br><div class="code-block">/ファイル名</div><br>の形式で記入します。	5
225	2024-08-15 17:24:07	2024-08-15 17:26:45	4	18	別のビューを埋め込む	test	index.html.erb	<%= render "header" %>	_header.html.erb	<div>test</div>	\N	\N	view内で<br><div class="code-block">&lt;%= render "読み込むファイル名" %&gt;</div><br>と記入することで別のviewを埋め込むことができます。<br><br>埋め込むファイルは先頭に_を付けたファイル名にし、埋め込むときは拡張子を省いたファイル名のみを記入します。	7
219	2024-08-06 03:00:35	2024-08-06 03:11:12	4	18	ビュー内で変数の値を使用する	テキスト	app/test_controller.rb	class TestController < ApplicationController\n  def test\n    @text = "テキスト"\n  end\nend	views/test/test.html.erb	<p><%= @text %></p>	\N	\N	上の例ではTestcontrollerのtestメソッドでプロパティtextを設定し、ビューに表示している例となります。<br>このように、メソッド内でプロパティの定義のみを行っているときはプロパティの値をビューに渡すことができ、ビュー側では<br><div class="code-block">&lt;%= @プロパティ名 %&gt;</div><br>と入力することでプロパティの値を使用することができます。	6
224	2024-08-09 16:20:18	2024-08-09 16:20:18	5	7	特定のファイルを以前の状態に戻す	\N	\N	\N	\N	\N	\N	\N	特定のファイルを以前の状態に戻すには、\\\\r\n<div class="code-block">git log --all -- ファイル名</div>\\\\r\nと入力し、指定したファイルの更新履歴を確認します。\\\\r\nその中で復元したいところのcommitの横にある英数字をコピーします。\\\\r\n\\\\r\nその後\\\\r\n<div class="code-block">git checkout コピーした英数字 -- ファイル名</div>\\\\r\nと入力すると指定したファイルを指定した時点の状態に戻すことができます。	6
226	2024-08-15 17:35:32	2024-08-15 17:39:05	4	18	ビュー内での条件分岐	testは1です	index.html.erb	<% test=1 %>\n\n<% if test == 0 %>\n    <div>testは0です</div>\n<% elsif test == 1 %>\n    <div>testは1です</div>\n<% else %>\n    <div>testは0でも1でもありません</div>\n<% end %>	\N	\N	\N	\N	上の例ではtestの値に応じて表示される内容が変化するようになっています。<br><br><div class="code-block">&lt;% if 条件 %&gt;<br>    処理内容<br>&lt;% end %&gt;</div><br>のような形式でif文を記入することができます。<br>複数条件あるようなときは上の例のようにelsif、elseも記入することができます。	8
227	2024-08-15 17:41:54	2024-08-15 17:46:48	4	18	ビュー内での繰り返し処理	1\n2\n3\n4\n5	index.html.erb	<% test = [1, 2, 3, 4, 5] %>\n\n<% test.each do |i| %>\n    <div><%= i %></div>\n<% end %>	\N	\N	\N	\N	view内で繰り返し処理を行うには、<br><div class="code-block">&lt;% 配列.each do |繰り返し時に代入する変数| %&gt;<br>    繰り返し時の処理<br>&lt;% end &&gt;</div><br>の形式で記入してください。<br><br>上の例では、変数testに配列を代入し、繰り返し時にiに代入して表示させています。<br><br>また、eachをreverse_eachにすると末尾からの繰り返し処理(逆順)を行うこともできます。	9
229	2024-08-16 01:22:53	2024-08-16 01:30:34	4	19	モデルの作成、バリデーションの設定	\N	db/migrate/内にできたファイル	class CreateCompanies < ActiveRecord::Migration[7.1]\n  def change\n    create_table :companies do |t|\n      t.text :name, null: false\n      t.date :founding_date\n      t.timestamps\n    end\n  end\nend	app/models/company.rb	class Company < ApplicationRecord\n  validates :name, presence: true\nend	\N	\N	上の例では、Companyモデルをname(文字列)、founding_date(日付)フィールドで作成し、nameフィールドでは空白時にバリデーションを行っている例となっています。<br><br>コマンドプロンプトでプロジェクトのルートディレクトリに移動し、<br><div class="code-block">rails generate model モデル名</div><br>と入力するとdb/migrate内にマイグレーション用のファイル、app/modelsフォルダにモデル名のファイルが作成されます。<br><br>db/migrate内にできたファイルでは、モデルのフィールドを定義しています。<br><div class="code-block">t.フィールドの型 :フィールド名</div><br>の形式でフィールドを定義することができ、null: falseを追加すると必須フィールドになります。<br><br>app/models/モデル名のファイルでは紐づいたモデルとのリレーションの設定、バリデーションなどを記入することができます。<br>リレーションについては次のページで説明していきます。<br><div class="code-block">validates :フィールド名, presence: true</div><br>のようにするとデータがないときに対するバリデーションを行うことができます。<br><br>空白ではなく、正規表現でバリデーションを行いたいときは、presence: trueの部分を<br><div class="code-block">format: { with: /\\\\\\\\A\\\\\\\\d{3}-\\\\\\\\d{4}\\\\\\\\z/, message: "郵便番号を正しい形式で入力してください" }</div><br>のようにします。(上はここでは関係ないですが郵便番号の3桁数字-4桁数字になるようにしたバリデーション)<br>また,区切りで複数のバリデーションも行うことが可能となっています。<br><br>それぞれの定義が完了したら、プロジェクトのルートディレクトリで<br><div class="code-block">rails db:migrate</div><br>と入力することでモデルが作成されます。<br><br>また、マイグレーションは以前の状態に戻すことができ、すべてのマイグレーションをリセットするときは<br><div class="code-block">rails db:migrate:reset</div><br>と入力してください。<br><br>既定の回数分だけ戻したいときは<br><div class="code-block">rails db:rollback STEP=既定の回数</div><br>の形式で記入してください。<br>直近のマイグレーションのみ取り消すときは<br><div class="code-block">rails db:rollback STEP=1</div><br>となります。	2
230	2024-08-16 01:38:17	2024-08-16 01:39:26	4	19	モデルに初期データを入れる	\N	db/seeds.rb	Company.create(name: 'test', founding_date: '2024-8-16')\nCompany.create(name: 'test2', founding_date: '2024-8-16')	\N	\N	\N	\N	モデルに初期データを入れるときは、db/seeds.rbに<br><div class="code-block">モデル.create(フィールド名: 値)</div><br>の形式で記入し、プロジェクトのルートディレクトリで<br><div class="code-block">rails db:seed</div>と入力してください。<br><br>上の例ではCompanyモデルに2つの初期データを入れている例となります。	3
231	2024-08-16 04:54:20	2024-08-16 05:07:04	4	18	sqlを操作する	\N	app/controllers/test_controller.rb	class TestController < ApplicationController\n  def index\n    sql = "select * from companies"\n    @companies = ActiveRecord::Base.connection.execute(sql)\n  end\nend	app/views/test/index.html.erb	<% @companies.each do |company| %>\n    <div><%= company['name'] %></div>\n<% end %>	\N	\N	上の例はcompaniesモデルのデータを全て取得して変数@companiesに代入し、ビューで繰り返し処理を行い、companyモデルのnameフィールドを表示しています。<br>モデル関係の記事はRuby on Rails(ORM)に書いてありますので、モデルを操作したことのない方はそちらを参考にしてください。<br><br>コントローラー内でsqlを記入するには、<br><div class="code-block">ActiveRecord::Base.connection.excute(sql文)</div><br>の形式で記入します。<br><br>また、プロジェクトのルートディレクトリで<br><div class="code-block">rails dbconsole</div><br>と入力することでコマンドプロンプトで直接sqlで操作することができます。<br><br>sqlの操作を終了したいときはctrl+cを押してください。	10
232	2024-08-16 05:03:54	2024-08-16 07:08:39	4	18	入力フォームから値を受け取りjson形式で値を返す	\N	app/controllers/test_controller.rb	class TestController < ApplicationController\n  def index\n  end\n\n  def post\n    name = params[:name]\n    render json:{success: true, message: name}\n  end\nend	app/views/test/index.html.erb	<form id="company">\n    <label for="name">名前</label>\n    <input type="text" name="name" id="name">\n    <button id="submit">送信</button>\n</form>\n\n<script>\n    document.getElementById('submit').addEventListener('click', function(event) {\n        event.preventDefault();\n        const formData = new FormData(document.getElementById('company'));\n\n        fetch('/', {\n            method: 'POST',\n            headers: {\n                'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content'),\n                'Accept': 'application/json',\n                'X-Requested-With': 'XMLHttpRequest'\n            },\n            body: formData\n        })\n        .then(response => {\n            if (response.ok) {\n                return response.json();\n            } else {\n                throw new Error("通信に失敗しました。");\n            }\n        })\n        .then(data => {\n            console.log(data);\n        })\n        .catch(error => {\n            console.error('エラー:', error);\n        });\n    });\n</script>	config/routes.rb	Rails.application.routes.draw do\n  get "/" => "test#index"\n  post "/" => "test#post"\nend	上の例では、入力フォームから値を受け取り、コントローラーは入力フォームの値をjson形式でビューに返し、コンソールログに表示している例となります。<br><br>このページではビューでの内容の説明は省略させていただきます。<br>Ajaxでのサーバーサイドへのデータ送信の記事はプログラミング基礎のJacascriptを参考にしてください。<br><br>まず、config.routes.rbで<br><div class="code-block">post "/" =&gt; "test#post"</div><br>と入力することでビューからpostメソッドで送信されてくると、TestControllerのpostメソッドが動作するようになっています。<br>コントローラーで入力フォームからの値を受け取るには<br><div class="code-block">params[":インプットのname属性"]</div><br>の形式で記入します。<br><br>json形式でビューに値を返すときは<br><div class="code-block">render json: {json形式}</div><br>のように記入します。	11
233	2024-08-16 05:33:26	2024-08-16 05:38:43	1	3	ボタンなどのブラウザでの標準の動作を停止する	\N	HTML	<form id="test">\n    <button id="submit">送信</button>\n</form>	Javascript	const submitButton = document.getElementById('submit')\nsubmitButton.addEventListener('click', function(e){\n    e.preventDefault()\n})	\N	\N	上の例では、submitをクリックすると本来はページ移動が発生しますが、その動作を行わないようにしています。<br><br>ブラウザでの標準の動作を停止させるには、addEventListenerの関数内に<br><div class="code-block">引数.preventDefault()</div><br>と記入します。<br>addEventListenerの関数の引数は、ボタンをクリックした動作が代入されています。	23
234	2024-08-16 06:19:22	2024-08-21 05:18:35	1	3	Ajaxでサーバーサイドにデータを送る	\N	Javascript	fetch('/', {\n    method: 'POST',\n    headers: {\n        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content'),\n        'Accept': 'application/json',\n        'X-Requested-With': 'XMLHttpRequest'\n    },\n    body: {name: 'test'}\n})\n.then(response => {\n    if (response.ok) {\n        return response.json();\n    } else {\n        throw new Error("通信に失敗しました。");\n    }\n})\n.then(data => {\n    console.log(data);\n})\n.catch(error => {\n    console.error('エラー:', error);\n});	\N	\N	\N	\N	上の例は、自分のドメインのルートにPOSTメソッドで{name: 'test'}のjson型のデータを送っている例です。<br><br><div class="code-block">fetch('データを送るURL', {<br>    method: 'データを送るメソッド',<br>    headers: {<br>        ヘッダーの内容<br>    },<br>    body: データを送る内容をjson形式で記入<br>})</div><br>のように記入します。<br>サーバーサイドから返ってきたデータに対して処理を行うときは<br><div class="code-block">.then(サーバーサイドから受け取った値を代入する変数 => {<br>    処理<br>})<br>.catch( サーバーサイドからのエラーメッセージを代入する変数 => {<br>   エラー時の処理<br>})</div><br>の形式で記入します。<br>.thenは複数つなげて記入することもできます。<br><br>上の例では、1度目のthenで<br><div class="code-block">.then(response => {<br>    if (response.ok) {<br>        return response.json();<br>    } else {<br>        throw new Error("通信に失敗しました。");<br>    }<br>})</div><br>とし、サーバーサイドから正しくデータが返ってきたときにreturn response.json()でサーバーサイドから受け取った値をjson形式にしています。<br><br>次のthenでは引数をdataにし、コンソールログに出力しています。<br>ここでのdataには前のthenでの戻り値であるresponse.json()が代入されています。<br><br>	24
235	2024-08-16 06:44:06	2024-08-16 06:46:48	4	19	モデル同士の紐づけ	\N	db/migrate/内にできたファイル	class CreateEmployees < ActiveRecord::Migration[7.1]\n  def change\n    create_table :employees do |t|\n      t.text :name, null: false\n      t.integer :age\n      t.text :post, null: false\n      t.text :address, null: false\n      t.text :phone, null: false\n      t.references :company, null: false, foreign_key: true\n      t.timestamps\n    end\n  end\nend	app/models/employee.rb	class Employee < ApplicationRecord\n  belongs_to :company\n\n  validates :name, presence: true\n  validates :post, presence: true\n  validates :address, presence: true\n  validates :phone, presence: true\nend	app/models/company.rb	class Company < ApplicationRecord\n  has_many :employee\n\n  validates :name, presence: true\nend	上の例は、employeeが多、companyが1の関係でリレーションを設定している例です。<br><br>db/migrate/にできたファイルには多側のモデルに(リレーションのフィールドを持っている側の1対1時も)<br><div class="code-block">t.references :1側の紐づくモデル, foreign_key: true</div><br>の形式で記入し、app/models/多側のモデルには<br><div class="code-block">belongs_to :1側のモデル</div><br>の形式で記入し、app/models/1側のモデルには<br><br><div class="code-block">has_many: 多側のモデルs</div><br>の形式で記入してください。<br>has_many: 多側のモデルsの部分は複数となるためsがつく点に注意してください。<br><br>また、1対1の紐づき時には<br><div class="code-block">has_one: モデル</div><br>と記入してください。	4
237	2024-08-16 07:08:07	2024-08-16 07:17:34	4	19	データの追加	\N	app/controllers/test_controller.rb	class TestController < ApplicationController\n  def index\n    Company.create(name: 'test', founding_date: '2024-8-16')\n  end\nend	\N	\N	\N	\N	ORMはコントローラーのメソッド内に記入することで、アクセスされたときに動作させることができます。<br>上の例ではアクセス時にCompanyモデルにデータを追加しています。<br><br>データの追加は<br><div class="code-block">モデル.create(フィールド名: 値)</div><br>の形式で記入します。<br><br>また、<br><div class="code-block">変数 = モデル.new(フィールド名: 値)<br>変数.save</div><br>と記入しても同じ内容となります。<br><br>データ追加時にはidというフィールドが自動で作成されますが、こちらは重複のない値が連番でふられ、追加されたデータを一意に見分けるためのフィールドです。	5
238	2024-08-16 07:21:58	2024-08-16 07:26:29	4	19	データの取得全件	\N	app/controllers/test_controller.rb	class TestController < ApplicationController\n  def index\n    @companies = Company.all\n  end\nend	app/views/test/index.html.erb	<% @companies.each do |company|%>\n    <div><%= company['name'] %></div>\n<% end %>	\N	\N	上の例では、Companyモデルのすべてのデータを取得して変数に代入し、繰り返し処理でビューに表示させています。<br><br>モデルのデータを取得するには<br><div class="code-block">モデル.all</div><br>の形式で記入します。<br><br>ビュー側では、リストの中にハッシュが入ったような形式になっているためeachで単体のデータになるように繰り返し処理を行い、<br><div class="code-block">eachで代入されている変数['フィールド名']</div><br>の形式でデータを取得します。	6
239	2024-08-16 07:30:31	2024-08-16 07:33:10	4	19	idが一致するデータを取得する	\N	app/controllers/test_controller.rb	class TestController < ApplicationController\n  def index\n    @company = Company.find(1)\n  end\nend	app/views/test/index.html.erb	<%= @company['name'] %>	\N	\N	idが一致するデータを取得したいときは、<br><div class="code-block">モデル.find(id)</div><br>の形式で記入します。<br><br>findで取得したデータをビューで表示するときはデータが1件のみになるので繰り返し処理をせずに<br><div class="code-block">変数['フィールド名']</div><br>で取得できます。	7
240	2024-08-16 13:41:40	2024-08-16 13:48:42	4	19	フィールドの値が一致するデータを取得する(1つだけ)	\N	app/controllers/test_controller.rb	class TestController < ApplicationController\n  def index\n    @company = Company.find_by(name: "test")\n  end\nend	app/views/test/index.html.erb	<%= @company['name'] %>	\N	\N	特定のフィールドの値が一致するデータを取得するときは<br><div class="code-block">モデル.find_by(フィールド名: 値)</div><br>の形式で記入します。<br><br>find_byメソッドでは一致するデータが複数あるときは最初の一件のみ取得します。<br><br>上の例ではnameフィールドがtestのデータを取得しています。	8
241	2024-08-16 14:11:06	2024-08-22 15:34:44	4	19	条件に一致するデータを取得する(複数)	\N	app/controllers/test_controller.rb	class TestController < ApplicationController\n  def index\n    @persons = Person.where(age: 20)\n  end\nend	app/views/test/index.html.erb	<table>\n    <th>名前</th>\n    <th>年齢</th>\n    <% @persons.each do |person| %>\n        <tr id="<%= person['id'] %>">\n            <td><%= person['name'] %></td>\n            <td><%= person['age'] %></td>\n        </tr>\n    <% end %>\n</table>	\N	\N	条件に一致する複数のデータを取得したいときは<br><div class="code-block">モデル.where(フィールド: 値)</div><br>の形式で記入します。<br><br>whereメソッドで取得時は複数のデータとなるため、each文で繰り返し処理を行う必要があります。<br>上の例ではテーブルの行のidをデータのidにしてそれぞれname属性、age属性を表として表示しています。<br><br>whereメソッドでは一致以外にも以上、以下などでも設定することができ、<br><div class="code-block">@persons = Person.where("age &gt;= 20")</div><br>のように記入するとPersonモデルのageフィールドが20以上のデータを取得することができます。<br><br>変数の値と比べてデータを取得したいときは<br><div class="code-block">age = 20<br>@persons = Person.where("age &gt;= ?", age)<br></div><br>のように記入してください。<br>age &gt;= ? の?の部分にwhereメソッドの第2引数のageの値が代入されて処理が行われます。<br><br>また、whereメソッドでは複数の条件に一致もしくはどれかの条件に一致しているデータを取得することもできます。<br><div class="code-block">row = 20<br>name = 'test'<br>@persons = Person.where("age &gt;= ? and name == ?", row, name)<br></div><br>のように記入するとageフィールドが20以上でnameフィールドがtestのデータを取得することができます。<br>whereメソッド内では?が複数あるときは第2引数から順番に当てはめられていきます。<br><br><div class="code-block">row = 20<br>high = 30<br>@persons = Person.where("age &lt;= ? or age &gt;= ?", row, high)<br></div><br>のように記入するとageフィールドが20以下もしくは30以上のデータを取得することができます。	9
242	2024-08-16 14:36:57	2024-08-16 14:43:27	4	19	データの更新	\N	app/controllers/test_controller.rb	class TestController < ApplicationController\n  def index\n    person = Person.find(1)\n    person.update(name: 'test2', age: 25)\n  end\nend	\N	\N	\N	\N	データの更新時は、まず更新するデータを変数に代入し、<br><div class="code-block">データを代入した変数.update(フィールド名: 値)</div><br>の形式で記入します。<br><br>allやwhereメソッドで複数のデータを変数に代入している場合は、変数に代入されたすべてのデータが更新されます。<br><br>また、findもしくはfind_byメソッドで取得しておりデータが1つだけの時は<br><div class="code-block">person = Person.find(1)<br>person.name = 'test2'<br>person.age = 25<br>person.save</div><br>のように書くこともできます。	10
243	2024-08-16 16:10:30	2024-08-16 16:24:48	4	19	データの削除	\N	app/controllers/test_controller.rb	class TestController < ApplicationController\n  def index\n    person = Person.find(1)\n    person.destroy\n  end\nend	\N	\N	\N	\N	データの削除時はデータを変数に代入し、<br><div class="code-block">データを代入した変数.destroy</div><br>もしくは<br><div class="code-block">データを代入した変数.delete</div><br>と記入します。<br><br>updateとは違い、whereメソッドなどで複数のデータが入っているときはエラーとなります。<br><br>destroyは<br>1対多の1側を削除時に紐づいた多側のデータも削除される<br><br>deleteは<br>1側のデータを削除時にテーブルと紐づいているフィールドの値がそのままになるので整合性が崩れる<br>コールバックが呼び出されない<br><br>の違いがあります。<br>ですので多側のデータの削除でコールバックがないときのみdeleteを使用するようにしてください。<br><br>迷ったらdestroyを使用するのが安全です。<br><br>コールバックに関してはまた別のページで記載します。	11
244	2024-08-16 16:32:26	2024-08-16 16:40:14	4	19	データを昇順、降順に並び変える	\N	app/controllers/test_controller.rb	class TestController < ApplicationController\n  def index\n    @persons = Person.all.order(age: :asc, name: :asc)\n  end\nend	\N	\N	\N	\N	データの並べ替えは<br><div class="code-block">データ.order(フィールド: :ascもしくはdesc)</div><br>の形式で記入します。<br>ascは昇順、descは降順となっており、,区切りで追加することで第一引数のフィールドの値が同じだったときの並べ替えを追加することができます。<br><br>上の例ではPersonモデルのデータを全件取得し、ageフィールドの昇順で並び替え、ageフィールドが同じだったときはその中でnameフィールドを昇順で並び変えています。<br><br><div class="code-block">Person.all.order('age, name')</div><br>と記入しても同じ内容となります。<br><br>この書き方で降順にしたいときは<br><div class="code-block">Person.all.order('age desc, name desc')</div><br>のように記入してください。	12
245	2024-08-16 16:45:33	2024-08-16 16:52:48	4	19	指定した範囲のデータを取得する	\N	app/controllers/test_controller.rb	class TestController < ApplicationController\n  def index\n    @persons = Person.all.offset(5).limit(5)\n  end\nend	\N	\N	\N	\N	指定した件数分のデータを取得するには<br><div class="code-block">データ.limit(件数)</div><br>の形式で記入します。<br>例えば<br><div class="code-block">データ.limit(5)</div><br>と記入すると最初の5件のみ取得します。<br><br>取得するデータの先頭をずらしたいときは<br><div class="code-block">データ.offset(先頭にしたい要素番号)</div><br>の形式で記入します。<br><div class="code-block">データ.offset(5)</div><br>と記入すると6件目以降のデータのみ取得します。<br>要素番号は0から始まるので注意してください。<br><br>上の例ではoffsetでスタートを6件目にし、そこから先頭の5件を取得しているので6～10件目のデータを取得しています。	13
246	2024-08-16 17:03:41	2024-08-16 17:08:00	4	19	スコープの定義	\N	app/models/person.rb	class Person < ApplicationRecord\n  scope :adult, -> {all.where('age >= 20').order('age')}\nend	app/controllers/test_controller.rb	class TestController < ApplicationController\n  def index\n    @persons = Person.adult\n  end\nend	\N	\N	モデルのクラス内に<br><div class="code-block">scope :スコープ名, -> {処理内容}</div><br>の形式で記入することでスコープとして定義したものが対象のクラスでメソッドのように使用することができるようになります。<br><br>上の例ではadultというスコープを定義し、コントローラーで使用しています。<br>定義時にスコープ名の末尾の,を書き忘れないように注意してください。	14
247	2024-08-16 17:38:23	2024-08-22 06:20:56	4	19	多側から1側のデータを取得する	\N	app/models/company.rb	class Company < ApplicationRecord\n  has_many :employees\nend	app/models/employee.rb	class Employee < ApplicationRecord\n  belongs_to :company\nend	app/views/test/index.html.erb	<% @employees.each do |employee| %>\n    <div><%= employee.company['name'] %></div>\n<% end %>	この例では1側をcompany、多側をemployeeとしてリレーションを設定し、Employeeモデルのデータから紐づいたCompanyモデルのnameフィールドのデータを取得しています。<br><br>また、Employeeモデルのマイグレーションファイルでは<br><div class="code-block">class CreateEmployees &lt; ActiveRecord::Migration[7.1]<br>  def change<br>    create_table :employees do |t|<br>      t.text :name, null: false<br>      t.references :company, null: false, foreign_key: true<br>      t.timestamps<br>    end<br>  end<br>end</div><br>としてcompanyフィールドをリレーション用のフィールドにしています。<br><br>コントローラーでは@employeeにEmployee.allを代入してください。<br><br>1側のデータ取得時は、<br><div class="code-block">モデル.リレーションのフィールド['取得したいフィールド']</div><br>の形式で記入してください。	15
49	2024-06-27 16:51:32	2024-06-27 16:58:30	1	5	文字列の結合	teststring\nteststring\ntest1	PHP	<?php\n   $a = 'test';\n\n   echo '<div>test' . 'string</div>';\n   echo '<div>' . $a . 'string</div>';\n   echo '<div>test' . 1 .'</div>';	\N	\N	\N	\N	PHPでは.を使用して文字列の結合を行うことができます。<br>数値との結合時には.の前後に半角スペースを入れないとエラーとなるので気を付けてください。	7
50	2024-06-28 02:48:32	2024-06-28 02:49:48	1	5	文字列内での変数展開	teststring	PHP	<?php\n   $a='string';\n\n   echo "test{$a}";	\N	\N	\N	\N	文字列を囲うのを''(シングルクォート)ではなく""(ダブルクォート)に変更し、{$変数名}の形式で文字列に混ぜることで文字列内で変数を展開することができます。	8
248	2024-08-16 17:55:04	2024-08-22 15:47:49	4	19	1側から多側のデータを取得する	\N	app/controllers/test_controller.rb	class TestController < ApplicationController\n  def index\n    @companys = Company.all\n  end\nend	app/views/test/index.html.erb	<% @companys.each do |company| %>\n  <% company.employees.each do |employee| %>\n      <div><%= employee.name %></div>\n  <% end %>\n<% end %>	\N	\N	リレーションはCompanyが1側、Employeeが多側としています。<br><br>1側から多側のデータを取得時は紐づいているモデルが複数になるため繰り返し処理をする必要があります。<br><div class="code-block">1側のモデルのデータ.多側のリレーションs</div><br>の中には紐づいた多側のデータが入っているためこれに対して繰り返し処理を行ってください。<br>1側から多側のデータ取得時は多側のリレーションの末尾のsを忘れないようにしてください。<br><br>多側のリレーション名はapp/models/company.rbでのhas_manyとして使用しているemployeesを使用します。	16
249	2024-08-16 18:07:05	2024-08-16 18:11:06	4	19	トランザクション	\N	app/controllers/test_controller.rb	class TestController < ApplicationController\n  def index\n    ActiveRecord::Base.transaction do\n      company = Company.create(name: 'test')\n\n      raise ActiveRecord::Rollback\n    end\n  end\nend	\N	\N	\N	\N	トランザクションを使用すると<br><div class="code-block">ActiveRecord::Base.transaction do<br>    raise ActiveRecord::Rollback<br>end</div><br>の中のraise ActiveRecord::Rollbackの部分が動作するとデータベースのデータがActiveRecord::Base.transaction doの前の状態に戻ります。<br><br>トランザクションは同一のコントローラー内で複数のモデルの操作などを行うときに使用し、例外などの中にraise ActiveRecord::Rollbackを記入しておくことで不都合が起きた時にActiveRecord::Base.transaction do内のすべてのデータベースの変更を取り消すことができます。	17
250	2024-08-20 17:07:38	2024-08-20 17:12:53	4	18	表示するテンプレートの設定	\N	app/controllers/test_controller.rb	class TestController < ApplicationController\n    layout "user"\n\n    def index\n    end\nend	app/views/layout/user.html.erb	<!DOCTYPE html>\n<html>\n  <head>\n    <title>タイトル</title>\n    <meta name="viewport" content="width=device-width,initial-scale=1">\n    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">\n    <meta http-equiv="Content-Style-Type" content="text/css">\n    <meta name="viewport" content="width=device-width,initial-scale=1.0,minimum-scale=1.0">\n    <%= csrf_meta_tags %>\n    <%= csp_meta_tag %>\n\n    <%= stylesheet_link_tag "application", media: "all", "data-turbo-track": "reload" %>\n    <%= javascript_importmap_tags %>\n  </head>\n\n  <body>\n    <%= yield %>\n  </body>\n</html>	app/views/test/index.html.erb	<div>test</div>	コントローラーのクラス内で<br><div class="code-block">layout レイアウト名</div><br>の形式で記入すると使用するテンプレートを変更することができます。<br>レイアウトはapp/view/layout内のテンプレートのファイル名から拡張子を取り除いたものを記入してください。<br><br>上の例はuserテンプレートを使用してapp/views/test/index.html.erbを表示させています。	12
251	2024-08-20 17:20:26	2024-08-20 17:26:45	4	18	指定したビューを表示させる	\N	app/controllers/test_controller.rb	class TestController < ApplicationController\n  def index\n    render "index2"\n  end\nend	\N	\N	\N	\N	デフォルトではメソッド名のビューが表示されますが、メソッド内に<br><div class="code-block">render "ビュー名"</div><br>の形式で記入することで指定したビューを表示させることができます。<br><br>また、クラス名とは別のフォルダのビューを表示させることもでき、その場合は<br><div class="code-block">render "viewsからみたパス/ビュー名"</div><br>の形式で記入します。<br><br><div class ="code-block">render "test2/test2"</div><br>とした場合はapp/views/test2/test2.html.erbが表示されます。	13
252	2024-08-20 17:30:39	2024-08-20 17:50:37	4	18	コールバック	\N	app/controllers/test_controller.rb	class TestController < ApplicationController\n  before_action :test\n  def index\n  end\n\n  def test\n    @test = 'test'\n  end\nend	\N	\N	\N	\N	コールバックとは、特定のタイミングでメソッドを動作させる機能のことです。<br>コールバックには種類があり、<br><br>before_action メソッドの実行前(認証、特定のパラメーターの設定に使用)<br>after_action メソッドの実行後(ログなどに使用)<br>around_action メソッドの実行前と実行後(トランザクションなどに使用)<br>skip_before_action 指定したメソッドでbefore_actionを使用しない<br>skip_after_action 指定したメソッドでafter_actionを使用しない<br>prepend_before_action before_actionの前に実行<br>prepend_after_action after_actionの前に実行<br><br>等があります。<br><br>コールバックはクラス内で<br><div class="code-block">コールバック名 :メソッド名</div><br>の形式で記入してください。<br><br>上の例ではindexメソッドの前にtestメソッドを実行して@testを定義しています。<br><br>skip_before_action、skip_after_actionは<br><div class="code-block">before_action :test2<br>skip_before_action :test2, only: [:test]</div><br>のように記入するとtestメソッドではbefore_actionで指定しているtest2メソッドが実行されなくなります。<br>また、only: 内の配列を,区切りで記入することで複数のメソッドに適用することができます。<br>	14
253	2024-08-20 18:14:43	2024-08-21 05:52:09	4	18	リダイレクト	\N	config/routes.rb	Rails.application.routes.draw do\n  get "/" => "test#index"\n  get "test" => "test2#index"\nend	app/controllers/test_controller.rb	class TestController < ApplicationController\n  def index\n    redirect_to "/test"\n  end\nend	\N	\N	リダイレクトを行うことで、他のurlのメソッドに処理を渡すことができます。<br><div class="code-block">redirect_to "config/routes.rbで定義している転送したいパス"</div><br>の形式で記入することでconfig/routes.rbのget "転送したいパス"で指定しているメソッドを実行することができます。<br><br>上の例ではTestControllerのindexメソッドが実行されるとリダイレクトされ、config/routesでget "test"で定義されているTest2クラスのindexメソッドが実行されるようになっています。	15
254	2024-08-20 20:31:34	2024-08-20 20:35:39	1	17	||= 演算子	test	ruby	test ||= 'test'\ntest ||= 'test2'\n\nputs test	\N	\N	\N	\N	||=演算子を使用することで、対象の変数が未定義、nil、falseのどれかの時のみ値を代入することができます。<br><br>上の例では1行目ではtestが未定義なので'test'が代入されますが、2行目の時点ではすでにtestが代入されているため代入が行われません。	27
256	2024-08-20 20:38:00	2024-08-20 20:40:18	1	17	if演算子	2	ruby	t = 1\ntest=2 if t==1\n\nputs test	\N	\N	\N	\N	if演算子を使用することで、条件に一致しているときのみ処理を行うことができます。<br><br><div class="code-block">処理 if 条件</div><br>の形式で記入してください。<br><br>上の例では変数に値を代入していますが、関数を記入すると関数を実行することもできます。	28
257	2024-08-20 20:52:15	2024-08-20 20:57:05	4	18	ヘルパーメソッド	\N	app/controllers/test_controller.rb	class TestController < ApplicationController\n  helper_method :helper\n\n  def helper\n    "helper"\n  end\n\n  def index\n    @test = helper\n  end\nend	\N	\N	\N	\N	ヘルパーメソッドを使用することでインスタンス内の他のメソッドが共有するプロパティを定義することができます。<br>クラス内で<br><div class="code-block">helper_method :メソッド名</div><br>の形式で記入します。<br><br>ヘルパーメソッドでは最終行が戻り値となるため、上の例では@testには"helper"が代入されます。	16
259	2024-08-20 21:32:27	2024-08-20 21:32:39	4	18	セッション	\N	app/controllers/test_controller.rb	class TestController < ApplicationController\n  def index\n    session[:test] = 'test'\n  end\nend	\N	\N	\N	\N	セッションを使用することでブラウザを閉じるまでの間プロジェクト内で値を共有することができます。<br>セッションは<br><div class="code-block">session[:シンボル]</div><br>の形式で記入し、ログイン情報などを代入するのに使用します。	17
260	2024-08-21 05:23:20	2024-08-21 05:30:03	4	18	全てのコントローラーで使用できるメソッドなどを定義する	\N	app/controllers/application_controller	class ApplicationController < ActionController::Base\n  before_action :set_test\n\n  def set_test\n    @test = "test"\n  end\nend	\N	\N	\N	\N	<div class="code-block">rails generate コントローラー名</div><br>で作成したコントローラーはすべてApplicationControllerクラスを継承しているため、このクラスを変更することですべてのコントローラーで使用できるメソッドを定義することなどができます。<br><br>上の例ではApplicationControllerクラスにset_testメソッドを定義し、その中で@testを定義し、before_actionでメソッドの動作する前に呼び出すことですべてのコントローラー、ビューで使用できる@testを定義しています。	18
261	2024-08-21 05:36:25	2024-08-21 05:39:16	4	18	任意のコントローラーすべてで使用できるメソッドなどを定義する	\N	app/controllers/test	class Test < ApplicationController\n  before_action :set_test\n\n  def set_test\n    @test = "test"\n  end\nend	app/controllers/test_controller.rb	class TestController < Test\n  def index\n  end\nend	\N	\N	ApplicationControllerを継承させた独自のクラスを作成し、コントローラーにそのクラスを継承させることでそのクラスを継承するクラスでの共通の処理を記入することができます。<br><br>上の例ではApplicationControllerクラスを継承させたTestクラスを作成し、Testクラスを継承させたクラス共通の処理を記入しています。	19
262	2024-08-21 06:22:37	2024-08-21 06:35:12	4	18	リダイレクト先に変数を渡す	\N	app/controllers/test_controller.rb	class TestController < ApplicationController\n  def index\n    flash[:test] = "test"\n    redirect_to "/test"\n  end\nend	\N	\N	\N	\N	flashを使用することでリダイレクト先に値を渡すことができます。<br>flashは1度のリダイレクトまでのみ値を保持できるようになっています。<br>もう一つ先のリダイレクト先まで値を渡したいときはリダイレクト先で<br><div class="code-block">flash.keep</div><br>と記入してください。<br><br>flashは<br><div class="code-block">flash[:シンボル名]</div><br>の形式で定義します。<br><br>また、1回でもリダイレクトすると消えるようにしたいときは<br><div class="code-block">flash.now[:シンボル名]</div><br>と記入してください。<br><br>また、<br><div class="code-block">redirect_to "リダイレクトするパス", シンボル名: 値</div><br>の形式でもリダイレクト先に値を渡すことができます。<br><br>ビューにフラッシュを表示させたいときは<br><div class="code-block">&lt;%= flash[:シンボル名] %&gt;</div><br>の形式で記入してください。	20
263	2024-08-21 06:48:25	2024-08-21 07:02:02	4	19	パスワードをハッシュ化させて保存する	\N	db/migrate/内にできたファイル	class CreateUsers < ActiveRecord::Migration[7.1]\n  def change\n    create_table :users do |t|\n      t.string :username\n      t.string :password_digest\n\n      t.timestamps\n    end\n  end\nend	app/models/user.rb	class User < ApplicationRecord\n  has_secure_password\nend	\N	\N	パスワードはそのままデータベースに保存すると漏洩したときなどのリスクがあるためハッシュ化を行って保存します。<br>ハッシュ化とは復号がほぼ不可能な暗号化のことです。<br><br>パスワードを保存するフィールド名は<br><div class="code-block">password_digest</div><br>にしてください。<br>password_digestはハッシュ化、認証に使用する特殊なフィールドとなっています。<br><br>password_digestフィールドがある状態でモデルを定義しているファイル内に<br><div class="code-block">has_secure_password</div><br>と入力することで、保存時にpasswordフィールドとして渡された値がハッシュ化されてpassword_digestフィールドに保存されます。<br><br>上の例ではUserモデルにusernameとpassword_digestフィールドを定義しています。<br><br>上の例にユーザーを追加するときは<br><div class="code-block">user = User.new(username: "ユーザー名", password: "パスワード")<br>user.save</div><br>のような形式で記入してください。	18
116	2024-06-29 17:20:19	2024-06-29 17:23:17	1	4	繰り返し処理(for文)	1\n2\n3	Python	test = [1, 2, 3]\n\nfor value in test:\n    print(value)	\N	\N	\N	\N	for文は、リストや辞書などの繰り返し処理に使用される文です。<br><div class="code-block">for 代入する変数 in 使用する変数等:<br>   繰り返し時の処理</div><br>の形式で記入します。<br><br>繰り返しのたびに使用する変数などの値が順番に代入する変数に代入されて処理が行われます。	11
264	2024-08-21 07:24:45	2024-08-21 08:12:58	4	19	ユーザー認証	\N	app/controllers/login_controller.rb	class LoginController < ApplicationController\n  def index\n  end\n\n  def post\n    user = User.find_by(username: params[:username])\n    if user&.authenticate(params[:password])\n        session[:username] = user.username\n        redirect_to test_path , notice: "ログインしました"\n    else\n        flash.now[:notice] = "ユーザー名またはパスワードが正しくありません"\n        render :index, status: :unprocessable_entity\n    end\n  end\n\n  def delete\n    session.delete(:username)\n    redirect_to login_path, notice: "ログアウトしました"\n  end\nend	app/controllers/test_controller.rb	class TestController < ApplicationController\n  before_action :authenticate_user\n\n  def authenticate_user\n    @current_user ||= User.find_by(username: session[:username]) if session[:username]\n    redirect_to login_path, alert: "ログインが必要です" unless @current_user\n  end\n\n  def index\n  end\nend	config/routes.rb	Rails.application.routes.draw do\n  get 'login', to: 'login#index'\n  post 'login', to: 'login#post'\n  delete 'login', to: vie'login#delete'\n\n  get "test" => 'test#index'\nend	上の例では、ログインしていない状態ではログインページにリダイレクトされるようにしている例です。<br><br>LoginControllerクラスのpostメソッドでは、userにUserモデルのusernameがビューから送信されてきたusernameのものを代入し、<br><div class="code-block">if user&.authenticate(params[:password])</div><br>の部分でuserのデータの存在確認、ビューから送られてきたパスワードが正しいかの確認を行っています。<br>.authenticate(引数)は引数をハッシュ化し、モデルのpassword_digestフィールドと照合を行っています。<br><br>else時の<br><div class="code-block">render :index, status: :unprocessable_entity</div><br>のstatus: :unprocessable_entityはHTTPステータスコード422(バリデーションエラーなどの理由でリソースの状態が正しくない)を返すという意味です。<br><br>deleteメソッドでは<br><div class="code-block">session.delete(:username)</div><br>としてsession[:username]を削除することでログアウト状態にしています。<br><br>TestControllerクラスでは<br><div class="code-block">before_action :authenticate_user</div><br>でメソッドの実行前にauthenticate_userメソッドを実行し、ログイン状態の確認を行うようにしています。<br><br>authenticate_userメソッドでは、<br><div class="code-block">@current_user ||= User.find_by(username: session[:username]) if session[:username]</div><br>とし、<br><div class="code-block">@current_user ||=</div><br>は@current_userが未定義、nil、false時にはその後ろの部分を代入するようにしています。<br>このようにすることでセッションのキャッシュを再利用することができます。<br><div class="code-block">if session[:username]</div><br>はsession[:username]が定義済みでnil、false以外が代入されているときに<br><div class="code-block">@current_user ||= User.find_by(username: session[:username])</div><br>を実行するという意味になります。<br><br><br><div class="code-block">redirect_to login_path, alert: "ログインが必要です" unless current_user</div><br>の<div class="code-block">unless @current_user</div><br>は@current_userが未定義、nil、false時にはその前の<br><div class="code-block">redirect_to login_path, alert: "ログインが必要です"</div><br>を実行するという内容になっています。	19
265	2024-08-21 16:32:22	2024-08-21 16:36:44	4	18	ビューでJavascriptファイルを読み込む	\N	app/javascript/controllers/main.js	import { test } from "controllers/test";\n\nconsole.log(test);	app/javascript/controllers/test.js	export test = "test";	app/views/test/index.html.erb	<%= javascript_import_module_tag "controllers/main" %>	Javascriptファイルはapp/javascript/controllersフォルダ内に置き、ビューから読み込むときは、<br><div class="code-block">&lt;%= javascript_import_module_tag "app/javascript/をルートとしてみた時のパス" %&gt;</div><br>と記入してください。<br><br>読み込んだJavascriptファイルからモジュールなどをインポートするときのパスもapp/javascript/をルートとしてみた時のパスを記入するようにしてください。<br><br>	21
267	2024-08-21 16:47:59	2024-08-21 16:53:19	1	3	モジュール	\N	main.js	import { test_const, test_func } from "./test_file";\n\nconsole.log(test_const);\ntest_func();	test_file.js	export const test_const = "const";\n\nexport function test_func() {\n    console.log('func');\n}	\N	\N	モジュールとは、関数、定数など定義しているファイルとなります。<br>モジュールで定義した関数などの前にexportを記入することで、モジュールを読み込んだファイルで使用することができるようになります。<br><br>読み込み側では、<br><div class="code-block">import { 読み込む関数など } from "パス(拡張子不要)";</div><br>の形式で記入してください。<br><br>上の例ではmain.jsで同じフォルダにあるtest_file.jsを読み込み、定数test_constと関数test_funcを使用しています。<br>	25
268	2024-08-21 17:16:25	2024-08-21 17:29:03	6	19	特定のフィールドのデータのみ取得する	\N	app/controllers/test_controller.rb	class TestController < ApplicationController\n  def index\n    @test = Person.pluck(:name, :age)\n  end\nend	app/views/test/index.html.erb	<table>\n  <thead>\n    <th>名前</th>\n    <th>年齢</th>\n  </thead>\n\n  <tr>\n    <% @test.each do |name, age| %>\n      <td><%= name %></td>\n      <td><%= age %></td>\n    <% end %>\n  </tr>\n</table>	\N	\N	上の例は、Personモデルのname、ageフィールドのデータのみを取得しています。<br><br>特定のフィールドのデータのみを取得するには、<br><div class="code-block">モデル.pluck(フィールド)</div><br>の形式で記入してください。<br>フィールドは,区切りで複数指定することもできます。<br><br>フィルタリングなどをしたデータの特定のフィールドを取得したいときは<br><div class="code-block">モデル.where(条件).pluck(フィールド)</div><br>のように記入してください。<br>where以外のメソッドの後に使用することもできます。<br><br>また、上の例では、name、ageの2つのフィールドのデータを取得しているため、<br><div class="code-block">&lt;% @test.each do |name, age| %&gt;</div><br>としてそれぞれ変数に代入しています。<br>	1
270	2024-08-21 17:39:10	2024-08-21 17:39:10	4	19	最初もしくは最後のデータのみを取得する	\N	app/controllers/test_controller.rb	class TestController < ApplicationController\\\\r\n  def index\\\\r\n    @first = Person.where('age >= 20').first\\\\r\n    @last = Person.where('age >= 20').last\\\\r\n  end\\\\r\nend	\N	\N	\N	\N	最初のデータのみを取得するときは、\\\\r\n<div class="code-block">モデル.first</div>\\\\r\nと記入します。\\\\r\n\\\\r\n最後のデータのみを取得するときは\\\\r\n<div class="code-block">モデル.last</div>\\\\r\nと記入します。\\\\r\n\\\\r\n上の例ではPersonモデルのageフィールドが20以上の最初と最後の一件を取得しています。	21
271	2024-08-21 17:47:11	2024-08-21 17:50:20	4	19	グルーピングを行う	\N	app/controllers/test_controller.rb	class TestController < ApplicationController\n  def index\n    @test = Person.group(:age).count\n  end\nend	app/views/test/index.html.erb	<table>\n  <thead>\n    <th>年齢</th>\n    <th>人数</th>\n  </thead>\n\n  <% @test.each do |val| %>\n    <tr>\n      <td><%= val[0] %></td>\n      <td><%= val[1] %></td>\n    </tr>\n  <% end %>\n</table>	\N	\N	フィールドの値ごとにグルーピングするには、<br><div class="code-block">モデル.group(フィールド)</div><br>の形式で記入します。<br><br>上の例では、Personモデルを年齢ごとにグルーピングし、それぞれの件数を数えています。	22
272	2024-08-21 17:54:26	2024-08-21 17:54:42	4	19	データが存在するか確認する	\N	app/controllers/test_controller.rb	class TestController < ApplicationController\n  def index\n    @test = Person.where('age >= 20').exists?\n  end\nend	\N	\N	\N	\N	データが存在するか確認するには、<br><div class="code-block">モデル.exists?</div><br>と記入します。<br>データがある場合はtrue、ない場合はfalseとなります。<br><br>上の例では、Personモデルのageフィールドが20以上のデータが存在するか確認しています。	23
273	2024-08-21 18:05:40	2024-08-21 18:08:47	4	19	モデルのデータをまとめて削除する	\N	app/controllers/test_controller.rb	class TestController < ApplicationController\n  def index\n    Employee.where('id <= 10').delete_all\n    @test = Employee.count\n  end\nend	\N	\N	\N	\N	モデルのデータをまとめて削除するには、<br><div class="code-block">モデル.delete_all</div><br>と記入してください。<br><br>上の例では、Employeeモデルのidが20以下のデータを削除しています。	24
274	2024-08-21 20:12:29	2024-08-21 20:13:25	4	19	データの追加(紐づいているモデルあり)	\N	app/controllers/test_controller.rb	class TestController < ApplicationController\n  def index\n    Employee.create(name: 'test', company_id: 1)\n  end\nend	app/models/company.rb	class Company < ApplicationRecord\n  has_many :employees\nend	app/models/employee.rb	class Employee < ApplicationRecord\n  belongs_to :company\nend	紐づいているモデルのフィールドがあるモデルのデータを追加するには、<br><div class="code-block">モデル.create(モデルと紐づけているフィールド_id: 紐づけるモデルのid)</div><br>のように記入してください。<br><br>上の例では、作成するEmployeeモデルとCompanyモデルのidが1のデータを紐づけています。<br><div class="code-block">company = Company.find(1)<br>Employee.create(name: 'test', company: company)</div><br>としても同じ内容となります。	25
275	2024-08-22 06:41:12	2024-08-22 06:59:50	4	19	紐づいたモデルのデータをまとめて取得する	\N	app/controllers/test_controller.rb	class TestController < ApplicationController\n  def index\n    @companys = Company.includes(:employees).all\n  end\nend	app/views/test/index.html.erb	<table>\n  <thead>\n    <tr>\n      <th>id</th>\n      <th>名前</th>\n      <th>従業員id</th>\n      <th>従業員氏名</th>\n    </tr>\n  </thead>\n\n  <tbody>\n    <% @companys.each do |company| %>\n      <% company.employees.each_with_index do |employee, index| %> \n        <tr>\n          <% if index == 0 %>\n            <td rowspan="<%= company.employees.count %>"><%= company.id %></td>\n            <td rowspan="<%= company.employees.count %>"><%= company.name %></td>\n          <% end %>\n          <td><%= employee.id %></td>\n          <td><%= employee.name %></td>\n        </tr>\n      <% end %>\n    <% end %>\n  </tbody>\n</table>	\N	\N	includesを使用することで、紐づいたモデルのデータをまとめて取得し、パフォーマンスを改善することができます。<br>includesは記入しなくても動作しますが、紐づいたモデルのデータを取得するたびにクエリを発行してしまう(N+1)問題が発生します。<br>includesを使用すると、紐づいたデータをまとめて取得することができるため、N+1問題を解決することができます。<br><br>includesは<br><div class="code-block">モデル.includes(:取得するモデルのフィールド).その他のメソッド</div><br>のような形式で記入してください。<br>複数のモデルのフィールドを取得したいときはincludesの引数を,区切りで増やすことができます。<br><br>上の例ではCompanyを1側、Employeeを多側としてincludesを使用しています。<br><br>紐づいたモデルのさらに先の紐づいたデータを集計するときは、<br><div class="code-block">モデル.includes(取得するモデルのフィールド: :もう一つ先のフィールド)</div><br>のように記入します。<br><br>例えば、Employeeが1側でそれに多側のFamilyが紐づいていた場合は<br><div class="code-block">Company.includes(employees: :families).all</div><br>のようになります。<br><br>さらにFamilyが1側でそれに多側のFavoriteが紐づいていた場合は<br><div class="code-block">Company.includes(employees: {families: :favorites})</div><br>のように{}で入れ子にしていきます。	26
276	2024-08-22 07:03:11	2024-08-22 07:09:47	1	1	テーブル	<table>\n  <thead>\n    <tr><th>名前</th>\n    <th>年齢</th>\n  </tr></thead><thead>\n\n  </thead><tbody>\n    <tr>\n      <td>test</td>\n      <td>20</td>\n    </tr><tr>\n\n    </tr><tr>\n      <td>test2</td>\n      <td>30</td>\n    </tr>\n  </tbody>\n</table>	test.html	<table>\n  <thead>\n    <th>名前</th>\n    <th>年齢</th>\n  <thead>\n\n  <tbody>\n    <tr>\n      <td>test</td>\n      <td>20</td>\n    <tr>\n\n    <tr>\n      <td>test2</td>\n      <td>30</td>\n    </tr>\n  </tbody>\n</table>	\N	\N	\N	\N	テーブルとは表のことです。<br><br>&lt;thead&gt;部は、見出しを記入する部分となっています。<br>見出しの項目は<br><div class="code-block">&lt;th&gt;見出し&lt;th&gt;</div><br>の形式で記入します。<br><br>&lt;tbody&gt;部は、各行のデータを記入する部分となっています。<br>&lt;tr&gt;行のデータ&lt;/tr&gt;までが1行となっており、<br>&lt;td&gt;から&lt;/td&gt;<br>が1つのセルとなっています。	6
278	2024-08-22 07:22:53	2024-08-22 07:27:37	1	1	テーブルのセルを横に結合する	<table>\n  <thead>\n      <tr><th>名前</th>\n      <th>test</th>\n      <th>test</th>\n  </tr></thead>\n\n  <tbody>\n    <tr>\n      <td>test</td>\n      <td colspan="2" style="text-align: center">test</td>\n    </tr>\n  </tbody>\n</table>	test.html	<table>\n  <thead>\n      <th>名前</th>\n      <th>test</th>\n      <th>test</th>\n  </thead>\n\n  <tbody>\n    <tr>\n      <td>test</td>\n      <td colspan=2>test</td>\n    </tr>\n  </tbody>\n</table>	\N	\N	\N	\N	セルを横に結合するには、<br><div class="code-block">&lt;td colspan=結合するセル数&gt;セルの内容&lt;td&gt;</div><br>の形式で記入します。	8
280	2024-08-22 15:20:18	2024-08-22 15:27:55	4	19	紐づいたモデルのデータをフィルタリングして取得する	\N	app/controllers/test_controller.rb	class TestController < ApplicationController\n  def index\n    @companys = Company.includes(:employees).where(id: 1,employees: { id: 1..10, name: 'test' })\n  end\nend	\N	\N	\N	\N	紐づいたデータをフィルタリングしてから取得するには、<br><div class="code-block">モデル.includes(:紐づけるモデル).where(紐づけるモデル: {条件})</div><br>の形式で記入します。<br><br>上の例では、idが1のCompanyモデルとそれに紐づいていてidが1～10でnameがtestのEmployeeモデルのデータを取得しています。<br>1..10は1から10という意味になります。<br><br>実用時は、<br><div class="code-block">employees_filter = { id: 1..1, name: 'test' }<br>@companys = Company.includes(:employees).where(id: 7,employees: employees_filter)</div><br>のように紐づいたモデルのフィルタリングを変数に入れておいた方が見やすくなると思います。	27
281	2024-08-22 15:45:44	2024-08-22 16:18:04	4	19	どれかの条件に一致した紐づいたモデルのデータを取得する	\N	app/controllers/test_controller.rb	class TestController < ApplicationController\n  def index\n    @companys = Company.includes(:employees)\n      .where(employees: { id: 1..10 })\n      .or(Company.includes(:employees).where(employees: { name: 'test' }))\n  end\nend	\N	\N	\N	\N	どれかの条件に一致した紐づいたモデルのデータを取得するには、<br><div class="code-block">モデル.includes(:取得したいモデル).where(条件).or(もう一つのORM)</div><br>の形式で記入します。<br><br>上の例では、Companyモデルを全てと、それぞれに紐づいたidが1～10もしくはnameがtestのEmployeeモデルを取得しています。	28
175	2024-07-11 21:06:49	2024-07-11 21:22:27	4	15	Props	<div>1</div>\n<div>2</div>	src/index.js	import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport Test from './Test';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n    <Test test="1" test2="2"/>\n);\n\n\nreportWebVitals();	src/Test.js	export default function Test({test, test2){\n    return (\n        <div>\n            <div>{ test }</div>\n            <div>{ test2 }</div>\n        </div>\n    )\n}	\N	\N	Reactでは、root.renderでの関数読み込み時に、属性を付けることでそれを関数側に引数として渡すことができます。<br><br>src/Test.jsではTestの引数として、src/index.jsの属性を引数として受け取っています。<br><div class="code-block">root.render(<br>    &lt;Test test="1" test2="2"/&gt;<br>);</div><br>としているため、Test関数の引数はtest="1", test2="2"となります。<br><br>また、数値として渡したい場合は、値を{}でくくるようにしてください。<br>{}でくくることで配列、オブジェクトも引数として渡すことができるようになります。	3
277	2024-08-22 07:16:51	2024-08-22 07:16:51	1	1	テーブルのセルを縦に結合する	<table>\n  <thead>\n      <th>名前</th>\n      <th>好物</th>\n  </thead>\n\n  <tbody>\n    <tr>\n      <td rowspan=2>test</td>\n      <td>ハンバーグ</td>\n    </tr>\n    <tr>\n      <td>唐揚げ</td>\n    </tr>\n  </tbody>\n</table>	test.html	<table>\\\\r\n  <thead>\\\\r\n      <th>名前</th>\\\\r\n      <th>好物</th>\\\\r\n  </thead>\\\\r\n\\\\r\n  <tbody>\\\\r\n    <tr>\\\\r\n      <td rowspan=2>test</td>\\\\r\n      <td>ハンバーグ</td>\\\\r\n    </tr>\\\\r\n    <tr>\\\\r\n      <td>唐揚げ</td>\\\\r\n    </tr>\\\\r\n  </tbody>\\\\r\n</table>	\N	\N	\N	\N	テーブルのセルを縦に結合するには、\n<td rowspan=行数>セルのデータ</td>\nの形式で記入します。\n\n上の例では、testの行をrowspan=2として2行分として表示しています。	7
85	2024-06-28 09:16:11	2024-06-28 09:20:06	1	5	null合体演算子	1	PHP	<?php\n\\\\t$a??$a=1;\n\\\\techo $a;	\N	\N	\N	\N	上の例では、$aが未定義もしくはnullの場合は$aに1を代入しています。<br>$aがすでに代入されている場合は1が代入されずに元の値のままとなります。<br><br>この??のことをnull合体演算子といいます。	39
282	2024-08-22 16:47:45	2024-08-22 16:47:58	4	19	合計値を取得する	\N	app/controllers/test_controller.rb	class TestController < ApplicationController\n  def index\n    @sum_sales = Sale.all.sum(:amount)\n  end\nend	\N	\N	\N	\N	フィールドの合計値を取得するには<br><div class="code-block">モデル.sum(:フィールド)</div><br>の形式で記入します。<br><br>上の例はSaleモデルのamountフィールドの合計を取得しています。	29
205	2024-08-02 23:45:43	2024-08-02 23:48:33	1	17	可変長引数	1\n[2, 3]	Ruby	def test(val, *val2)\n  puts val\n  p(val2)\nend\n\ntest(1, 2, 3)	\N	\N	\N	\N	仮引数の前に*を付けることで複数の引数を配列として受け取ることができます。<br><br>上の例では、valには1が代入され、それ以降の引数はval2にリスト形式で代入されています。	20
269	2024-08-21 17:33:38	2024-08-21 17:33:38	4	19	データの件数を数える	\N	app/controllers/test_controller.rb	class TestController < ApplicationController\\\\r\n  def index\\\\r\n    @test = Person.where('age >= 20').count\\\\r\n  end\\\\r\nend	\N	\N	\N	\N	データの件数を数えるには、\\\\r\n<div class="code-block">モデル.count</div>\\\\r\nと記入します。\\\\r\n\\\\r\n上の例では、ageフィールドが20以上のデータの件数を数えています。	20
285	2024-08-22 17:39:43	2024-08-22 17:50:19	4	19	紐づいた別のモデルのフィールドを結合する	\N	app/controllers/test_controller.rb	class TestController < ApplicationController\n  def index\n    @employees = Employee.joins(:sales).select('name, sales.amount')\n  end\nend	\N	\N	\N	\N	別のモデルのデータを埋め込んで取得するには、<br><div class="code-block">モデル.joins(:埋め込むモデル).select(取得するフィールド)</div><br>の形式で記入します。<br><br>上の例では、EmployeeモデルにSaleモデルを結合し、EmployeeモデルのnameフィールドとSaleモデルのamountフィールドのデータを取得しています。<br><br>joinで結合時には結合するモデルのデータがないものは取得しません。<br>上の例だと紐づいたSaleモデルのないemployeeのデータは取得しません。<br><br>紐づいたモデルのデータがないものも取得したいときは<br><div class="code-block">モデル.left_joins(:埋め込むモデル).select(取得するフィールド)</div><br>の形式で記入してください。<br><br>また、このようにデータを結合していて、取得したフィールドのデータのみを使用するときはN+1問題も発生しないのでincludesを使用する必要がありません。	32
286	2024-08-22 18:46:34	2024-08-22 18:55:47	4	19	結合したモデルの集計を行う	\N	app/controllers/test_controller.rb	class TestController < ApplicationController\n  def index\n    @employees_with_sales = Employee.left_joins(:sales)\n        .select("employees.id, employees.name, sales.sales_date AS sales_date, SUM(sales.amount) AS total_sales")\n        .group("employees.id, sales.sales_date")\n        .order("employees.id, sales.sales_date")\n  end\nend	\N	\N	\N	\N	上の例では、EmployeeモデルとSaleモデルを結合し、EmployeeモデルのidとSaleモデルのsales_dateフィールドでグルーピングし、Employeeモデルのidとname、Salesモデルのsales_dateフィールドを取得し、グルーピングされたSalesモデルのamountフィールドの合計をtotal_salesフィールドとして追加し、Employeeモデルのid、Salesモデルのsales_dateフィールドで昇順に並べ替えています。	33
\.


--
-- Data for Name: classifications; Type: TABLE DATA; Schema: public; Owner: user
--

COPY public.classifications (id, name, type_id, sort) FROM stdin;
1	HTML	1	0
2	CSS	1	1
3	Javascript	1	2
4	Python	1	3
5	PHP	1	4
6	Laravel	4	9
7	Git	5	6
8	その他	1	7
9	その他	5	999
10	Django(基本)	4	1
11	Linux	5	7
12	インフラ	5	8
13	Django(ORM)	4	2
14	Bootstrap	4	0
15	React	4	0
16	Javascript	3	0
17	Ruby	1	5
18	Ruby on Rails	4	11
19	Ruby on Rails(ORM)	4	12
\.


--
-- Data for Name: departments; Type: TABLE DATA; Schema: public; Owner: user
--

COPY public.departments (id, name, sort) FROM stdin;
1	未設定	0
6	あああ	1
7	cさ	2
8	csas	3
9	cascas	4
10	csaas	5
11	cass	6
12	cassca	7
4	ああq	8
5	ああq１	9
\.


--
-- Data for Name: employee_authority; Type: TABLE DATA; Schema: public; Owner: user
--

COPY public.employee_authority (employee_id, department_id, admin, start_date, end_date) FROM stdin;
1	1	f	2025-02-23	\N
\.


--
-- Data for Name: employee_credential; Type: TABLE DATA; Schema: public; Owner: user
--

COPY public.employee_credential (employee_id, hashed_password, password_updated_at) FROM stdin;
1	$2b$12$r2Z64R5NUyKiwBKO.wcIJewkhmPSLG.uN/02pNxkjgKGhjMjDoyzO	2025-02-23
\.


--
-- Data for Name: employeeinfos; Type: TABLE DATA; Schema: public; Owner: user
--

COPY public.employeeinfos (employee_id, phone_number, gender, emergency_contact, address, birth_date, employment_type, hire_date, leave_date, contract_expiration) FROM stdin;
1	080-1111-1111	男性	1111-11-1111	東京都品川区	2025-11-11	正社員	2025-11-11	\N	\N
\.


--
-- Data for Name: employees; Type: TABLE DATA; Schema: public; Owner: user
--

COPY public.employees (id, employee_no, name, email, last_login) FROM stdin;
1	admin12	admin	test@test.com	\N
\.


--
-- Data for Name: types; Type: TABLE DATA; Schema: public; Owner: user
--

COPY public.types (id, sort, name) FROM stdin;
3	0	組み込み関数など
4	0	フレームワーク
5	999	その他
6	0	プラグイン、モジュール
1	0	プログラミング基礎
\.


--
-- Name: articles_id_seq; Type: SEQUENCE SET; Schema: public; Owner: user
--

SELECT pg_catalog.setval('public.articles_id_seq', 292, true);


--
-- Name: classifications_id_seq; Type: SEQUENCE SET; Schema: public; Owner: user
--

SELECT pg_catalog.setval('public.classifications_id_seq', 26, true);


--
-- Name: departments_id_seq; Type: SEQUENCE SET; Schema: public; Owner: user
--

SELECT pg_catalog.setval('public.departments_id_seq', 12, true);


--
-- Name: employees_id_seq; Type: SEQUENCE SET; Schema: public; Owner: user
--

SELECT pg_catalog.setval('public.employees_id_seq', 2, false);


--
-- Name: types_id_seq; Type: SEQUENCE SET; Schema: public; Owner: user
--

SELECT pg_catalog.setval('public.types_id_seq', 21, true);


--
-- Name: alembic_version alembic_version_pkc; Type: CONSTRAINT; Schema: public; Owner: user
--

ALTER TABLE ONLY public.alembic_version
    ADD CONSTRAINT alembic_version_pkc PRIMARY KEY (version_num);


--
-- Name: articles articles_pkey; Type: CONSTRAINT; Schema: public; Owner: user
--

ALTER TABLE ONLY public.articles
    ADD CONSTRAINT articles_pkey PRIMARY KEY (id);


--
-- Name: classifications classifications_pkey; Type: CONSTRAINT; Schema: public; Owner: user
--

ALTER TABLE ONLY public.classifications
    ADD CONSTRAINT classifications_pkey PRIMARY KEY (id);


--
-- Name: departments departments_pkey; Type: CONSTRAINT; Schema: public; Owner: user
--

ALTER TABLE ONLY public.departments
    ADD CONSTRAINT departments_pkey PRIMARY KEY (id);


--
-- Name: employee_authority employee_authority_pkey; Type: CONSTRAINT; Schema: public; Owner: user
--

ALTER TABLE ONLY public.employee_authority
    ADD CONSTRAINT employee_authority_pkey PRIMARY KEY (employee_id, department_id);


--
-- Name: employee_credential employee_credential_pkey; Type: CONSTRAINT; Schema: public; Owner: user
--

ALTER TABLE ONLY public.employee_credential
    ADD CONSTRAINT employee_credential_pkey PRIMARY KEY (employee_id);


--
-- Name: employeeinfos employeeinfos_pkey; Type: CONSTRAINT; Schema: public; Owner: user
--

ALTER TABLE ONLY public.employeeinfos
    ADD CONSTRAINT employeeinfos_pkey PRIMARY KEY (employee_id);


--
-- Name: employees employees_pkey; Type: CONSTRAINT; Schema: public; Owner: user
--

ALTER TABLE ONLY public.employees
    ADD CONSTRAINT employees_pkey PRIMARY KEY (id);


--
-- Name: types types_pkey; Type: CONSTRAINT; Schema: public; Owner: user
--

ALTER TABLE ONLY public.types
    ADD CONSTRAINT types_pkey PRIMARY KEY (id);


--
-- Name: ix_articles_id; Type: INDEX; Schema: public; Owner: user
--

CREATE INDEX ix_articles_id ON public.articles USING btree (id);


--
-- Name: ix_classifications_id; Type: INDEX; Schema: public; Owner: user
--

CREATE INDEX ix_classifications_id ON public.classifications USING btree (id);


--
-- Name: ix_departments_id; Type: INDEX; Schema: public; Owner: user
--

CREATE INDEX ix_departments_id ON public.departments USING btree (id);


--
-- Name: ix_employees_email; Type: INDEX; Schema: public; Owner: user
--

CREATE INDEX ix_employees_email ON public.employees USING btree (email);


--
-- Name: ix_employees_id; Type: INDEX; Schema: public; Owner: user
--

CREATE INDEX ix_employees_id ON public.employees USING btree (id);


--
-- Name: ix_employees_name; Type: INDEX; Schema: public; Owner: user
--

CREATE INDEX ix_employees_name ON public.employees USING btree (name);


--
-- Name: ix_types_id; Type: INDEX; Schema: public; Owner: user
--

CREATE INDEX ix_types_id ON public.types USING btree (id);


--
-- Name: articles articles_classification_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: user
--

ALTER TABLE ONLY public.articles
    ADD CONSTRAINT articles_classification_id_fkey FOREIGN KEY (classification_id) REFERENCES public.classifications(id) ON DELETE SET NULL;


--
-- Name: articles articles_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: user
--

ALTER TABLE ONLY public.articles
    ADD CONSTRAINT articles_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.types(id) ON DELETE SET NULL;


--
-- Name: classifications classifications_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: user
--

ALTER TABLE ONLY public.classifications
    ADD CONSTRAINT classifications_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.types(id) ON DELETE CASCADE;


--
-- Name: employee_authority employee_authority_department_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: user
--

ALTER TABLE ONLY public.employee_authority
    ADD CONSTRAINT employee_authority_department_id_fkey FOREIGN KEY (department_id) REFERENCES public.departments(id) ON DELETE CASCADE;


--
-- Name: employee_authority employee_authority_employee_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: user
--

ALTER TABLE ONLY public.employee_authority
    ADD CONSTRAINT employee_authority_employee_id_fkey FOREIGN KEY (employee_id) REFERENCES public.employees(id) ON DELETE CASCADE;


--
-- Name: employee_credential employee_credential_employee_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: user
--

ALTER TABLE ONLY public.employee_credential
    ADD CONSTRAINT employee_credential_employee_id_fkey FOREIGN KEY (employee_id) REFERENCES public.employees(id) ON DELETE CASCADE;


--
-- Name: employeeinfos employeeinfos_employee_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: user
--

ALTER TABLE ONLY public.employeeinfos
    ADD CONSTRAINT employeeinfos_employee_id_fkey FOREIGN KEY (employee_id) REFERENCES public.employees(id) ON DELETE CASCADE;


--
-- Name: SCHEMA public; Type: ACL; Schema: -; Owner: user
--

REVOKE USAGE ON SCHEMA public FROM PUBLIC;
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- PostgreSQL database dump complete
--

