-- Backup created at: 2025-03-23 17:03:29

--
-- PostgreSQL database dump
--

-- Dumped from database version 13.20 (Debian 13.20-1.pgdg120+1)
-- Dumped by pg_dump version 15.12 (Debian 15.12-0+deb12u2)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: public; Type: SCHEMA; Schema: -; Owner: user
--

-- *not* creating schema, since initdb creates it


ALTER SCHEMA public OWNER TO "user";

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: alembic_version; Type: TABLE; Schema: public; Owner: user
--

CREATE TABLE public.alembic_version (
    version_num character varying(32) NOT NULL
);


ALTER TABLE public.alembic_version OWNER TO "user";

--
-- Name: articles_id_seq; Type: SEQUENCE; Schema: public; Owner: user
--

CREATE SEQUENCE public.articles_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.articles_id_seq OWNER TO "user";

--
-- Name: articles; Type: TABLE; Schema: public; Owner: user
--

CREATE TABLE public.articles (
    id bigint DEFAULT nextval('public.articles_id_seq'::regclass) NOT NULL,
    created_at timestamp without time zone,
    updated_at timestamp without time zone,
    type_id bigint,
    classification_id bigint,
    title character varying(255) NOT NULL,
    disp text,
    language character varying(255),
    code text,
    language2 character varying(255),
    code2 text,
    language3 character varying(255),
    code3 text,
    explanation text,
    sort integer NOT NULL
);


ALTER TABLE public.articles OWNER TO "user";

--
-- Name: bulletin_cells; Type: TABLE; Schema: public; Owner: user
--

CREATE TABLE public.bulletin_cells (
    id integer NOT NULL,
    bulletin_id integer NOT NULL,
    "row" integer NOT NULL,
    col integer NOT NULL,
    value text
);


ALTER TABLE public.bulletin_cells OWNER TO "user";

--
-- Name: bulletin_cells_id_seq; Type: SEQUENCE; Schema: public; Owner: user
--

CREATE SEQUENCE public.bulletin_cells_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.bulletin_cells_id_seq OWNER TO "user";

--
-- Name: bulletin_cells_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: user
--

ALTER SEQUENCE public.bulletin_cells_id_seq OWNED BY public.bulletin_cells.id;


--
-- Name: bulletin_column_dimensions; Type: TABLE; Schema: public; Owner: user
--

CREATE TABLE public.bulletin_column_dimensions (
    id integer NOT NULL,
    bulletin_id integer NOT NULL,
    col integer NOT NULL,
    width double precision NOT NULL
);


ALTER TABLE public.bulletin_column_dimensions OWNER TO "user";

--
-- Name: bulletin_column_dimensions_id_seq; Type: SEQUENCE; Schema: public; Owner: user
--

CREATE SEQUENCE public.bulletin_column_dimensions_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.bulletin_column_dimensions_id_seq OWNER TO "user";

--
-- Name: bulletin_column_dimensions_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: user
--

ALTER SEQUENCE public.bulletin_column_dimensions_id_seq OWNED BY public.bulletin_column_dimensions.id;


--
-- Name: bulletin_images; Type: TABLE; Schema: public; Owner: user
--

CREATE TABLE public.bulletin_images (
    id integer NOT NULL,
    bulletin_id integer NOT NULL,
    image_data text,
    image_type character varying(64),
    from_row integer NOT NULL,
    from_col integer NOT NULL,
    to_row integer NOT NULL,
    to_col integer NOT NULL,
    width double precision,
    height double precision
);


ALTER TABLE public.bulletin_images OWNER TO "user";

--
-- Name: bulletin_images_id_seq; Type: SEQUENCE; Schema: public; Owner: user
--

CREATE SEQUENCE public.bulletin_images_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.bulletin_images_id_seq OWNER TO "user";

--
-- Name: bulletin_images_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: user
--

ALTER SEQUENCE public.bulletin_images_id_seq OWNED BY public.bulletin_images.id;


--
-- Name: bulletin_merges; Type: TABLE; Schema: public; Owner: user
--

CREATE TABLE public.bulletin_merges (
    id integer NOT NULL,
    bulletin_id integer NOT NULL,
    start_row integer NOT NULL,
    start_col integer NOT NULL,
    end_row integer NOT NULL,
    end_col integer NOT NULL
);


ALTER TABLE public.bulletin_merges OWNER TO "user";

--
-- Name: bulletin_merges_id_seq; Type: SEQUENCE; Schema: public; Owner: user
--

CREATE SEQUENCE public.bulletin_merges_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.bulletin_merges_id_seq OWNER TO "user";

--
-- Name: bulletin_merges_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: user
--

ALTER SEQUENCE public.bulletin_merges_id_seq OWNED BY public.bulletin_merges.id;


--
-- Name: bulletin_posts; Type: TABLE; Schema: public; Owner: user
--

CREATE TABLE public.bulletin_posts (
    id integer NOT NULL,
    title character varying(255) NOT NULL,
    content text,
    created_at timestamp without time zone,
    updated_at timestamp without time zone,
    file_path character varying(255),
    filename character varying(255),
    employee_id integer NOT NULL
);


ALTER TABLE public.bulletin_posts OWNER TO "user";

--
-- Name: bulletin_posts_id_seq; Type: SEQUENCE; Schema: public; Owner: user
--

CREATE SEQUENCE public.bulletin_posts_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.bulletin_posts_id_seq OWNER TO "user";

--
-- Name: bulletin_posts_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: user
--

ALTER SEQUENCE public.bulletin_posts_id_seq OWNED BY public.bulletin_posts.id;


--
-- Name: bulletin_row_dimensions; Type: TABLE; Schema: public; Owner: user
--

CREATE TABLE public.bulletin_row_dimensions (
    id integer NOT NULL,
    bulletin_id integer NOT NULL,
    "row" integer NOT NULL,
    height double precision NOT NULL
);


ALTER TABLE public.bulletin_row_dimensions OWNER TO "user";

--
-- Name: bulletin_row_dimensions_id_seq; Type: SEQUENCE; Schema: public; Owner: user
--

CREATE SEQUENCE public.bulletin_row_dimensions_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.bulletin_row_dimensions_id_seq OWNER TO "user";

--
-- Name: bulletin_row_dimensions_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: user
--

ALTER SEQUENCE public.bulletin_row_dimensions_id_seq OWNED BY public.bulletin_row_dimensions.id;


--
-- Name: cell_styles; Type: TABLE; Schema: public; Owner: user
--

CREATE TABLE public.cell_styles (
    id integer NOT NULL,
    cell_id integer NOT NULL,
    font_bold boolean,
    font_color character varying(64),
    font_size double precision,
    bg_color character varying(64),
    border_top_style character varying(16),
    border_top_color character varying(64),
    border_right_style character varying(16),
    border_right_color character varying(64),
    border_bottom_style character varying(16),
    border_bottom_color character varying(64),
    border_left_style character varying(16),
    border_left_color character varying(64),
    alignment_horizontal character varying(16),
    alignment_vertical character varying(16)
);


ALTER TABLE public.cell_styles OWNER TO "user";

--
-- Name: cell_styles_id_seq; Type: SEQUENCE; Schema: public; Owner: user
--

CREATE SEQUENCE public.cell_styles_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.cell_styles_id_seq OWNER TO "user";

--
-- Name: cell_styles_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: user
--

ALTER SEQUENCE public.cell_styles_id_seq OWNED BY public.cell_styles.id;


--
-- Name: classifications_id_seq; Type: SEQUENCE; Schema: public; Owner: user
--

CREATE SEQUENCE public.classifications_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.classifications_id_seq OWNER TO "user";

--
-- Name: classifications; Type: TABLE; Schema: public; Owner: user
--

CREATE TABLE public.classifications (
    id bigint DEFAULT nextval('public.classifications_id_seq'::regclass) NOT NULL,
    name character varying(32) NOT NULL,
    type_id bigint NOT NULL,
    sort integer NOT NULL
);


ALTER TABLE public.classifications OWNER TO "user";

--
-- Name: departments_id_seq; Type: SEQUENCE; Schema: public; Owner: user
--

CREATE SEQUENCE public.departments_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.departments_id_seq OWNER TO "user";

--
-- Name: departments; Type: TABLE; Schema: public; Owner: user
--

CREATE TABLE public.departments (
    id integer DEFAULT nextval('public.departments_id_seq'::regclass) NOT NULL,
    name character varying(50),
    sort integer DEFAULT 0
);


ALTER TABLE public.departments OWNER TO "user";

--
-- Name: employee_authority; Type: TABLE; Schema: public; Owner: user
--

CREATE TABLE public.employee_authority (
    employee_id integer NOT NULL,
    department_id integer NOT NULL,
    admin boolean NOT NULL,
    start_date date NOT NULL,
    end_date date
);


ALTER TABLE public.employee_authority OWNER TO "user";

--
-- Name: employee_credential; Type: TABLE; Schema: public; Owner: user
--

CREATE TABLE public.employee_credential (
    employee_id integer NOT NULL,
    hashed_password character varying NOT NULL,
    password_updated_at date NOT NULL
);


ALTER TABLE public.employee_credential OWNER TO "user";

--
-- Name: employeeinfos; Type: TABLE; Schema: public; Owner: user
--

CREATE TABLE public.employeeinfos (
    employee_id integer NOT NULL,
    phone_number character varying,
    gender character varying(3),
    emergency_contact character varying(20),
    address character varying,
    birth_date date,
    employment_type character varying(20) NOT NULL,
    hire_date date NOT NULL,
    leave_date date,
    contract_expiration date
);


ALTER TABLE public.employeeinfos OWNER TO "user";

--
-- Name: employees_id_seq; Type: SEQUENCE; Schema: public; Owner: user
--

CREATE SEQUENCE public.employees_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.employees_id_seq OWNER TO "user";

--
-- Name: employees; Type: TABLE; Schema: public; Owner: user
--

CREATE TABLE public.employees (
    id integer DEFAULT nextval('public.employees_id_seq'::regclass) NOT NULL,
    employee_no character varying NOT NULL,
    name character varying NOT NULL,
    email character varying,
    last_login timestamp without time zone
);


ALTER TABLE public.employees OWNER TO "user";

--
-- Name: types_id_seq; Type: SEQUENCE; Schema: public; Owner: user
--

CREATE SEQUENCE public.types_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.types_id_seq OWNER TO "user";

--
-- Name: types; Type: TABLE; Schema: public; Owner: user
--

CREATE TABLE public.types (
    id integer DEFAULT nextval('public.types_id_seq'::regclass) NOT NULL,
    sort integer NOT NULL,
    name character varying(32) NOT NULL
);


ALTER TABLE public.types OWNER TO "user";

--
-- Name: user_sessions; Type: TABLE; Schema: public; Owner: user
--

CREATE TABLE public.user_sessions (
    id integer NOT NULL,
    user_id integer NOT NULL,
    jti character varying(36) NOT NULL,
    created_at timestamp without time zone NOT NULL,
    expires_at timestamp without time zone NOT NULL,
    is_active boolean
);


ALTER TABLE public.user_sessions OWNER TO "user";

--
-- Name: user_sessions_id_seq; Type: SEQUENCE; Schema: public; Owner: user
--

CREATE SEQUENCE public.user_sessions_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.user_sessions_id_seq OWNER TO "user";

--
-- Name: user_sessions_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: user
--

ALTER SEQUENCE public.user_sessions_id_seq OWNED BY public.user_sessions.id;


--
-- Name: bulletin_cells id; Type: DEFAULT; Schema: public; Owner: user
--

ALTER TABLE ONLY public.bulletin_cells ALTER COLUMN id SET DEFAULT nextval('public.bulletin_cells_id_seq'::regclass);


--
-- Name: bulletin_column_dimensions id; Type: DEFAULT; Schema: public; Owner: user
--

ALTER TABLE ONLY public.bulletin_column_dimensions ALTER COLUMN id SET DEFAULT nextval('public.bulletin_column_dimensions_id_seq'::regclass);


--
-- Name: bulletin_images id; Type: DEFAULT; Schema: public; Owner: user
--

ALTER TABLE ONLY public.bulletin_images ALTER COLUMN id SET DEFAULT nextval('public.bulletin_images_id_seq'::regclass);


--
-- Name: bulletin_merges id; Type: DEFAULT; Schema: public; Owner: user
--

ALTER TABLE ONLY public.bulletin_merges ALTER COLUMN id SET DEFAULT nextval('public.bulletin_merges_id_seq'::regclass);


--
-- Name: bulletin_posts id; Type: DEFAULT; Schema: public; Owner: user
--

ALTER TABLE ONLY public.bulletin_posts ALTER COLUMN id SET DEFAULT nextval('public.bulletin_posts_id_seq'::regclass);


--
-- Name: bulletin_row_dimensions id; Type: DEFAULT; Schema: public; Owner: user
--

ALTER TABLE ONLY public.bulletin_row_dimensions ALTER COLUMN id SET DEFAULT nextval('public.bulletin_row_dimensions_id_seq'::regclass);


--
-- Name: cell_styles id; Type: DEFAULT; Schema: public; Owner: user
--

ALTER TABLE ONLY public.cell_styles ALTER COLUMN id SET DEFAULT nextval('public.cell_styles_id_seq'::regclass);


--
-- Name: user_sessions id; Type: DEFAULT; Schema: public; Owner: user
--

ALTER TABLE ONLY public.user_sessions ALTER COLUMN id SET DEFAULT nextval('public.user_sessions_id_seq'::regclass);


--
-- Data for Name: alembic_version; Type: TABLE DATA; Schema: public; Owner: user
--

COPY public.alembic_version (version_num) FROM stdin;
37e83ad3bd65
\.


--
-- Data for Name: articles; Type: TABLE DATA; Schema: public; Owner: user
--

COPY public.articles (id, created_at, updated_at, type_id, classification_id, title, disp, language, code, language2, code2, language3, code3, explanation, sort) FROM stdin;
3	2024-06-21 22:30:56	2024-06-26 04:27:06	5	7	Gitの初期設定	\N	\N	\N	\N	\N	\N	\N	Gitのインストール<br><br><a href="https://git-scm.com/">Git公式サイト</a>よりGitをインストールします。<br><br><a href="https://github.com/">GitHub公式サイト</a>にてGithubのアカウントを作成します。<br><br>その後、コマンドプロンプトを開き、<br><br><div class="code-block p-3">git config --global user.name "ユーザー名"<br><br>git config --global user.email "メールアドレス"</div><br>をそれぞれ入力します。<br><br>通信の暗号化<br><br>Windowsキー + Rを押して「ファイル名を指定して実行」を開き、「services.msc」と入力してOKをクリックします。<br><br>サービス(ローカル)から「OpenSSH Authentication Agent」を探し、右クリックし、プロパティをクリックします。<br><br>「スタートアップの種類(E)」を「自動」に設定し、「適用」をクリックします。<br><br>「開始」をクリックしてし、「OK」をクリックします。<br><br>その後PowerShellで、<br><br><div class="code-block p-3">ssh-keygen -t ed25519 -C "メールアドレス"<br><br>Start-Service ssh-agent<br><br>ssh-add C:\\\\\\\\\\\\\\\\Users\\\\\\\\\\\\\\\\ユーザー名\\\\\\\\\\\\\\\\.ssh\\\\\\\\\\\\\\\\id_ed25519<br><br>Get-Content C:\\\\\\\\\\\\\\\\Users\\\\\\\\\\\\\\\\ユーザー名\\\\\\\\\\\\\\\\.ssh\\\\\\\\\\\\\\\\id_ed25519.pub | clip</div><br>を入力します。<br><br>GitHubにログインし、リポジトリを作成します。<br><br>コマンドプロンプトで<br><br><div class="code-block p-3"><br><br>git init<br><br>git remote add origin git@github.com:ユーザー名/リポジトリ名.git<br><br>git pull origin main --allow-unrelated-histories<br><br>git add .<br><br>git commit -m "コメント"<br><br>git push <br><br></div><br><br>と入力するとgitに反映されます。	1
5	2024-06-22 15:42:36	2024-06-23 04:47:27	5	11	Windows環境でLinuxを使用する	\N	Language 1	\N	Language 2	\N	Language 3	\N	WSLとは Windows Subsystem for Linux の略でWindows上でLinuxを使用する機能のことです。<br><br>まずコマンドプロンプトを開き、<br><br><div class="code-block p-3">wsl --install</div><br><br>と入力し、WSLをインストールします。<br><br>その後<br><br><div class="code-block p-3">wsl -l -v</div><br><br>と入力します。これはversionを確認するコマンドとなっており、versionが正しく表示されていればインストールに成功しています。<br><br><br><br>デフォルトではUbuntuがインストールされていますが、Microsoft Storeから他のLinuxディストリビューションをインストールすることもできます。<br><br><br><br>WSLの環境に入るには<br><br><div class="code-block p-3">wsl</div><br><br>特定のディストリビューションを指定して起動する場合は<br><br><div class="code-block p-3">wsl -d ディストリビューション名</div><br><br>とすることで指定したLinux環境に入ることができます。	2
11	2024-06-23 05:25:01	2024-06-26 17:06:32	1	1	HTMLファイルの作り方	<p>ホームページに記入したい文字を入力してください。 </p>	HTML	<!doctype=html>\\n<html lange="ja">\\n    <head>    　　　　　　　　　　\\n       <meta charset=utf-8>　　　\\n       <title>タイトル</title>\\n    </head>\\n\\n    <body>\\n       <p>ホームページに記入したい文字を入力してください。 </p><!--コメント-->\\n    </body>\\n</html>	\N	\N	\N	\N	HTMLファイルとは、ホームページなどwebページを作成するために使用する言語です。<br>基本的にホームページはHTMLファイルで文字、画像などを記入し、CSSで配置という流れで作成します。<br><br>まだ何もテキストエディタをインストールしていない場合はメモ帳、インストールしてある場合はテキストエディタを開きます。<br>そして下の例をコピーして貼り付け後、任意の名前.htmlという名前で保存してみてください。<br>最後に.htmlにと記載することで本来のtxtファイルではなくHTMLファイルが作成されます。<br><br><h2>&lt;!doctype　html&gt;</h2><br>このファイルはHTMLで記入されていますという内容です。<br><br><h2>&lt;html lange="ja"&gt;</h2><br>このHTMLファイルは日本語で記入されていますという内容です。<br><br><h2>head部</h2><br>&lt;head&gt;から&lt;/head&gt;までの範囲のことをhead部といいます。<br>head部にはホームページに直接表示しない内容のことを記入します。<br><br><h2>&lt;meta charset=utf-8&gt;</h2><br>このファイルはutf-8というエンコード(文字に変換する形式)を使用していますという内容です。<br><br><h2>&lt;title&gt;</h2><br>この部分はページのタイトルになります。<br><br><h2>body部</h2><br>からまでの範囲のことをbody部といいます。<br>この部分には直接ホームページに入力したいことを記入します。<br>HTMLでは&lt;p&gt;から &lt;/p&gt;までを1行として認識します。<br>改行しただけでは改行されないので行を増やしたい時は同じように&lt;p&gt;1行に表示したい内容 &lt;/p&gt;の形式で追加していってください<br><br><h2>&lt;!--コメント--&gt;</h2><br>&lt;!--任意のコメント--&gt;の形式でhtmlファイルで文字として出力しない文字を記入することができます。<br>忘れそうな内容などのメモなどの記入に使用してください。<br><br><h2>&lt;/html&gt;</h2><br>HTMLファイルはここまでですという内容です。	1
7	2024-06-22 18:36:02	2025-03-22 19:59:21.678099	4	6	blade.php	\N	\N	\N	\N	\N	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>Bladeテンプレートとは</h2>\n    <p>Laravelのプロジェクト作成後、コマンドプロンプトで</p>\n    \n    <div class="code-block">php artisan serve</div>\n    \n    <p>を入力後、<a href="http://127.0.0.1:8000">http://127.0.0.1:8000</a>にアクセスすると開かれるページはデフォルトでは</p>\n    <p>プロジェクトのフォルダ/resources/views/welcome.blade.php</p>\n    <p>となっています。</p>\n    \n    <p>拡張子が<strong>blade.php</strong>となっているファイルは、Laravelの様々なタグを使用して様々な処理を行うことができ、成型後にブラウザに送られます。</p>\n    <p>以降当サイトではblade.phpのことを<strong>テンプレート</strong>と呼びます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>Bladeテンプレートの基本機能</h2>\n    <p>Bladeタグを使用することで、以下のようなことが可能になります：</p>\n    <ul>\n        <li>web.phpのnameを使用してのURLの埋め込み</li>\n        <li>コントローラーから返された変数の使用</li>\n        <li>PHPの記入</li>\n        <li>if文やfor文などの制御構文の使用</li>\n    </ul>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>繰り返し処理 (ループ)</h2>\n    <p>for文を使用する例：</p>\n    \n    <div class="code-block">@for($i = 1; $i &lt;= 10; $i++)<br>    &lt;div&gt;{{ $i }}&lt;/div&gt;<br>@endfor</div>\n    \n    <p>その他のループ構文：</p>\n    \n    <div class="code-block"><!-- foreach ループ --><br>@foreach($items as $item)<br>    &lt;div&gt;{{ $item }}&lt;/div&gt;<br>@endforeach<br><br><!-- while ループ --><br>@while($condition)<br>    &lt;div&gt;ループ中&lt;/div&gt;<br>@endwhile</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>条件分岐とPHPコード</h2>\n    <p>PHPコードの記述とif文の例：</p>\n    \n    <div class="code-block">@php<br>    $test = -1;<br>@endphp<br><br>@if($test &gt; 0)<br>    &lt;div&gt;$testは{{ $test}}です。&lt;/div&gt;<br>@elseif($test == 0)<br>    &lt;div&gt;$testは0です。&lt;/div&gt;<br>@else<br>   &lt;div&gt;$testは正の数値に直してください。&lt;/div&gt;<br>@endif</div>\n    \n    <p>その他の条件分岐：</p>\n    \n    <div class="code-block"><!-- unless（条件が偽のとき実行） --><br>@unless($user->isAdmin())<br>    管理者ではありません<br>@endunless<br><br><!-- switch文 --><br>@switch($grade)<br>    @case(1)<br>        初級者<br>        @break<br>    @case(2)<br>        中級者<br>        @break<br>    @default<br>        上級者<br>@endswitch</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>テンプレートの継承と共通部分の抽出</h2>\n    <p>共通部分はまとめておいて各ページから共通部分を読み込むことができます。</p>\n    \n    <h3>親テンプレート (layouts/app.blade.php)</h3>\n    <div class="code-block">&lt;!DOCTYPE html&gt;<br>&lt;html lang="ja"&gt;<br>&lt;head&gt;<br>    @yield('head')<br>&lt;/head&gt;<br><br>&lt;body&gt;<br>    @yield('content')<br>&lt;/body&gt;</div>\n    \n    <h3>子テンプレート (page.blade.php)</h3>\n    <div class="code-block">@extends('layouts.app')<br><br>@section('head')<br>    &lt;title&gt;test&lt;/title&gt;<br>@endsection<br><br>@section('content')<br>    &lt;div&gt;コンテンツ&lt;/div&gt;<br>@endsection</div>\n    \n    <p>上記の例では、<code>@extends('layouts.app')</code>の部分でresources/views/layouts/app.blade.phpを読み込み、<code>@section('head')</code>と<code>@section('content')</code>でapp.blade.phpの<code>@yield('head')</code>と<code>@yield('content')</code>の部分にそれぞれ埋め込んでいます。</p>\n    \n    <div class="note">\n        <p><strong>注意：</strong> <code>@yield()</code>、<code>@section()</code>内の文字は一意であれば任意につけることができます。</p>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">6</span>部分テンプレートの読み込み</h2>\n    <p>部分的なテンプレート（パーシャル）を読み込むことができます：</p>\n    \n    <div class="code-block"><!-- パーシャルの読み込み --><br>@include('partials.header')<br><br><!-- 条件付きでパーシャルを読み込み --><br>@includeWhen($condition, 'partials.sidebar')<br><br><!-- パーシャルに変数を渡す --><br>@include('partials.modal', ['title' => 'ログイン'])</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">7</span>変数の表示と整形</h2>\n    <p>Bladeテンプレートでは、変数を表示する様々な方法があります：</p>\n    \n    <div class="code-block"><!-- 基本的な変数表示 --><br>{{ $variable }}<br><br><!-- HTMLエスケープなしで表示（注意して使用） --><br>{!! $htmlContent !!}<br><br><!-- 変数が存在する場合のみ表示 --><br>{{ $name ?? 'ゲスト' }}</div>\n    \n    <p>また、Bladeディレクティブを使って条件に基づいた表示も可能です：</p>\n    \n    <div class="code-block"><!-- 変数が存在するかチェック --><br>@isset($user)<br>    ユーザー: {{ $user->name }}<br>@endisset<br><br><!-- 変数が空かチェック --><br>@empty($users)<br>    ユーザーがいません<br>@endempty</div>\n</div>	3
13	2024-06-24 05:04:59	2024-06-24 05:16:24	1	1	文字の表示	<h1>メインの見出しです。</h1>\\n<p>ここに文字を入力します。</p>\\n<br> <!--1行開けます-->\\n<li>リスト1</li>\\n<li>リスト2</li>       \\n\\n<ol type="i">\\n   <li>リストの形式を変更いします</li>\\n   <li>リスト2</li>\\n</ol>\\n        \\n<ruby>振り仮名\\n<rt>ふりがな</rt>\\n</ruby>\\n\\n<p><mark>背景色を付けて目立たせる</mark></p>\\n<p><s>取り消し線</s></p>	HTML	<h1>メインの見出しです。</h1>\\n<p>ここに文字を入力します。</p>\\n<br> <!--1行開けます-->\\n<li>リスト1</li>\\n<li>リスト2</li>\\n       \\n<ol type="i">\\n   <li>リストの形式を変更いします</li>\\n   <li>リスト2</li>\\n</ol>\\n        \\n<ruby>振り仮名\\n<rt>ふりがな</rt>\\n</ruby>\\n\\n<p><mark>背景色を付けて目立たせる</mark></p>\\n<p><s>取り消し線</s></p>	\N	\N	\N	\N	上の例の表示とHTMLのタブを切り替えながら見比べて実際どういう風になっているのか参考にしてみてください。<br><br><br>HTMLでは&lt;タグ&gt;から&lt;!--タグ--&gt;までの内容にそれぞれのタグの内容が適用されます。<br><br><br>&lt;h1&gt;は1ページの最上位の見出し部分として1度もしくは2度の使用にすることでSEO対策(検索に引っかかりやすいページの作成)につながります。<br><br><br>また途中に見出しを使用したい時などは&lt;2&gt;から&lt;h6&gt;まであり、数字が増えるにつれて文字の大きさが小さくなっていくので任意のものを使用してください。	2
17	2024-06-24 05:45:46	2024-06-28 16:51:03	1	1	折り畳みメニューの作成	<details>\\n<summary>menu</summary>\\n<a href="https://www.google.com/">Google</a>\\n<p>test</p>\\n</details>	HTML	<details>\\n   <summary>menu</summary>\\n   <a href="https://www.google.com/">Google</a>\\n   <p>test<p>\\n</details>	\N	\N	\N	\N	<div class="code-block">&lt;details&gt;&lt;summary&gt;折りたたんだ時に表示したい内容&lt;/summary&gt;<br>   開いたときの内容<br>&lt;/details&gt;</div><br>の形式で記入することで折り畳みメニューを作成することができます。<br>上の例のGoogleようにリンクにすることも、testのように普通の文字にすることもできます。	5
18	2024-06-24 06:05:13	2024-06-28 16:48:15	1	2	CSSとは	<div style="color: rgb(79, 79, 177);">この文字にCSSが適用されます</div>	HTML	<head>    　　　　　　　　　　\\n　　　<meta charset=utf-8>　　　\\n     <title>タイトル</title>\\n     <style>\\n     　　　#blue{\\n          　　　color: rgb(79, 79, 177);\\n          }\\n     </style> \\n　　　<link rel="stylesheet" href="ファイルのパス.css">  \\n</head>\\n\\n<div id="blue">この文字にCSSが適用されます</div>	\N	\N	\N	\N	HTMLファイルなどと組み合わせてしようする文字、画像の配置などを変更したりするプログラムです。<br>拡張子を.cssにすることでCSSファイルを使用することができます。<br><br><h2>CSSの記入方法</h2><br>適用したい範囲{適用したい内容:適用したい値;}の形式で記入します。<br>また、適用したい範囲{適用したい内容:適用したい値;適用したい内容:適用したい値;} のように何個でも記入することができます。<br>タグに対して反映させたい時は反映させたいタグ{適用したい内容:適用したい値}の形式で記入します。<br>例)<br><div class="code-block">p{font-size:10px}</div><br>と記入すると全てのpタグ内の文字の大きさが10pxに設定されます。(pxは文字の大きさなどの単位です)<br><br><h2>特定の範囲内でのCSSの適用</h2><br>特定の範囲を指定してCSSを適用したい時はidもしくはclassを使用します。<br>重複のない1か所だけに適用させたいときはid、複数個所に適用させたいときはclassを使用してください。<br><br><h2>CSSファイルの読み込み方法</h2><br><div class="code-block">#blue{<br>   color: rgb(79, 79, 177);<br>}</div><br>のような形式で記入したCSSファイルを用意し、<br>&lt;link rel="stylesheet" href="CSSのパス"&gt;の形式でHTMLファイルのHEAD部に記入することで読み込むこともできます。<br><br><h2>タグ内に直接書き込む</h2><br>&lt;div style="color: rgb(79, 79, 177);"&gt;この文字にCSSが適用されます&lt;/div&gt;<br>のようにstyle="適用させたいCSS"<br>の形式でタグに直接書き込むこともできます。	1
19	2024-06-24 06:38:58	2024-06-24 06:45:49	1	2	位置変更など	<div style="color: rgb(154, 253, 55);">\\n   <p style="text-aline:center;">中央に配置します</p>\\n   <p style="padding-left: 50px;">左側50px開けます</p>\\n   <p style="font-size: 40px;">文字を40pxにします</p>\\n   <p style="font-family: yu 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif">文字をゴシック体にします</p>\\n   <p style="font-style: italic;">文字をitalic体にします</p>\\n   <p style="letter-spacing:10px;">文字間を広くします</p>\\n   <p style="text-indent: 10px;">インデントを入れます</p>\\n   <p style="text-shadow:white 2px 2px 8px;">文字に影を付けます</p>\\n   <p style="color:blue;">文字を青色にします</p>\\n   <p><span style="color:blue;">この部分だけ</span>青文字にします</p>\\n   <p style="background-color:blue;">背景に色をつけます</p>\\n   <p style="background-color: blue;margin-right: 50%;">真ん中までだけ背景に色をつけます</p>\\n   <p style=" background-color: blue;opacity: 0.5;">半透明の色を付けます</p>\\n   <p style="border: 1px solid;">四角で囲います</p>       \\n   <p style="border: 1px solid;border-radius: 5px;">角を丸めます</p>\\n   <p style="border: 1px solid;height: 40px;width: 100px;">四角の幅と高さを調整します</p>\\n</div>	HTML	<div class="font_color">\\n   <p id="center">中央に配置します</p>\\n   <p id="left50">左側50px開けます</p>\\n   <p id="font40">文字を40pxにします</p>\\n   <p id="gothic">文字をゴシック体にします</p>\\n   <p id="italic">文字をitalic体にします</p>\\n   <p id="space">文字間を広くします</p>\\n   <p id="indent">インデントを入れます</p>\\n   <p id="shadow">文字に影を付けます</p>\\n   <p id="blue">文字を青色にします</p>\\n   <p><span id="blue">この部分だけ</span>青文字にします</p>\\n   <p id="background">背景に色をつけます</p>\\n   <p id="half">真ん中までだけ背景に色をつけます</p>\\n   <p id="opacity">半透明の色を付けます</p>\\n   <p id="square">四角で囲います</p>       \\n   <p id="radius">角を丸めます</p>\\n   <p id="square_width">四角の幅と高さを調整します</p>\\n</div>	CSS	.font_color{\\n    color: rgb(154, 253, 55);\\n}\\n\\n#center{\\n    text-aline:center;\\n}\\n\\n#left50{\\n    padding-left: 50px;\\n}\\n\\n#font40{\\n    font-size: 40px;\\n}\\n\\n#gothic{\\n    font-family: yu 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif\\n}\\n\\n#italic{\\n    font-style: italic;\\n}\\n\\n#space{\\n    letter-spacing:10px;\\n}\\n\\n#indent{\\n    text-indent: 10px;\\n}\\n\\n#shadow{\\n    text-shadow:white 2px 2px 8px;\\n}\\n\\n#blue{\\n    color:blue;\\n}\\n\\n#square{\\n    border: 1px solid;\\n}\\n\\n#background{\\n    background-color:blue;\\n}\\n\\n#half{\\n    background-color: blue;\\n    margin-right: 50%;\\n}\\n\\n#opacity{\\n    background-color: blue;\\n    opacity: 0.5;\\n}\\n\\n#radius{\\n    border: 1px solid;\\n    border-radius: 5px;\\n}\\n\\n#square_width{\\n    border: 1px solid;\\n    height: 40px;\\n    width: 100px;\\n}	\N	\N	上記ではfont_colorというclassにcolor: rgb(154, 253, 55);という処理を入れているので適用されている範囲の文字色が変更されています。<br><br>その他の行では、&lt;p id="id名"&gt;～&lt;/p&gt;の範囲にそれぞれに対応するCSSファイルの内容を適用させています。	2
20	2024-06-24 15:50:23	2024-06-28 16:48:56	1	2	サイドバーの作成方法	<div style="display: flex;">\\n   <div style="width: 20%;background-color: rgb(210, 218, 171);text-align: center;order: 1;">\\n            <p>目次</p>\\n            <p>EXCEL</p>\\n            <p>Program</p>\\n            <p>その他</p>\\n        </div>\\n\\n        <div style="width: 80%;padding-left: 10%;background-color: rgb(252, 160, 98);order: 2;">\\n            <p>ここをメインのコンテンツとして使用します。</p>\\n        </div>\\n    </div>	HTML	<div class="test">\\n   <div class="side">\\n      <p>目次</p>\\n      <p>EXCEL</p>\\n      <p>Program</p>\\n      <p>その他</p>\\n   </div>\\n\\n   <div class="content">\\n      <p>ここをメインのコンテンツとして使用します。</p>\\n   </div>\\n</div>	CSS	.test{\\n    display: flex;\\n}\\n.content{\\n    width: 80%;\\n    padding-left: 10%;\\n    background-color: rgb(252, 160, 98);\\n    order: 2;\\n    }\\n    \\n.side{\\n    width: 20%;\\n    background-color: rgb(210, 218, 171);\\n    text-align: center;\\n    order: 1;\\n}	\N	\N	<h2>HTML側</h2><br>まずサイドバー、メインコンテンツともに含めた要素を作成します。<br>上の例ではtestというクラスをつけています。<br>そしてサイドバーになる、メインのコンテンツにそれぞれ要素を付けます。<br>上の例ではサイドバーになる要素にside、メインコンテンツになる要素にcontentというクラスをつけて完了です。<br><br><h2>CSS側</h2><br>まずサイドバー、メインコンテンツともに含んだ要素にdisplay:flexと記入します。<br>次にサイドバー、メインコンテンツともにorderプロパティを追加します。<br>orderプロパティは設定した数字の小さいものから順に左から並ばせることができます。	3
14	2024-06-24 05:25:05	2024-06-24 05:33:17	1	1	画像の埋め込み	<img src="https://placehold.co/600x400" alt="サンプル画像" />	HTML	<img src="画像のパス">	\N	\N	\N	\N	\N	3
92	2024-06-28 11:22:45	2024-06-28 11:22:45	1	5	アクセス装飾子	\N	\N	\N	\N	\N	\N	\N	アクセス装飾子は、public、protected、privateの3種類があります。\\\\\\\\r\\n\\\\\\\\r\\npublicはどこからでも呼び出すことができます。\\\\\\\\r\\nprotectedは自クラスのインスタンスもしくは親子クラスから呼び出すことができます。\\\\\\\\r\\nprivateは自クラスからのインスタンスからのみ呼び出すことができます。\\\\\\\\r\\n\\\\\\\\r\\nできる限り厳しいアクセス装飾子を使用するようにしてください。	45
21	2024-06-24 19:03:13	2024-07-11 12:59:20	1	3	Javascriptとは	<div id="alert_button">押してください</div>	HTML	<div id="alert_button">押してください</div>	Javascript	document.getElementById('alert_button').addEventListener('click',function(){\\n   alert('ボタンがクリックされました');\\n})	\N	\N	Javascriptはwebページに動きを付けたり、クリック時に動作させたりするときに使用する言語です。<br><br>htmlのBody部の最後に<br>&lt;script&gt;<br>   Javascriptを記入<br>&lt;/script&gt;<br>の形式で記入するか、<br>htmlのhead部もしくはbody部の末尾で<br>&lt;script src="Javascriptのパス"&gt;&lt;/script&gt;<br>の形式で記入することで使用することができます。	1
23	2024-06-25 03:49:19	2024-06-25 21:47:37	5	12	VPSでホームページを公開する	\N	\N	\N	\N	\N	\N	\N	Laravelなどのフレームワークなどを使用してホームページを公開したいときにはVPSと契約する必要があります。<br><br><h2>VPSと契約する</h2><br>当サイトはよく聞く名前で安心なのと料金が安いという理由で<a href="https://secure.sakura.ad.jp/">さくらのVPSを使用しています。</a><br><br>さくらのVPSを使用する場合は当サイトはOSをUbuntu、SSHキーを「GitHub.comから取得してインストールする」にして使用しています。<br>GitHubでのSSHキーの追加方法がわからない方はこちらを参考にしてください。<br>※さくらサーバーのSSH接続時のユーザー名は選択したOS名になるので忘れないようにしてください。<br>例)Ubuntuで契約時はubuntuとなります<br><br>その後、契約している会社のサーバーのページに行き、サーバーの電源を入れます。<br>その時にサーバーのIPアドレスも確認してください。<br><br><h2>ssh接続</h2><br><div class="code-block"> ssh -l ユーザー名 IPアドレス</div><br>の形式で入力することでサーバーに接続することができます。<br>接続中のインストールなどは自分のPCではなく接続しているサーバーにインストールされます。<br><br><h2>アップデートと必要なパッケージのインストール</h2><br><div class="code-block">sudo apt update<br>sudo apt upgrade -y<br>sudo apt install git curl unzip software-properties-common -y</div><br><br><h2>Ondrejのリポジトリを追加</h2><br><div class="code-block">sudo add-apt-repository ppa:ondrej/php<br>sudo apt update</div><br><br><h2>PHPのインストール</h2><br>下の例ではPHP8.2をインストールしています。<br><div class="code-block">sudo apt install php8.2 php8.2-cli php8.2-common php8.2-mbstring php8.2-gd php8.2-mysql php8.2-xml php8.2-curl php8.2-zip -y<br>sudo apt install php8.2-fpm</div><br><br><h2>Composerのインストール</h2><br><div class="code-block">php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"<br>sudo php composer-setup.php --install-dir=/usr/local/bin --filename=composer<br>php -r "unlink('composer-setup.php');"</div><br><br><h2>スワップファイルの作成</h2><br><div class="code-block">sudo fallocate -l 2G /swapfile<br>sudo chmod 600 /swapfile<br>sudo mkswap /swapfile<br>sudo swapon /swapfile</div><br><br><h2>MySQLのインストール</h2><br><div class="code-block">sudo apt install mysql-server -y</div><br><br><h2>mysqlのユーザー、データベースの作成</h2><br><div class="code-block">sudo mysql -u root -p<br>CREATE DATABASE データベース名;<br>CREATE USER 'ユーザー名'@'localhost' IDENTIFIED BY 'パスワード';<br>GRANT ALL PRIVILEGES ON *.* TO 'ユーザー名'@'localhost' WITH GRANT OPTION;<br>FLUSH PRIVILEGES;<br>EXIT;</div><br><br><h2>Nginxのインストール</h2><br><div class="code-block">sudo apt install nginx -y</div><br><br><h2>Nginxの設定ファイルを編集</h2><br><div class="code-block">sudo rm /etc/nginx/sites-available/default<br>sudo nano /etc/nginx/sites-available/default</div><br><br><div>開かれたファイルに以下のように書き込み、ctrl+O、Enter、ctrl+Xと順に押し、保存してファイルを閉じてください。</div><br><div class="code-block">server {<br>    listen 80;<br>    server_name IPアドレスもしくはドメイン名;<br><br>    root /var/www/アプリケーション名/public;<br>    index index.php index.html index.htm;<br><br>    location / {<br>        try_files $uri $uri/ /index.php?$query_string;<br>    }<br><br>    location ~ \\\\\\\\\\\\\\\\.php$ {<br>        include snippets/fastcgi-php.conf;<br>        fastcgi_pass unix:/run/php/php8.2-fpm.sock; # PHPのバージョンに応じて修正<br>        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;<br>        include fastcgi_params;<br>    }<br><br>    location ~ /\\\\\\\\\\\\\\\\.ht {<br>        deny all;<br>    }<br>}</div><br><br><div>以下コマンドを入力し、nginxに設定を適用させてください。</div><br><div class="code-block">sudo systemctl stop apache2<br>sudo systemctl restart nginx<br>sudo systemctl start nginx<br>sudo systemctl reload nginx</div><br><br><h2>GitHubのリポジトリをサーバーにコピーする</h2><br><div class="code-block">cd /var/www<br>sudo mkdir アプリケーション名<br>cd アプリケーション名<br>sudo git init<br>sudo git config --global --add safe.directory /var/www/アプリケーション名<br>sudo git remote add origin https://github.com/GitHubのユーザー名/GitHubのリポジトリ名.git<br>sudo git pull origin main<br></div><br><br><h2>Laravelプロジェクトのディレクトリの所有者をユーザー名に変更</h2><br><div class="code-block">sudo adduser ユーザー名<br>sudo visudo</div><br><br><div class="code-block">root    ALL=(ALL:ALL) ALL</div><br><div>の場所を探して</div><br><div class="code-block">ユーザー名   ALL=(ALL:ALL) ALL</div><br><div>に書き換え管理者権限を作成したユーザーに変更してください。</div><br><br><div class="code-block">sudo su - ユーザー名</div><br><br><h2>Laravelのenvファイルの作成と設定</h2><br><div class="code-block">sudo chown ユーザー名:ユーザー名 /var/www/アプリケーション名/.env<br>sudo cp /var/www/example-app/.env.example /var/www/アプリケーション名/.env<br>nano /var/www/アプリケーション名/.env</div><br><br><div>データベースの設定を探し、以下のように書き換えてください</div><br><div class="code-block">DB_CONNECTION=mysql<br>DB_HOST=127.0.0.1 <br>DB_PORT=3306 <br>DB_DATABASE=データベース名<br>DB_USERNAME=mysqlのユーザー名<br>DB_PASSWORD=mysqlのパスワード</div><br><br><h2>アプリケーションにcomposerのインストール</h2><br><div class="code-block">cd /var/www/アプリケーション名<br>sudo chown -R ユーザー名:ユーザー名 /var/www/example-app<br>composer install</div><br><br><h2>Laravelのキー生成</h2><br><div class="code-block">cd /var/www/example-app<br>php artisan key:generate</div><br><br><h2>データベースのマイグレーション（テーブル作成）</h2><br><div class="code-block">php artisan migrate</div><br><br><h2>アプリケーションのキャッシュクリア、権限の設定</h2><br><div class="code-block">mkdir -p /var/www/アプリケーション名/storage/logs<br>mkdir -p /var/www/アプリケーション名/bootstrap/cache<br>sudo chown -R ユーザー名:ユーザー名 /var/www/アプリケーション名/storage /var/www/example-app/bootstrap/cache<br>sudo chmod -R 775 /var/www/アプリケーション名/storage /var/www/アプリケーション名/bootstrap/cache<br><br>php artisan config:cache<br>php artisan route:cache<br>php artisan view:cache</div><br><br><h2>Node.js、npmのインストール</h2><br><div class="code-block">curl -fsSL https://deb.nodesource.com/setup_16.x | sudo -E bash -<br>sudo apt-get install -y nodejs</div><br><br><h2>Viteのインストール、ビルドを実行</h2><br><div class="code-block">cd /var/www/example-app<br>npm install vite<br>npm run build</div>	3
25	2024-06-26 01:12:37	2024-06-26 01:14:07	5	12	SSH接続ができなくなったとき	\N	\N	\N	\N	\N	\N	\N	SSH接続ができなくなったときは以下を試してください。<br><br><h2>ローカル環境での作業</h2><br><div class="code-block">type C:\\\\\\\\\\\\\\\\Users\\\\\\\\\\\\\\\\popro\\\\\\\\\\\\\\\\.ssh\\\\\\\\\\\\\\\\id_rsa.pub</div><br><div>と入力するとssh-rsaから始まる公開鍵が表示されるのでコピーしてください。</div><br><br><h2>サーバーでの作業</h2><br><div class="code-block">mkdir -p ~/.ssh<br>chmod 700 ~/.ssh<br>echo "先ほどコピーした公開鍵"<br>chmod 600 ~/.ssh/authorized_keys<br>sudo nano /etc/ssh/sshd_config</div><br><div>と入力すると、表示されるファイルから</div><br><br><div class="code-block">PubkeyAuthentication yes<br>AuthorizedKeysFile .ssh/authorized_keys<br>PasswordAuthentication yes</div><br><div>の部分を探し、#でコメントアウトされていたら#を削除してください。</div><br><br><div>その後、以下のコードを入力し、SSH設定を有効にしてください。</div><br><div class="code-block">sudo systemctl restart ssh</div>	5
30	2024-06-26 06:24:01	2024-07-11 13:02:11	1	3	コンソールログ	\N	Javascript	console.log('test');	\N	\N	\N	\N	console.log(コンソールに出力したい内容);<br>と記入することで、コンソールログに出力することができます。<br>コンソールとはデバッグ時などに使用する機能で、データの中身などを見たいときなどに使用します。<br><br>コンソールログは、ctrl+shift+Iで表示または、右上の×の少し下の︙、その他ツール、コンソールを順にクリックすることでも表示することができます。<br><br>console.logで出力した内容はユーザーメッセージとして表示されます。<br><br>当サイトではJavascriptタブでのconsole.logは対象のページのコンソールに表示されるようになっています。<br><br>このページでコンソールを開くとtestと表示されているはずです。	2
22	2024-06-25 01:47:19	2024-06-25 01:47:19	1	7	Gitに公開鍵を追加する	\N	\N	\N	\N	\N	\N	\N	Gitに公開鍵を追加するには、コマンドプロンプトを開き、\\\\\\\\r\\n<div class="code-block">ssh-keygen -t rsa -b 4096 -C "メールアドレス"\\\\\\\\r\\ncat ~/.ssh/id_rsa.pub</div>\\\\\\\\r\\nと入力し、生成された公開鍵をコピーします。\\\\\\\\r\\n\\\\\\\\r\\nその後、<a href="https://github.com/">GitHub</a>にログインし、画面右上のユーザーアイコンをクリックし、settingをクリックします。\\\\\\\\r\\n左側のメニューのSSH and GPG keysをクリックし、右側のNew SSH keyをクリックします。\\\\\\\\r\\n\\\\\\\\r\\nTitleに任意の名前を入力し、Keyのところに先ほどコピーした公開鍵を貼り付け、画面下部のAdd SSH keyボタンをクリックすると公開鍵が追加されます。	2
32	2024-06-26 06:32:50	2024-06-28 16:40:10	1	3	定数、変数	\N	Javascript	const a = 1;\\nlet b = 2;\\nvar c = 'test';\\n\\nconsole.log(a,b,c);	\N	\N	\N	\N	定数、変数とは値を代入する入れ物のことです。<br><br>上の例ではaに1を、bに2を、cにtestを代入しています。<br><br>定数とは上書きできない変数のことをいいます。<br><br>できる限り定数を使用するようにし、書き換えが必要なところはletを使用しましょう。<br><br>letは再代入はできるが再宣言はできません。<br><br><div class="code-block">let a = 2;<br>let a = 1;</div><br>とするとエラーになるが、<br><div class="code-block">let a = 2;<br>a = 1;</div><br>とするとエラーにはならない。<br><br>また、定義時に<br><div class="code-block">a = 1;</div><br>などと書くことでも変数として定義できますが、グローバル変数(どこからでも呼び出せる変数)になってしまいバグのもとになるので絶対にやめましょう。	3
40	2024-06-26 17:42:29	2024-06-28 16:45:07	1	3	要素の内容が変化した時の動作	<select id="test" style="color: black;" class="form-select">\\n   <option value="1">test1</option>\\n   <option value="2">test2</option>\\n</select>	HTML	<select id="test">\\n   <option value="1">test1</option>\\n   <option value="2">test2</option>\\n</select>	Javascript	const element = document.getElementById('test');\\n\\nelement.addEventListener('change', function(){\\n   alert(this.value);\\n});	\N	\N	上の例では、セレクトの値を変更するとアラートが出るようになっています。<br><br><div class="code-block">要素.addEventListener('change', function(){<br>   処理内容;<br>});</div><br>と記入することで、対象の値が変化したときに動作させることができます。<br><br>alertで使用しているthisは自分自身(ここでは変更したセレクト)のことを指します。<br>this.valueとすることでoptionのvalue属性の値を取得しています。	10
34	2024-06-26 15:44:30	2024-08-16 06:40:30	5	12	サイトをhttpsにする	\N	\N	\N	\N	\N	\N	\N	サイトをhttpsにすることで、ブラウザとサーバーサイドの通信を暗号化することができ、盗聴などを防ぐことができるようになります。<br>下の例はLaravelで作成したサイトをhttpsにする例となっています。<br><br><h2>Certbotのインストール</h2><br><div class="code-block">sudo apt update<br>sudo apt install certbot python3-certbot-nginx</div><br><br><h2>Nginx の設定ファイルを編集</h2><br><div class="code-block">sudo nano /etc/nginx/sites-available/default</div><br><div>と入力し、設定ファイルを開き以下のように書き換えます。</div><br><div class="code-block">server {<br>    listen 80 default_server;<br>    listen [::]:80 default_server;<br><br>    server_name 自分のドメイン名に置き換える; <br><br>    root /var/www/アプリケーションのパス/public;<br>    index index.php index.html index.htm index.nginx-debian.html;<br><br>    location / {<br>        try_files $uri $uri/ /index.php?$query_string;<br>    }<br><br>    location ~ \\\\\\\\\\\\\\\\.php$ {<br>        include snippets/fastcgi-php.conf;<br>        fastcgi_pass unix:/var/run/php/php8.2-fpm.sock;<br>    }<br><br>    location ~ /\\\\\\\\\\\\\\\\.ht {<br>        deny all;<br>    }<br><br>    # Let's Encrypt の ACME チャレンジ用<br>    location ~ /.well-known/acme-challenge {<br>        allow all;<br>    }<br>}</div><br><div>となるようにLet's Encrypt の ACME チャレンジ用の部分を書き足してください。</div><br><br><h2>Certbot を使用して証明書を取得</h2><br><div class="code-block">sudo certbot --nginx -d 自身のドメイン名</div><br><br><h2>証明書を自動更新するように設定する</h2><br><div class="code-block">sudo crontab -e</div><br>と入力し、番号を聞かれたら使用するテキストエディタを選択してください。<br>1を選択するとnanoで開かれます。<br>その後開かれたファイルの末尾に<br><div class="code-block">0 3 * * * /usr/bin/certbot renew --quiet</div><br>と追加してください。<br>上のコードは3時に自動更新となっているので3の部分を任意の時間に更新することで自動更新する時間を変更することができます。<br><br><h2>Nginx を再起動して設定の変更を適用</h2><br><div class="code-block">sudo systemctl restart nginx</div>	7
33	2024-06-26 06:58:16	2024-06-28 16:41:00	1	3	関数	\N	Javascript	let a = 1;\\nlet b = 2;\\n\\nfunction test(val1, val2){\\n   let val3 = val1 + val2;\\n   return val3;\\n};\\n\\nlet c = test(a, b);\\nconsole.log(c)	\N	\N	\N	\N	上の例ではtestという2つの数字の足し算をする関数を作成しています。<br><br>関数は<br><div class="code-block">function 関数名(仮引数){<br>   関数の処理<br>   returun 処理後に変数などに代入する値があれば記入<br>};</div><br>の形式で定義でき、引数は,区切りで何個でも定義することができます。<br>また、引数なしで処理だけ行わせることもできます。<br>returnで関数の外に渡す値のことを戻り値といい、外に渡す値がないときはreturnだけ記入します。<br><br>上の例では、testの引数としてa, bを渡しています。<br>aには1が、bには2が入っているので、test関数のval1には1がval2には2が代入され計算されます。<br>val3にはval1とval2を足した値の3が代入されます。<br>そしてcにはtest関数からreturnで戻ってくる値のval3が代入されるのでコンソールには3が出力されます。	4
35	2024-06-26 16:03:01	2024-06-26 17:16:51	1	3	要素の情報を取得する	<div id="test" class="test-class">テスト</div>	HTML	<div id="test" class="test-class">テスト</div>	Javascript	const element = document.getElementById('test');\\nlet text = element.textContent;\\nlet idName = element.id;\\nlet className = element. className;\\n\\nconsole.log("テキスト:",text);\\nconsole.log("id名:",idName);\\nconsole.log("クラス名:",className);	\N	\N	上の例ではidがテストの要素のテキストを取得してコンソールに出力しています。<br>変数textElementにidがtestの要素を代入し、textにはtext.Element.textContentとして取得したテキストを代入しています。<br><br>また、要素.idの形式でid名、要素.classNameの形式でクラス名を取得することができます。<br><br>	5
36	2024-06-26 16:18:36	2024-06-28 16:41:50	1	3	テキストを書き換える	<div id="test">変更しました</div>	HTML	<div id="test">テスト</div>	Javascript	const element = document.getElementById("test");\\nelement.textContent = "変更しました";	\N	\N	上の例では元のHTMLではテストと表示されるようになっていますが、Javascriptで内容を書き換えています。<br><div class="code-block">要素.textContent = "変更後の文字";</div><br>の形式で要素内の表示されている文字を書き換えることができます。	6
37	2024-06-26 16:28:13	2024-06-28 16:42:48	1	3	id、クラスを変更する	<div id="newId" class="new-class3">テスト</div>	HTML	<div id="test" class="test-class">テスト</div>	Javascript	const element = document.getElementById('test');\\nelement.id = 'newId';  //idの変更\\nelement.className = 'new-class';  //クラスの変更\\nelement.classList.add('new-class2'); //クラスの追加\\nelement.classList.remove('new-class'); //クラスの削除\\nelement.classList.replace('new-class2', 'new-class3') //クラス名の書き換え\\n\\nconsole.log('クラス名:',element.className);	\N	\N	上の例では取得した要素に対してidやクラス名の変更、削除などを行っています。<br><br>element.classNameとelement.classList.replaceの違いは要素が複数のクラスを持っているとき、<br><div class="code-block">element.className = 'new-class';</div><br>の書き方だとクラスがnew-classのみになるのに対して、<br><div class="code-block">element.classList.replace('new-class2', 'new-class3')</div><br>のようにするとnew-class2がnew-class3に代わるだけで他のクラスはそのまま保持される点です。	7
38	2024-06-26 16:45:44	2024-06-28 16:44:34	1	3	クリックで動作させる	<div id="test">クリックしてください</div>	Html	<div id="test">クリックしてください</div>	Javascript	const element = document.getElementById('test');\\nelement.addEventListener('click', function(){\\n   alert('クリックされました');\\n});	\N	\N	上の例では押してくださいと書いてある部分をクリックするとアラートが出るようになっています。<br>このように、特定の要素をクリックしたときなどに関数などを動作させるときには<br><div class="code-block">要素名.addEventListener('動作', function(){<br>   動作内容<br>});</div><br>の形式で記入します。<br><br><div class="code-block">function test() {<br>   alert('test');<br>}<br> element.addEventListener('click', test);</div><br>のようにaddEventListenerの第2引数に関数を直接渡すこともできます。<br><br>その他addEventListenerのは要素にマウスが乗ったときのの動作などもあるのでそちらも別ページにてご紹介していきたいと思います。	8
39	2024-06-26 17:10:12	2024-06-28 16:39:12	1	3	マウスが乗ったときの動作	<div id="test">マウスが外れました</div>	HTML	<div id="test">ここにマウスを乗せたり外したりしてください</div>	Javascript	const element = document.getElementById('test')\\n\\nelement.addEventListener('mouseover', ()=>{\\n   element.textContent = 'マウスが乗っています';\\n});\\n\\nelement.addEventListener('mouseout', ()=>{\\n   element.textContent = 'マウスが外れました';\\n});	\N	\N	上の例では要素にマウスを乗せたとき、外した時で文字が変わるようになっています。<br><br><div class="code-block">element.addEventListener('mouseover', ()=&gt;{<br>   element.textContent = 'マウスが乗っています';<br>});</div><br>は以下と同じ内容になります。<br><div class="code-block">element.addEventListener('mouseover', function (){<br>   element.textContent = 'マウスが乗っています';<br>});</div><br><br>addEventListenerの第1引数を'mouseover'とするとマウスが乗ったとき、'mouseout'とするとマウスが外れた時の処理となります。<br>	9
41	2024-06-26 17:59:52	2024-06-28 16:45:46	1	3	要素がフォーカスされたときの処理	<input id="test" class="form-control" style="color: black;" value="ここをクリックしてください">\\n<input id="test2" class="form-control" style="color: black;">	HTML	<input id="test"></input>\\n<input id="test2></input>	Javascript	const element = document.getElementById('test');\\nconst element2 = document.getElementById('test2');\\n\\nelement.addEventListener('focus', function(){\\n   this.value = 'フォーカスされています';\\n});\\n\\nelement.addEventListener('blur', function(){\\n   this.value = 'フォーカスが外れました';\\n});	\N	\N	上の例ではフォーカス時、フォーカスが外れた時にそれぞれ上側のインプットの値を変更しています。<br><br><div class="code-block">要素.addEventListener('focus', function(){<br>   処理内容;<br>};</div><br>でフォーカスされたとき、<br><br><div class="code-block">要素.addEventListener('blur', function(){<br>  処理内容;<br>});</div><br>でフォーカスが外れた時の処理をさせることができます。	11
43	2024-06-26 19:33:05	2024-06-26 19:37:14	1	5	XAMPPのインストール	\N	\N	\N	\N	\N	\N	\N	XAMPPとは、Apache、Maria DB、PHP、Perlが含まれていて手軽にPHPでのプログラミングができるようになるものです。<br><a href="https://www.apachefriends.org/jp/index.html">こちら</a>のページよりインストールを行ってください。<br><br>インストール後、XAMPPのコントロールパネルを開き、ApachのStartをクリックすることで仮想サーバーとしてPHPを動作させることができます。<br>デフォルトではCドライブの直下にxamppフォルダが作成されます。<br>またAdminをクリックすると、xampp/htdocsフォルダに配置したindex.phpが開かれます。<br>Xamppの仮想環境内ではhttp://localhostをルートとし、フォルダと同じ構成になります。<br><br><br>例)<br>C:/xampp/htdocs/test/test.php<br>を開きたいときは<br>http://localhost/test/test.php<br>とすることで開くことができます。<br><br>データベースを使用したいときはMySQLのStartをクリックするとデータベースサーバーを使用することができ、Adminをクリックするとデータベースの管理ページに移動することができます。<br><br>PHPを初めて触る方などは、C:/xampp/htdocs/フォルダにindex.phpを作成し、そちらを使用するとXAMPPのコントロールパネルのAdminで簡単に開くこともでき手軽に学習を始めることができます。	1
42	2024-06-26 18:19:50	2024-06-28 16:46:29	1	3	キーボードの入力時の処理	<div id="output">何かキーボードのキーを押してください。</div>	HTML	<div id="output"></div>	Javascript	const output= document.getElementById('output');\\n\\ndocument.addEventListener('keydown', function(button){\\n   output.textContent = `${button.key}が押されています。`;\\n});\\n\\ndocument.addEventListener('keyup', function(button){\\n   output.textContent = `${button.key}が離されました。`;\\n});	\N	\N	上の例では、キーボードのキーが押されたとき、離されたときに表示が変わるようになっています。<br><br>特定の要素を指定せずに全体に対して処理を行うときは<br><div class="code-block">要素.addEventListener</div><br>ではなく<br><div class="code-block">document.addEventListener</div><br>とします。<br><br><div class="code-block">document.addEventListener('keydown', function(){<br>  処理内容;<br>});</div><br>とすることでキーボードから入力されたとき、<br><br><div class="code-block">document.addEventListener('keyup', function(){<br>  処理内容;<br>});</div><br>とすることでキーボードから離されたときの処理を行うことができます。<br><br>また、addEventListenerの第2引数の関数の引数を記入すると入力されたキーボードの情報を取得することができます。<br>第2引数の関数の引数.key<br>と記入することで押されたキーを取得することができます。	12
44	2024-06-26 21:08:35	2024-06-26 21:12:31	1	5	PHPとは	a	PHP	<div>\\n<?php\\necho 'a'; //コメント\\n/*\\nコメント\\n*/\\n?>\\n</div>	\N	\N	\N	\N	PHPとは、サーバーサイドで使用する言語です。<br>PHPの特徴はphpファイルの中にHTMLは記入できることです。<br><br>のようにHTMLファイルと同じ記述の中に<br>&lt;?php<br>PHPの処理;<br>?&gt;<br><br>として記入することができます。<br><br>また、echoは出力となっており、<br>echo '出力内容';<br><br>の形式で出力することで出力したものを画面に表示することができます。<br><br>また<br>//コメント<br><br>/*<br>コメント<br>*/<br>の形式でコメントアウトすることもできます。	2
46	2024-06-26 21:20:37	2024-06-26 21:20:37	1	5	変数	3	PHP	<?php\\\\\\\\r\\n   $a=1;\\\\\\\\r\\n   $b=2;\\\\\\\\r\\n   $c=$a+$b;\\\\\\\\r\\n\\\\\\\\r\\necho $c;	\N	\N	\N	\N	変数とは一時的にデータを入れる入れ物となっています。\\\\\\\\r\\n\\\\\\\\r\\n変数は、\\\\\\\\r\\n$変数名=変数に入れる値\\\\\\\\r\\nの形式で定義することができます。\\\\\\\\r\\n\\\\\\\\r\\n上の例のように数字の入った変数同士を足して別の変数に入れることもできます。	3
47	2024-06-26 21:50:01	2024-06-26 21:55:27	1	5	変数(参照渡し)	2	PHP	<?php\\n   $a=1;\\n   $b=&$a;\\n   $b=2;\\n\\n   echo $a;	\N	\N	\N	\N	上の例では、リファレンス渡し(参照渡し)を使用し、$aと$bが連動して変更されるようにしています。<br>リファレンス渡しとは、変数に値ではなく、参照にする場所をコピーすることで片方が変更されると両方変更されるようにすることです。<br>コピー元の変数の前に&を付けることでリファレンス渡しすることができます。<br><br>上の例では、$bに$aの参照をコピーすることで$bを変更時$aの内容も変わるようにしています	4
51	2024-06-28 02:51:53	2024-06-28 02:54:42	1	5	型について	\N	\N	\N	\N	\N	\N	\N	PHPでの型について説明していきます。<br><br>型とは、文字、整数、小数などを区別するために使用されます。<br><br>例えば1と1.0と"1"は別の型となります。<br><br>1は整数の型、1.0は小数の型、"1"は文字列の型となります。<br><br>PHPでは本来数値と文字列は計算できないはずですが計算時に文字列の型は数値の型に変換され計算されるようになっています。<br><br><h2>null</h2><br>null型は変数の中身が消去されたりして中身がないときの型です。<br><br><br><h2>int</h2><br>int型は1,2,3...などの整数の値の型となります。<br><br>また、下で出てくるbool型をint型に変換するとfalseは0,trueは1となります。<br><br><br><h2>float型</h2><br>float型は小数を使用するときの型となります。<br><br><br><h2>string</h2><br>string型は文字列を使用するときの型となります。<br><br>"1"は数値ではなく文字としての1として認識されます。<br><br><br><h2>bool型</h2><br>bool型はif文などで判断するときに使用される型となります。<br><br>if()の場合()の中の式が正しければtrueに、間違っていればfalseに置き換えて処理されます。<br><br>例)if(1==1)の場合は正しいのでif(true)となります。<br><br>また、null、""、0、array()など中身がないもの、0はfalseとして処理されます。<br><br>中身があれば文字列、マイナスの数値などもtrueとして処理されます。<br><br><br><h2>array型</h2><br>配列を使用するときの型となります。<br><br><br>callable型<br>callable型は関数を使用するときの型となります。<br><br><br><h2>オブジェクト型</h2><br>オブジェクト型はクラスを使用するときに使用される型となります。<br><br><br><h2>リソース型</h2><br>リソース型は外部ファイルを開いた時に使用される型となります。<br><br><br><h2>mixed型</h2><br>上記の全ての型を含む型です。<br><br><br><h2>void型</h2><br>戻り値のない関数を使用するときの型です。<br><br><br><h2>Iterable</h2><br>foreachで使用可能である関数などを使用するときの型です。	9
48	2024-06-27 16:34:04	2024-06-28 05:05:01	1	5	変数(可変変数)	test\\ntest2\\ntest3	PHP	<?php\\n   $a = "test";\\n   $test = "test2";\\n   $test2 = "test3";\\n\\n   echo '<div>'.$a.'</div>';\\n   echo '<div>'.$$a.'</div>';\\n   echo '<div>'.$$$a.'</div>';	\N	\N	\N	\N	上の例では、まず変数aにtest、変数testにtest2、変数test2にtest3を代入しています。<br><br>最初のechoの$aでは普通に変数aの値であるtestが出力されます。<br>次に$$aではまず$aでの部分が変数aの値であるtestに変換され、$testとなり、$testの値であるtest2が出力されます。<br>最後に$$$aでは、$$aは$testとなり、$testの値はtest2なので、$test2となりその値であるtest3が出力されます。<br><br>このように$を複数つけて変数名を変化させる変数のことを可変変数といいます。	5
52	2024-06-28 02:56:57	2024-06-28 07:19:44	1	5	条件分岐(if文)	変数aは10より大きいです。	PHP	<?php\\n   $a = 10;\\n\\n   if($a>=10){\\n\\\\\\\\t\\\\\\\\techo "変数aは10より大きいです。";\\n   }elseif($a==10){\\n\\\\\\\\t\\\\\\\\techo "変数aは10です。";\\n   }else{\\n\\\\\\\\t\\\\\\\\techo "変数aは10未満です。";\\n   }	\N	\N	\N	\N	if文は<br><div class="code-block">if(条件){<br>   条件に一致の処理;<br>}elseif(ifの条件が違っていた時の2番目の条件){<br>   2番目の条件に一致したときの処理;<br>}else{<br>   どの条件にも一致しなかったときの処理;<br>}</div><br><br>の形式で記入します。<br>最初に一致した部分の処理でif文は終了するので、ifの部分に一致するとelseif、elseでの処理は実行されません。<br>最初の条件に一致したときのみ処理を行いたいときは、elseif、elseは記入しなくても問題ありません。<br><br>また、条件を増やしたいときはelseifを複数記入することも可能です。	10
53	2024-06-28 03:12:24	2024-06-28 07:18:58	1	5	条件分岐(switch文)	男性です	PHP	<?php\\n    $test = '男性';\\n\\n    switch ($test) {\\n        case '男性':\\n            echo '男性です';\\n            break;\\n\\n        case '女性':\\n            echo '女性です';\\n            break;\\n\\n        case '不明':\\n            echo '性別は不明です';\\n            break;\\n\\n        default:\\n            echo '性別が記入されていません';\\n            break;\\n    }	\N	\N	\N	\N	switch文もif文と同じように条件分岐に使用されます。<br><br><div class="code-block">switch(変数名)<br>   case 変数の値:<br>      値が一致したときの処理;<br>      break;<br>   <br>   default:<br>      一致しなかったときの処理';<br>      break;</div><br>の形式で記入します。<br>if文と違い、break;が実行された時点でswitch文が終了するので記入されていないと以降の処理も実行されますので注意してください。<br><br>また、caseやデフォルトの末尾は;ではなく:なので注意してください。	11
54	2024-06-28 03:26:09	2024-06-28 07:18:00	1	5	繰り返し処理(while文)	0回目\\n1回目\\n2回目\\n3回目\\n4回目\\n5回目\\n6回目\\n7回目\\n8回目\\n9回目\\n10回目	PHP	<?php\\n   $count = 0;\\n   while ($count <= 10) {\\n      echo "<div>{$count}回目</div>";\\n      $count ++;\\n   }	\N	\N	\N	\N	while文は、条件に一致している間繰り返し処理を行います。<br><br><div class="code-block">while(条件){<br>   一致している間行う処理;<br>}</div><br><br>の形式で記入します。<br>条件で使用している変数の値を増やし忘れると無限ループしてしまうので気を付けてください。<br><br>上の例では、変数countに0を代入し、while文内でechoでcount回目と出力し、最後にcount++でcountの値を1増やしています。<br><br>count++やcount+=1はcount=count+1と同じ内容となり変数の値を1増やすという処理になります。	12
55	2024-06-28 03:34:12	2024-06-28 07:17:17	1	5	繰り返し処理(do while文)	1	PHP	<?php\\n   $i=1;\\n\\n   do{\\n      echo $i;\\n      $i++;\\n   }while($i<1);	\N	\N	\N	\N	do while文は<br><div class="code-block">do{<br>   条件が一致する間の繰り返し処理;<br>}while(条件);</div><br><br>の形式で記入します。<br>while文では、最初から条件が一致していないときは処理が行われませんが、do while文では、最初から条件が一致していないときでも1回のみ処理が行われます。	13
56	2024-06-28 03:44:56	2024-06-28 03:52:38	1	5	途中で処理を抜ける	0回目\\n1回目\\n2回目\\n3回目\\n4回目\\n5回目\\n6回目\\n7回目\\n8回目\\n9回目	PHP	<?php\\n   $count = 0;\\n\\n   while ($count < 20){\\n      if($count == 10){\\n         break;\\n      }\\n\\n      echo "<div>{$count}回目</div>";\\n      $count += 1;\\n   }	\N	\N	\N	\N	switch文の説明で少し触れましたが、break文はその時点で処理を抜ける文となっています。<br><br>上の例ではwhile($count &lt; 20)となっており、本来20回処理が行われるのですが中にif文を記入し、その中にbreak;を記入することで、countが10になった時点で処理を抜けるようにしています。	14
57	2024-06-28 03:53:05	2024-06-28 07:16:35	1	5	処理の先頭に戻る	1回目\\n3回目\\n5回目\\n7回目\\n9回目	PHP	<?php\\n\\\\\\\\t$count = 0;\\n\\n\\\\\\\\twhile ($count < 10){\\n\\n\\\\\\\\t\\\\\\\\tif ($count % 2 == 0){\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t$count ++;\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tcontinue;\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t}\\n\\n\\\\\\\\t\\\\\\\\techo "<div>{$count}回目</div>";\\n\\\\\\\\t\\\\\\\\t$count ++;\\n\\\\\\\\t}	\N	\N	\N	\N	処理の途中にcontinue;と記入することで、処理の先頭に戻すことができます。<br><br>上の例ではwhile文の中のif文で偶数時はcountを1増やしてwhile文の先頭に戻しています。<br>1増やした値がwhile文の条件に一致していたらそのまま引き続き処理が実行されます。<br><br><div class="code-block">$count % 2 == 0</div><br>は、countを2で割った余りが0ならばという意味になります。	15
58	2024-06-28 03:58:41	2024-06-28 07:15:39	1	5	繰り返し処理(for文)	0回目\\n1回目\\n2回目\\n3回目\\n4回目\\n5回目\\n6回目\\n7回目\\n8回目\\n9回目	PHP	<?php\\n\\\\\\\\tfor($count = 0; $count < 10; $count ++){\\n\\\\\\\\t\\\\\\\\techo "<div>{$count}回目</div>";\\n\\\\\\\\t}	\N	\N	\N	\N	for文は<br><div class="code-block">for(変数の定義, 条件, 条件終了時の変数の変化){<br>   条件に一致する間の処理;<br>}</div><br><br>の形式で使用します。<br><br>上の例ではfor文の引数でcountに0を代入、countが10になるまで繰り返す、繰り返し完了時にcountの値を1増やすという内容になっています。	16
59	2024-06-28 04:08:51	2024-06-28 07:15:07	1	5	配列	a	PHP	<?php\\n\\\\\\\\t$test[0]="a";\\n\\\\\\\\t$test[1]="b";\\n\\\\\\\\t$test[2]="c";\\n\\n\\\\\\\\techo $test[0];	\N	\N	\N	\N	配列とは$変数名[要素番号]の形式で記入することで。一つの変数に複数の値を代入することができます。<br>呼び出すときは$変数名[要素番号]の形式で呼び出すことができます。<br><br>また、<br><div class="code-block">$変数名 = array(値, 値, 値)</div><br>のように定義することもでき、その場合は先頭から要素番号0から順番に要素番号が割り振られます。	17
109	2024-06-29 16:20:17	2024-06-29 16:32:28	1	4	リスト	[1, 2, 'test']	Python	test = [1, 2, 'test']\\nprint(test)	\N	\N	\N	\N	リストとは一つの変数に複数の値を代入するためのものです。<br><div class="code-block">変数名=[値,]</div><br>の形式で定義することができ,区切りで増やすことができます。<br>異なる型(数字と文字など)が混ざっていても問題ありません。	4
60	2024-06-28 04:13:05	2024-06-28 07:14:32	1	5	繰り返し処理(foreach文)	a\\nb\\nc	PHP	<?php\\n\\\\\\\\t$test[0]="a";\\n\\\\\\\\t$test[1]="b";\\n\\\\\\\\t$test[2]="c";\\n\\n\\\\\\\\tforeach($test as $value){\\n\\\\\\\\t\\\\\\\\techo "<div>{$value}</div>";\\n\\\\\\\\t}	\N	\N	\N	\N	foreach文は、配列などに対して繰り返し処理を行うときに使用します。<br><br><div class="code-block">foreach(繰り返し時に代入する変数 as 繰り返し対象となる変数){<br>   繰り返し時の処理;<br>}</div><br>の形式で記入します。<br><br>上の例では配列である変数testに対して繰り返し処理を行い、testの値は順番に変数valueに代入されていき、処理が行われています。	18
61	2024-06-28 04:27:38	2024-06-28 04:32:01	1	5	多次元配列	Array ( [0] => Array ( [0] => a [1] => b [2] => c ) [1] => Array ( [0] => d [1] => e [2] => f ) )\\na	PHP	<?php\\n    $test=array('a','b','c');\\n    $test2=array('d','e','f');\\n    $test3=array($test,$test2);\\n\\n\\\\\\\\tprint_r($test3);\\n\\\\\\\\techo "<div>{$test3[0][0]}</div>";	\N	\N	\N	\N	多次元配列は配列の中に配列が入っている状態となった配列です。<br><br>上の例では、$test3は[['a', 'b', 'c'],['d', 'e', 'f']]<br>の形式の多次元配列となっています。<br><br>呼び出すときは、$test[0]は['a', 'b', 'c']となっており、最初の要素を呼び出すときは$test[0][0]となります。<br><br>配列はさらに入れ子にしていき、次元を増やすことも可能になっています。	19
62	2024-06-28 04:35:40	2024-06-28 04:38:58	1	5	配列のアンパック	Array ( [0] => 1 [1] => 2 [2] => 3 [3] => 4 [4] => 5 [5] => 6 )\\n4	PHP	<?php\\n\\\\\\\\t$array=[1,2,3];\\n\\\\\\\\t$array2=[...$array,4,5,6];\\n\\n\\\\\\\\tprint_r($array2);\\n\\\\\\\\techo "<div>{$array2[3]}</div>";	\N	\N	\N	\N	注意)この機能はPHPのバージョンが8.1以降でのみ使用することができます。<br>配列のアンパックは、配列の任意の場所に...$配列の代入された変数と記入することで、その要素を割り込ませることができます。<br><br>上の例では、array2の先頭に...$arrayと記入していることで$arrayの要素を割り込ませ、4, 5, 6はその後ろに配置されるようになっています。	20
63	2024-06-28 04:43:48	2024-06-28 07:11:30	1	5	配列を複数の変数に分割する	2023\\n7\\n30	PHP	<?php\\n\\\\\\\\t$date=[2023,7,30];\\n\\n\\\\\\\\tlist($year,$month,$day) = $date;\\n\\\\\\\\techo "<div>{$year}</div>";\\n\\\\\\\\techo "<div>{$month}</div>";\\n\\\\\\\\techo "<div>{$day}</div>";	\N	\N	\N	\N	listを使用することで配列の各値を別の変数にまとめて代入することができます。<br><div class="code-block">list($変数名, $変数名, $変数名) = 配列の代入された変数</div><br>の形式で記入することで、list()内の先頭の要素から順番に配列の値が先頭から順番に代入されていきます。	21
66	2024-06-28 05:08:29	2024-06-28 05:10:43	1	5	マジック定数	\N	\N	\N	\N	\N	\N	\N	マジック定数とは定数を呼び出す位置で値が変更される特殊な定数のことです。<br><br>定数と同じく定数名だけを記入すると呼び出すことができます。<br><br><br><h2>__LINE__</h2><br>ファイル内での行番号を取得することができます。<br><br><br><h2>__FILE__</h2><br>ファイル名を取得することができます。<br><br><br><h2>__DIR__</h2><br>呼び出したファイルがあるディレクトリ(フォルダ)名を取得することができます。<br><br><br><h2>__FUNCTION__</h2><br>関数名を取得することができます。<br><br><br><h2>__CLASS__</h2><br>クラス名を取得することができます。<br><br><br><h2>__TRAIT__</h2><br>トレイト名を取得することができます。<br><br><br><h2>__METHOD__</h2><br>メソッド(クラス内で定義された関数)を取得することができます。<br><br><br><h2>__NAMESPACE__</h2><br>名前空間を呼び出すことができます。	23
64	2024-06-28 04:53:07	2024-06-28 07:10:58	1	5	処理を特定の場所に移動させる	2	PHP	<?php\\n\\\\\\\\tgoto test;\\n\\\\\\\\techo 1;\\n\\n\\\\\\\\ttest:\\n\\\\\\\\techo 2;	\N	\N	\N	\N	goto文を使用すると、処理を特定の場所に移動させることができます。<br><br><div class="code-block">goto 移動先;<br>その他の処理<br>移動先:</div><br>の形式で記入することでgoto文を記入したところから移動先に移動させることができます。<br><br>上の例では、最初のgoto文でtest:まで移動させているため、echo 1;は実行されません。	22
65	2024-06-28 05:00:01	2024-06-28 11:27:05	1	5	定数	1	PHP	<?php\\n    const TEST=1;\\n\\n    echo TEST;	\N	\N	\N	\N	定数とは書き換えができない変数のことです(書き換えを行おうとするとその場所でエラーとなります)。<br><br>書き換えが必要ない変数は基本的に定数として代入するようにすることで意図しないバグを防ぐことができます。<br>また、処理速度の向上にもつながります。<br><br>定数は上記の書き方以外に<br><div class="code-block">define(定数名, 定数の値);</div><br>の形式でも定義することができます。<br>	6
68	2024-06-28 05:15:10	2024-06-28 07:10:03	1	5	別のPHPファイルの読み込み	test	PHP	<?php\\n   require_once dirname(__FILE__) . '/test.php';\\n   testfunc();	test.php	<?php\\n   function testfunc(){\\n    echo 'test';\\n   }	\N	\N	上の例ではメインのPHPファイルと同じフォルダにあるtest.phpを読み込み、test.phpのtestfuncを実行している例です。<br><br><div class="code-block">require_once dirname(__FILE__) . 'ファイルのパス(現在のファイルからの相対パス)';</div><br>の形式で別のPHPファイルを読み込むことができます。<br>自分より上位の階層のファイルを読み込むときなどは/../などでフォルダをさかのぼって移動してください。<br><br>また、require_onceは、ファイルが読み込まれていなければ読み込む、ファイルが存在しない場合や読み込みエラーが発生したときエラーとなります。<br>複数回読み込みたいときはrequireを使用してください。<br><br>ファイルがないとき、読み込みでもエラーを出したくないときはinclude_onceを使用し、複数回読み込みたいときはincludeを使用してください。	24
79	2024-06-28 08:27:21	2024-06-28 08:33:30	1	5	アロー関数	3	PHP	<?php\\n\\\\\\\\t$a = 1;\\n\\n\\\\\\\\t$test = fn($b) => $a + $b;\\n\\\\\\\\techo $test(2);	\N	\N	\N	\N	アロー関数は、グローバル変数を使用することができ、短く書くことができる関数です。<br><div class="code-block">$変数名 = fn($仮引数) =&gt;戻り値</div><br>の形式で定義することができます。<br><br>呼び出すときは、<br><div class="code-block">アロー関数を代入した変数(引数)</div><br>の形式で記入します。<br><br>直接戻り値になるため、難しい処理をするのには向いていませんが、簡単な処理を手軽に記入することができます。	33
110	2024-06-29 16:24:45	2024-06-29 16:31:12	1	4	辞書	{'name': 'tarou', 'country': 'Japan'}\\ntarou	Python	dict = {\\n   'name': 'tarou',\\n   'country': 'Japan',\\n}\\n\\nprint(dict)\\nprint(dict['name'])	\N	\N	\N	\N	辞書型とは、キーと値からなりキーをタグとして呼び出したりすることができる機能です。<br><div class="code-block">変数名={キー: 値}</div><br>の形式で定義することができ,区切りで増やしていくことができます。<br><br><div class="code-block">変数名[キー]</div><br>として呼び出すとキーに対応する値を取得することができます。	5
69	2024-06-28 05:36:59	2024-06-28 06:53:32	1	5	例外処理	$testの値がマイナスです。\\n処理を終了します	PHP	<?php\\n    $test= -1;\\n\\n\\\\\\\\ttry{\\n\\\\\\\\t\\\\\\\\tif($test<0){\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tthrow new Exception('$testの値がマイナスです。');\\n\\\\\\\\t\\\\\\\\t}\\n        echo 'test';\\n\\\\\\\\t}catch(Exception $e){\\n\\\\\\\\t\\\\\\\\techo "<div>{$e->getMessage()}</div>";\\n\\\\\\\\t}finally{\\n\\\\\\\\t\\\\\\\\techo "<div>処理を終了します</div>";\\n\\\\\\\\t}	\N	\N	\N	\N	例外処理は意図しない値などが代入されたときに別の処理などをするときなどに使用します。<br><br>try{<br>\\\\\\\\t\\\\\\\\t処理内容<br>\\\\\\\\t}catch(Exception $e){<br>\\\\\\\\t\\\\\\\\t例外時の処理<br>\\\\\\\\t}finally{<br>\\\\\\\\t\\\\\\\\t処理成功時、例外時共に行う処理<br>\\\\\\\\t}<br>の形式で記入します。<br><br>例外を送出時は<br><div class="code-block">throw new Exception('例外メッセージ');</div><br>の形式で記入します。<br>例外が送出されると、それ以降のtry句は実行されずに、catch句が実行されます。<br>例外が送出されなかった場合は、try句が最後まで実行され、そのあとはfinally句が実行されます。<br><br>catch句では引数として、try句で作成されたExceptionクラスが渡されます。<br>$eの部分はeではなく任意の変数名を付けることが可能となっています。<br><br>$catch句で受け取った変数名-&gt;getMessage()<br>とすることで例外時のメッセージを使用することができます。	25
70	2024-06-28 06:58:26	2024-06-28 07:31:33	1	5	関数	3	PHP	<?php\\n    $test1 = 1;\\n\\\\\\\\t$test2 = 2;\\n\\n\\\\\\\\tfunction test_func($val1, $val2){\\n\\\\\\\\t\\\\\\\\t$val3 = $val1 + $val2;\\n\\\\\\\\t\\\\\\\\treturn $val3;\\n\\\\\\\\t}\\n\\n\\\\\\\\t$return_val = test_func($test1, $test2);\\n\\\\\\\\techo $return_val;	\N	\N	\N	\N	関数とは、特定の決まった処理をさせるためのものです。<br>関数は、定義と呼び出しがあり、定義した関数を呼び出したときに関数の処理が実行されます。<br><br>関数の定義は、<br><div class="code-block">function 関数名(仮引数){<br>   関数の処理;<br>   return 関数の外に返したい値;<br>}</div><br>の形式で定義します。<br>仮引数は、,区切りで複数定義もしくは、仮引数なしにすることもできます。<br><br>また、returnで関数外に渡す値のことを戻り値といい、戻り値がない場合はreturnのみ記入してください。<br><br><div class="code-block">関数名(引数)</div><br>の形式で記入してください。<br><br>上の例では、2つの値の足し算をするtest_func関数を定義し、その戻り値を変数$return_valに代入しています。<br>test_func呼び出し時に引数は$test1、$test2としていますが、これは関数内では$val1、$val2として扱われます。<br><br>	26
71	2024-06-28 07:22:25	2024-06-28 07:30:50	1	5	引数の初期値の設定	3	PHP	<?php\\n\\\\\\\\t$test1 = 1;\\n\\n\\\\\\\\tfunction test_func($val1, $val2=2){\\n\\\\\\\\t\\\\\\\\t$val3 = $val1 + $val2;\\n\\\\\\\\t\\\\\\\\treturn $val3;\\n\\\\\\\\t}\\n\\n\\\\\\\\t$return_val = test_func($test1);\\n\\\\\\\\techo $return_val;	\N	\N	\N	\N	引数は、定義時に仮引数=値の形式で記入することで、初期値を設定することができます。<br><br>ここで設定した初期値は、呼び出し時にその位置の引数が未記入の時は設定した値が使用されます。<br>注意点は、初期値を設定した仮引数の後ろに初期値を設定していない仮引数を配置するとエラーになります。<br><div class="code-block">function test_func($val1=2, val2)</div><br>上のようにするとエラーになる。<br><br>例では、仮引数val2に2を代入しています。<br>呼び出し時にtest_func($test1)として、2つ目の引数が設定されていないので、仮引数で設定された2を使用して処理が行われています。	27
72	2024-06-28 07:33:44	2024-06-28 07:42:53	1	5	関数へ引数として参照を渡す	2	PHP	<?php\\n\\\\\\\\t$test1 = 1;\\n\\n\\\\\\\\tfunction test_func(&$val1){\\n\\\\\\\\t\\\\\\\\t$val1 ++;\\n\\\\\\\\t\\\\\\\\treturn;\\n\\\\\\\\t}\\n\\n\\\\\\\\ttest_func($test1);\\n\\\\\\\\techo $test1;	\N	\N	\N	\N	上の例では引数として、変数の参照を渡しています。<br>本来、関数内での変数と関数外の変数は別物として扱われるので、関数内で値を変更しても外側の変数には影響を与えません。<br><br>関数を使用して、関数外の変数の値を変更したいときは、関数定義時の仮引数の前に&を付けます。<br>このようにすることで、引数として渡されるときに値ではなく、その変数のメモリ上の場所を渡し、関数内で値を変更したときに外側の変数の値を変化させることができるようになります。<br><br>このようにメモリ上の参照を渡すことをリファレンス渡しといいます。	28
73	2024-06-28 07:44:35	2024-06-28 07:53:13	1	5	可変長引数	6	PHP	<?php\\n\\\\\\\\tfunction test_func(...$test){\\n\\\\\\\\t\\\\\\\\t$sum = 0;\\n\\\\\\\\t\\\\\\\\tforeach($test as $val){\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t$sum += $val;\\n\\\\\\\\t\\\\\\\\t}\\n\\\\\\\\t\\\\\\\\treturn $sum;\\n\\\\\\\\t}\\n\\n\\\\\\\\t$return_val = test_func(1, 2, 3);\\n\\\\\\\\techo $return_val;	\N	\N	\N	\N	仮引数を...$仮引数名とすることで、引数として受け取る値を配列にまとめて受け取ることができます。<br><br>上の例では、test_funcに引数として1,2,3を渡していますが、仮引数で...$testとなっているため、関数内では$test=[1, 2, 3]として扱われます。<br>変数$sum=0としてそれに対してforeachを使い順番に$testの要素の値を足していき、最終的な合計を戻り値として返しています。	29
74	2024-06-28 07:56:00	2024-06-28 08:02:41	1	5	スプレッド構文	6	PHP	<?php\\n\\\\\\\\tfunction test_func($a, $b, $c){\\n\\\\\\\\t\\\\\\\\t$d = $a + $b + $c;\\n\\\\\\\\t\\\\\\\\treturn $d;\\n\\\\\\\\t}\\n\\n\\\\\\\\t$test = [1, 2, 3];\\n\\\\\\\\t$return_val = test_func(...$test);\\n\\\\\\\\techo $return_val;	\N	\N	\N	\N	リファレンス渡しとは逆に、引数を...$配列を代入した変数として渡し、それを分解して各仮引数にあてはめる構文をスプレッド構文と呼びます。<br><br>上の例では、test_func呼び出し時の引数に、...$testとしているので、$testは配列から値に分解されて、それぞれ$a、$b、$cにあてはめられます。	30
77	2024-06-28 08:08:09	2024-06-28 08:16:59	1	5	引数、戻り値の型指定	1	PHP	<?php\\n\\\\\\\\tfunction test_func(int $a): int{\\n\\\\\\\\t\\\\\\\\treturn $a;\\n\\\\\\\\t}\\n\\n\\\\\\\\techo test_func(1);	\N	\N	\N	\N	関数定義時に、引数の型、戻り値の型も指定することができます。<br><br>関数定義時に<br><div class="code-block">function 関数名(型 $仮引数): 戻り値の型</div><br>とすることで引数、戻り値の型を指定することができます。<br>引数、戻り値、どちらかのみの指定も可能となっており、戻り値がないときの戻り値の型は:voidとします。<br>また、型名の前に?を付けることでnullも許容できるようになります。<br><br>指定された型以外になるときは、エラーが送出されます。	31
78	2024-06-28 08:18:26	2024-06-28 08:23:14	1	5	クロージャ(無名関数)	1	PHP	<?php\\n\\\\\\\\t$test = function(){\\n\\\\\\\\t\\\\\\\\treturn 1;\\n\\\\\\\\t};\\n\\n\\\\\\\\techo $test();	\N	\N	\N	\N	上の例のような、関数名のない関数のことをクロージャ(無名関数)といいます。<br>上の例は、$testに無名関数を代入している例です。<br>	32
80	2024-06-28 08:35:27	2024-06-28 08:42:03	1	5	関数内でグローバル変数を使用する	3	PHP	<?php\\n\\\\\\\\t$a = 1;\\n\\\\\\\\t$b = 2;\\n\\n\\\\\\\\tfunction test_func(int $val){\\n\\\\\\\\t\\\\\\\\tglobal $a;\\n\\\\\\\\t\\\\\\\\t$b = $a + $val;\\n\\\\\\\\t\\\\\\\\treturn $b;\\n\\\\\\\\t}\\n\\n\\\\\\\\t$c = test_func($b);\\n\\\\\\\\techo $c;	\N	\N	\N	\N	本来、関数の中と外では、同じ変数名でも別のものとして扱われるので、関数外の変数を直接使用することなどはできません。<br><br>上の例のように、<br><div class="code-block">global $変数名;</div><br>と関数内に記入することで、関数外の変数を使用できるようになります。<br><br>また、関数外でも、関数内でも$bを定義していますが、これらは別物となります。	34
81	2024-06-28 08:43:39	2024-06-28 08:49:10	1	5	static(静的)変数	1\\n2	PHP	<?php\\n\\\\\\\\tfunction test_func(){\\n\\\\\\\\t\\\\\\\\tstatic $a = 0;\\n\\\\\\\\t\\\\\\\\t$a ++;\\n\\\\\\\\t\\\\\\\\treturn $a;\\n\\\\\\\\t}\\n\\n\\\\\\\\t$val = test_func();\\n\\\\\\\\techo "<div>{$val}</div>";\\n\\\\\\\\t$val = test_func();\\n\\\\\\\\techo "<div>{$val}</div>";	\N	\N	\N	\N	本来、関数内で定義された変数は、呼び出されるたびに、初期化され、再定義されるので何度呼び出しても同じ値になるのですが、<br><div class="code-block">static 変数名=値</div><br>とすることで対象の変数は値を保持するようになり、再度呼び出されたときは、再定義されず関数の終了時点での値となります。	35
82	2024-06-28 08:51:57	2024-06-28 08:54:23	1	5	エラー制御演算子	\N	PHP	<?php\\n\\\\\\\\techo @$a;	\N	\N	\N	\N	本来、変数を定義していない状態で呼び出すとエラーになるのですが、変数名の前に@を付けることでエラーが出ないようにすることができます。<br>この@のことをエラー制御演算子と呼びます。	36
83	2024-06-28 09:01:37	2024-06-28 09:06:36	1	5	実行演算子	\N	PHP	<?php\\n\\\\\\\\techo `dir`;	\N	\N	\N	\N	``を使用することで、``の中に書いた内容が、コマンドプロンプトで実行されます。	37
84	2024-06-28 09:12:42	2024-06-28 09:14:50	1	5	論理演算子	test1が実行されました\\n------------------------\\ntest2が実行されました\\ntest1が実行されました\\n------------------------\\ntest1が実行されました\\ntest2が実行されました\\n------------------------\\ntest2が実行されました	PHP	<?php\\n\\\\\\\\tfunction test1(){\\n\\\\\\\\t\\\\\\\\techo '<div>test1が実行されました</div>';\\n\\\\\\\\t\\\\\\\\treturn false;\\n\\\\\\\\t}\\n\\n\\\\\\\\tfunction test2(){\\n\\\\\\\\t\\\\\\\\techo '<div>test2が実行されました</div>';\\n\\\\\\\\t\\\\\\\\treturn true;\\n\\\\\\\\t}\\n\\n\\\\\\\\ttest1() && test2();\\n\\\\\\\\techo '------------------------';\\n\\\\\\\\ttest2() && test1();\\n\\\\\\\\techo '------------------------';\\n\\\\\\\\ttest1() || test2();\\n\\\\\\\\techo '------------------------';\\n\\\\\\\\ttest2() || test1();	\N	\N	\N	\N	論理演算子は、&&演算子はfalseが返されるまで、||演算子は、trueが返されるまで実行を続けます。<br><br>上の例では戻り値がtrueの関数とfalseの関数を使用して実行を確認しています。	38
86	2024-06-28 10:32:19	2024-06-28 10:44:34	1	5	クラス	name\\ntest_funcが実行されました	PHP	<?php\\n\\\\\\\\tclass Test{\\n\\\\\\\\t\\\\\\\\tpublic $name = 'name';\\n\\n\\\\\\\\t\\\\\\\\tpublic function test_func(){\\n\\\\\\\\t\\\\\\\\t\\\\\\\\techo '<div>test_funcが実行されました</div>';\\n\\\\\\\\t\\\\\\\\t}\\n\\\\\\\\t}\\n\\n\\\\\\\\t$test_class = new Test();\\n\\\\\\\\techo "<div>{$test_class->name}</div>";\\n\\\\\\\\t$test_class->test_func();	\N	\N	\N	\N	クラスとは、プロパティ(クラス内の変数)とメソッド(クラス内の関数)をひとまとめにしたものです。<br><br>クラスは、<br><div class="code-block">class{<br>   プロパティ、メソッドの定義<br>}</div><br>の形式で定義することができます。<br><br>プロパティ、メソッドについているpublicは、アクセス装飾子と呼ばれ、プロパティ、メソッドへのアクセス可能範囲のことで、publicはどこからでもアクセスで切るようになっています。<br><br>クラスはの定義は、設計図のようなもので、クラスを実際に使用するには、インスタンスの作成(実際のオブジェクトを作成)をする必要があります。<br><br>インスタンスの作成は<br><div class="code-block">new クラス名()</div><br>の形式で行うことができます。<br>また、同じクラスから複数インスタンスを作成したとしてもそれらのインスタンスは別物として扱われます。(どれかのインスタンスのプロパティを変更してもほかのインスタンスには影響を与えません。)<br><br>インスタンスからプロパティを呼び出すには<br><div class="code-block">インスタンス->メソッド名</div><br>の形式で呼びだすことができます。<br>呼び出し時のプロパティ名の前に$がない点に注意してください。<br><br>インスタンスからメソッドを呼び出すときは<br><div class="code-block">インスタンス->メソッド()</div><br>の形式で呼び出すことができます。	40
87	2024-06-28 10:46:48	2024-06-28 10:51:07	1	5	プロパティの値の変更	2	PHP	<?php\\n\\\\\\\\tclass Test{\\n\\\\\\\\t\\\\\\\\tpublic $test_value = 1;\\n\\\\\\\\t}\\n\\n\\\\\\\\t$test_class = new Test();\\n\\\\\\\\t$test_class->test_value = 2;\\n\\\\\\\\techo $test_class->test_value;	\N	\N	\N	\N	クラスのプロパティは<br><div class="code-block">インスタンス->プロパティ = 変更後の値</div><br>の形式で変更することができます。	41
88	2024-06-28 10:52:10	2024-06-28 11:26:26	1	5	クラス内定数	1	PHP	<?php\\n\\\\\\\\tclass Test{\\n\\\\\\\\t\\\\\\\\tconst TEST_VALUE = 1;\\n\\\\\\\\t}\\n\\n\\\\\\\\t$test_class = new Test();\\n\\\\\\\\techo $test_class::TEST_VALUE;	\N	\N	\N	\N	クラス内での定数は、<br><div class="code-block">アクセス装飾子 const 定数名 = 定数の値</div><br>の形式で定義することができます。<br><br>また、定数はアクセス装飾子未記入でもエラーにはならず、publicとして扱われます。<br><br>定数はインスタンスごとではなく、同一クラスからのインスタンスであれば共有されます。<br>呼び出し方法もプロパティとは違い、<br><div class="code-block">インスタンス::定数</div><br>または、インスタンスを作成していなくても呼び出すことができ、<br><div class="code-block">クラス::定数</div><br>と記入して呼び出すことができます。	42
90	2024-06-28 11:02:55	2024-06-28 11:08:04	1	5	擬似変数(this)	1	PHP	<?php\\n\\\\\\\\tclass Test{\\n\\\\\\\\t\\\\\\\\tpublic $test_value = 1;\\n\\n\\\\\\\\t\\\\\\\\tpublic function test_method(){\\n\\\\\\\\t\\\\\\\\t\\\\\\\\treturn $this->test_value;\\n\\\\\\\\t\\\\\\\\t}\\n\\\\\\\\t}\\n\\n\\\\\\\\t$test_class = new Test();\\n\\\\\\\\techo $test_class->test_method();	\N	\N	\N	\N	メソッド内で同一インスタンスのプロパティを使用するときは<br><div class="code-block">$this-&gt;プロパティ</div><br>と記入します。<br><br>$thisは自分自身(インスタンス)を指します。	43
91	2024-06-28 11:09:17	2024-06-28 11:15:48	1	5	クラスの継承	1	PHP	<?php\\n\\\\\\\\tclass Test{\\n\\\\\\\\t\\\\\\\\tpublic $test_value = 1;\\n\\n\\\\\\\\t\\\\\\\\tpublic function test_method(){\\n\\\\\\\\t\\\\\\\\t\\\\\\\\treturn $this->test_value;\\n\\\\\\\\t\\\\\\\\t}\\n\\\\\\\\t}\\n\\n\\\\\\\\tclass Test2 extends Test{\\n\\n\\\\\\\\t}\\n\\n\\\\\\\\t$test_class = new Test2();\\n\\\\\\\\techo $test_class->test_method();	\N	\N	\N	\N	クラスの継承を行うと、継承元のプロパティ、メソッドが継承先に引き継がれます。<br><br>クラスの継承はクラス作成時に、<br><div class="code-block">クラス名 extends 継承するクラス</div><br>の形式で記入します。<br><br>継承は1つのクラスからしか行えないですが、多段的に複数回継承することはできます。<br><br>上の例では、Test2クラスにTestクラスを継承させています。<br>Test2クラスでは何も定義していないですが、test_value、test_methodが継承されているので使用可能となっています。<br><br>また、継承元のクラスを親クラス、継承先のクラスを子クラスと呼びます。	44
111	2024-06-29 16:40:16	2024-06-29 16:42:36	1	4	集合	{1, 2}	Python	set = {1, 2, 1}\\nprint(set)	\N	\N	\N	\N	集合とは重複した値を除外したリストのようなものです。<br><div class="code-block">変数名={値}</div><br>の形式で定義することができ,区切りで増やすことができます。	6
93	2024-06-28 11:28:22	2024-06-28 11:41:02	1	5	静的プロパティ、静的メソッド	1\\n1	PHP	<?php\\n\\\\\\\\tclass Test{\\n\\\\\\\\t\\\\\\\\tpublic static $test_value = 1;\\n\\n\\\\\\\\t\\\\\\\\tpublic static function test_method(){\\n\\\\\\\\t\\\\\\\\t\\\\\\\\treturn self::$test_value;\\n\\\\\\\\t\\\\\\\\t}\\n\\\\\\\\t}\\n\\n\\\\\\\\t$test_class = new Test2();\\n\\\\\\\\techo Test::$test_value .'<br>';\\n\\\\\\\\techo $test_class::test_method();	\N	\N	\N	\N	静的プロパティ、静的メソッドは、インスタンスごとではなく、クラスで共有されるプロパティ、メソッドとなっています。<br>静的プロパティ、静的メソッドともに、クラスに紐づいているため、インスタンスからでもクラスからでも呼び出すことができます。<br><br>静的プロパティは、<br><div class="code-block">アクセス装飾子 static プロパティ名</div><br>で定義することができ、静的メソッドは、<br><div  class="code-block">アクセス装飾子 static メソッド名()</div><br>で定義することができます。<br><br>静的プロパティの呼び出し方法は、<br><div class="code-block">インスタンスもしくはクラス::$プロパティ名</div><br>静的メソッドの呼び出し方法は、<br><div cllass="code-block">インスタンスもしくはクラス名::メソッド名</div><br>となっています。<br>静的メソッド呼び出し時はプロパティの前に$が必要な点に注意してください。<br><br>また、インスタンス、クラスのメソッドから自クラスの静的プロパティを使用するときは$thisではなくselfを使用し、<br><div class="code-block">self::$プロパティ名</div><br>としてください。	46
94	2024-06-28 11:42:09	2024-06-28 11:49:30	1	5	継承先で再定義できないメソッドの定義	1	PHP	<?php\\n\\\\\\\\tclass Test{\\n\\\\\\\\t\\\\\\\\tpublic $test_value = 1;\\n\\n\\\\\\\\t\\\\\\\\tfinal public function test_method(){\\n\\\\\\\\t\\\\\\\\t\\\\\\\\treturn $this->test_value;\\n\\\\\\\\t\\\\\\\\t}\\n\\\\\\\\t}\\n\\n\\\\\\\\t$test_class = new Test();\\n\\\\\\\\techo $test_class->test_method();	\N	\N	\N	\N	メソッド定義時に<br><div class="code-block">final アクセス装飾子 function メソッド名()</div><br>とすると、子クラスで同名のメソッドの再定義ができなくなります。<br><br>finalを付けていないメソッドを再定義するとメソッドな内容が書き換わってしまうので、書き換わると不都合のあるメソッドの前にはfinalを付けるようにしてください。	47
95	2024-06-28 11:55:37	2024-06-28 12:04:14	1	5	抽象クラス、抽象メソッド	1	PHP	<?php\\n\\\\\\\\tabstract class Test{\\n\\\\\\\\t\\\\\\\\tprotected $test_value=1;\\n\\n\\\\\\\\t\\\\\\\\tabstract public function test_method();\\n\\\\\\\\t}\\n\\n\\\\\\\\tclass Test2 extends Test{\\n\\\\\\\\t\\\\\\\\tpublic function test_method(){\\n\\\\\\\\t\\\\\\\\t\\\\\\\\treturn $this->test_value;\\n\\\\\\\\t\\\\\\\\t}\\n\\\\\\\\t}\\n\\n\\\\\\\\t$test_class = new Test2();\\n\\\\\\\\techo $test_class->test_method();	\N	\N	\N	\N	抽象クラスは、子クラスに未定義のメソッドなどの定義を任せて自身は他のクラスなどにも使えるような汎用性をもった共有な機能のみを持った基幹クラスの定義時などに使用されます。<br>抽象クラスはインスタンスを作成できない点に注意してください。<br><br>抽象クラスは、<br><div class="code-block">abstract class クラス名</div><br>とclassの前にabstractを付けることで定義することができます。<br><br>抽象メソッドは、処理内容などを記入せずに子クラスに処理内容を任せるときに使用します。<br><div class="code-block">abstract function メソッド名()</div><br>の形式で定義することができます。<br>抽象メソッドは、抽象クラスにしか定義できない点に注意してください。<br><br>また、再定義していない抽象メソッドがある状態でインスタンスを作成しようとするとエラーになるので注意してください。	48
96	2024-06-28 14:29:34	2024-06-28 14:40:45	1	5	インターフェース	test1	PHP	<?php\\n\\\\\\\\tinterface Test{\\n\\\\\\\\t\\\\\\\\tpublic function test_func();\\n\\\\\\\\t}\\n\\n\\\\\\\\tinterface Test2{\\n\\\\\\\\t\\\\\\\\tpublic function test_func2();\\n\\\\\\\\t}\\n\\n\\\\\\\\tclass Test_class implements Test, Test2{\\n\\\\\\\\t\\\\\\\\tpublic function test_func(){\\n\\\\\\\\t\\\\\\\\t\\\\\\\\techo 'test1';\\n\\\\\\\\t\\\\\\\\t}\\n\\n\\\\\\\\t\\\\\\\\tpublic function test_func2(){\\n\\\\\\\\t\\\\\\\\t\\\\\\\\techo 'test2';\\n\\\\\\\\t\\\\\\\\t}\\n\\\\\\\\t}\\n\\n\\\\\\\\t$test_class = new Test_class();\\n\\\\\\\\t$test_class->test_func();	\N	\N	\N	\N	インターフェースとは、インターフェースを実装するクラスがインターフェースで定義されているメソッドを実装することを強制する機能です。<br><br>インターフェースは<br><div class="code-block">interface インターフェース名{<br>  アクセス装飾子 function メソッド名();<br>}</div><br>の形式で定義することができます。<br>また、一つのインターフェースで複数のメソッドの実装を強制することもできます。<br><br>インターフェースの実装は<br><div class="code-block">class クラス名 implements インターフェース名</div><br>の形式で実装することができます。<br><br>インターフェースは,区切りで複数のインターフェースを実装することも可能となっています。<br>インターフェースを実装したクラスがインターフェースで定義したメソッドをオーバーライドしなかった場合はエラーとなります。	49
97	2024-06-28 14:45:04	2024-06-28 14:48:54	1	5	トレイト	1	PHP	<?php\\n\\\\\\\\ttrait Test_trait{\\n\\\\\\\\t\\\\\\\\tpublic $test = 1;\\n\\n\\\\\\\\t\\\\\\\\tpublic function test_func(){\\n\\\\\\\\t\\\\\\\\t\\\\\\\\treturn $this->test;\\n\\\\\\\\t\\\\\\\\t}\\n\\\\\\\\t}\\n\\n\\\\\\\\tclass TestClass{\\n\\\\\\\\t\\\\\\\\tuse Test_trait;\\n\\\\\\\\t}\\n\\n\\\\\\\\t$test_class = new TestClass();\\n\\\\\\\\techo $test_class->test_func();	\N	\N	\N	\N	トレイトで定義したものはクラスに対してコピペのような感じで使用することができます。<br><br>トレイトは<br><div class="code-block">trait トレイト名{<br>   プロパティやメソッドを定義<br>}</div><br>の形式で定義することができます。<br><br>トレイトの使用はクラス内に<br><div class="code-block">use トレイト名</div><br>の形式で使用することができます。	50
98	2024-06-28 14:53:50	2024-06-28 14:56:39	1	5	コンストラクタ	1	PHP	<?php\\n\\\\\\\\tclass TestClass{\\n\\\\\\\\t\\\\\\\\tpublic $a;\\n\\\\\\\\t\\\\\\\\tpublic $b;\\n\\\\\\\\t\\\\\\\\tpublic function __construct($value, $value2){\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t$this->a = $value;\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t$this->b = $value2;\\n\\\\\\\\t\\\\\\\\t}\\n\\\\\\\\t}\\n\\n\\\\\\\\t$test_class = new TestClass(1, 2);\\n\\\\\\\\techo $test_class->a;	\N	\N	\N	\N	コンストラクタとは、クラスからインスタンスが作成されるときに実行される特殊なメソッドなどでプロパティの値の設定などに使用されます。<br>__constructの名称で定義したメソッドはコンストラクタとして扱われます。<br><br>また、クラス作成時の引数は、コンストラクタの引数として使用されます。	51
99	2024-06-28 15:01:16	2024-06-28 15:26:40	1	5	デストラクタ	1\\nインスタンスが破棄されました	PHP	<?php\\n\\\\\\\\tclass TestClass{\\n\\\\\\\\t\\\\\\\\tpublic $a;\\n\\\\\\\\t\\\\\\\\tpublic function __construct($value){\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t$this->a = $value;\\n\\\\\\\\t\\\\\\\\t}\\n\\n\\\\\\\\t\\\\\\\\tpublic function __destruct(){\\n\\\\\\\\t\\\\\\\\t\\\\\\\\techo '<div>インスタンスが破棄されました</div>';\\n\\\\\\\\t\\\\\\\\t}\\n\\\\\\\\t}\\n\\n\\\\\\\\t$test_class = new TestClass();\\n\\\\\\\\techo $test_class->a;\\n\\\\\\\\t$test_class = null;	\N	\N	\N	\N	デストラクタはクラスが破棄されたときに実行される特殊なメソッドです。<br>メソッド名を__destructとすることでデストラクタとなります。	52
100	2024-06-28 15:06:22	2024-06-28 15:26:28	1	5	クラスを文字列として呼び出したときの処理	文字列として呼び出されました	PHP	<?php\\n\\\\\\\\tclass TestClass{\\n\\\\\\\\t\\\\\\\\tpublic function __toString(){\\n\\\\\\\\t\\\\\\\\t\\\\\\\\treturn '<div>文字列として呼び出されました</div>';\\n\\\\\\\\t\\\\\\\\t}\\n\\\\\\\\t}\\n\\n\\\\\\\\t$test_class = new TestClass();\\n\\\\\\\\techo $test_class;	\N	\N	\N	\N	__toStringメソッドを定義することでインスタンスを文字列として呼び出されたときの処理を実装することができます。<br>__tostringメソッドは、戻り値を文字列にしないとエラーとなります。	53
101	2024-06-28 15:20:50	2024-06-28 15:26:10	1	5	アクセスできないプロパティを呼び出したときの処理	aにはクラス外からアクセスすることはできません	PHP	<?php\\n\\\\\\\\tclass TestClass{\\n\\\\\\\\t\\\\\\\\tprivate $a = 1;\\n\\\\\\\\t\\\\\\\\tpublic function __get($name){\\n\\\\\\\\t\\\\\\\\t\\\\\\\\treturn "{$name}にはクラス外からアクセスすることはできません";\\n\\\\\\\\t\\\\\\\\t}\\n\\\\\\\\t}\\n\\n\\\\\\\\t$test_class = new TestClass();\\n\\\\\\\\techo $test_class->a;	\N	\N	\N	\N	__getメソッドは、アクセス装飾子などでアクセスできないプロパティにアクセスしようとしたときの処理を記入することができます。<br>__getメソッドの引数には呼び出そうとしたプロパティ名が代入されます。	54
102	2024-06-28 16:27:25	2024-06-28 16:31:28	1	5	アクセスできないプロパティを変更しようとしたときの処理	aはクラス外から変更することはできません	PHP	<?php\\n\\\\\\\\tclass TestClass{\\n\\\\\\\\t\\\\\\\\tprivate $a = 1;\\n\\\\\\\\t\\\\\\\\tpublic function __set($name, $value){\\n\\\\\\\\t\\\\\\\\t\\\\\\\\techo "{$name}はクラス外から変更することはできません";\\n\\\\\\\\t\\\\\\\\t}\\n\\\\\\\\t}\\n\\n\\\\\\\\t$test_class = new TestClass();\\n\\\\\\\\t$test_class->a = 1;	\N	\N	\N	\N	__setメソッドはアクセス装飾子などでアクセスできないプロパティを変更しようとしたときに呼び出されるメソッドです。<br><br>__setメソッドの第1引数は変更しようとしたプロパティ名、第2引数は変更しようとした変更後の値となります。	55
103	2024-06-28 16:32:51	2024-06-28 16:37:37	1	5	アクセスできないメソッドを呼び出そうとしたときの処理	test_methodにはクラス外からアクセスすることはできません。	PHP	<?php\\n\\\\\\\\tclass TestClass{\\n\\\\\\\\t\\\\\\\\tprivate function test_method(){\\n\\\\\\\\t\\\\\\\\t\\\\\\\\techo 'test_methodが呼び出されました。';\\n\\\\\\\\t\\\\\\\\t}\\n\\\\\\\\t\\\\\\\\tpublic function __call($name, $arg){\\n\\\\\\\\t\\\\\\\\t\\\\\\\\techo "{$name}にはクラス外からアクセスすることはできません。";\\n\\\\\\\\t\\\\\\\\t}\\n\\\\\\\\t}\\n\\n\\\\\\\\t$test_class = new TestClass();\\n\\\\\\\\t$test_class->test_method();	\N	\N	\N	\N	__callメソッドは、アクセス装飾子などでアクセスできないメソッドを呼び出そうとしたときに実行されるメソッドです。<br>第1引数には呼び出そうとしたメソッド名、第2引数には呼び出そうとしたときの引数が代入されます。	56
106	2024-06-29 15:51:33	2024-06-29 16:09:54	1	4	Python環境構築	\N	\N	\N	\N	\N	\N	\N	Pythonとは、AI、データ分析などでよく使用されるプログラミング言語ですが、モジュールが多数あり、簡単な記述で様々なことができます。<br>拡張子を.pyとすることでPythonファイルを作成することができます。<br>また、環境構築をせずにとりあえず触ってみたいという方は、<a href="https://colab.research.google.com/">Colaboratory</a>ですぐにPythonを実行することができます。<br><br><h2>Pythonのインストール</h2><br>コマンドプロンプトで<br><div class="code-block">Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))<br><br>choco install python</div><br>と入力することでPythonをインストールすることができます。<br>長いですが、最初の3行(Set～ps1))まで)で1つのコマンドとなっています。<br><div class="code-block">python --version</div><br>と入力してPythonのバージョンが表示されるとインストールに成功しています。<br>作成したPythonファイルは<br><div class="code-block">python ファイル名</div><br>の形式でコマンドプロンプトに入力することで使用することができます。<br><br><h2>Jupyter Notebookのインストール</h2><br>Jupyter Notebookとは、手軽にPythonを実行して試すことができるツールです。<br><div class="code-block">pip install notebook</div><br>とコマンドプロンプトに入力することができます。<br>インストール後、<br><div class="code-block">jupyter notebook</div><br>とコマンドプロンプトに入力するとJupyter Notebookが開かれます。<br>右上のnewからPythonを選択するとPythonを手軽に使用することができます。<br><br>また、visual stadio codeを使用している方は、拡張機能Jupyterをインストールすることで、拡張子を.ipynbとしたファイルを開くと、Jupyter Notebookのような感じで使用できます。<br><br><br>	1
107	2024-06-29 16:11:39	2024-06-29 16:13:51	1	4	文字出力	test	Python	print('test')	\N	\N	\N	\N	Pythonでは<br><div class="code-block">print(出力したい内容)</div><br>と入力することで文字として出力することができます。	2
104	2024-06-28 16:53:00	2024-06-28 16:57:16	1	5	アクセスできない静的メソッドを呼び出そうとしたときの処理	test_methodにはクラス外からアクセスすることはできません。	PHP	<?php\\n\\\\\\\\tclass TestClass{\\n\\\\\\\\t\\\\\\\\tprivate static function test_method(){\\n\\\\\\\\t\\\\\\\\t\\\\\\\\techo 'test_methodが呼び出されました。';\\n\\\\\\\\t\\\\\\\\t}\\n\\\\\\\\t\\\\\\\\tpublic static function __callstatic($name, $arg){\\n\\\\\\\\t\\\\\\\\t\\\\\\\\techo "{$name}にはクラス外からアクセスすることはできません。";\\n\\\\\\\\t\\\\\\\\t}\\n\\\\\\\\t}\\n\\n\\\\\\\\t$test_class = new TestClass();\\n\\\\\\\\t$test_class::test_method();	\N	\N	\N	\N	__callstaticメソッドは、アクセス装飾子などで呼び出せない静的メソッドを呼び出そうとしたときに呼び出されるメソッドです。<br>第1引数には呼び出そうとしたメソッド名、第2引数には引数にしようとした値が代入されます。<br><br>__callstaticメソッド自身もstaticをつけて静的メソッドにする必要がある点に注意してください。	57
105	2024-06-28 16:58:52	2024-06-28 17:03:18	1	5	クラスを関数として呼び出そうとしたときの処理	TestClassが関数として呼び出されました。	PHP	<?php\\n\\\\\\\\tclass TestClass{\\n\\\\\\\\t\\\\\\\\tpublic function __invoke(){\\n\\\\\\\\t\\\\\\\\t\\\\\\\\techo 'TestClassが関数として呼び出されました。';\\n\\\\\\\\t\\\\\\\\t}\\n\\\\\\\\t}\\n\\n\\\\\\\\t$test_class = new TestClass();\\n\\\\\\\\t$test_class();	\N	\N	\N	\N	__invokeメソッドはクラスを関数として呼び出そうとしたときに実行されるメソッドです。<br>仮引数を設定することもできますが、クラスを関数として呼び出す側にも対応する引数を設定する必要があります。	58
108	2024-06-29 16:14:34	2024-06-29 16:17:18	1	4	変数	test	Python	a = 'test'\\nprint(a)	\N	\N	\N	\N	変数とは値を一時的に格納する入れ物のことです。<br><div class="code-block">変数名 = 値</div><br>とすることで定義することができます。<br>定義以降、変数を呼び出すと格納した値が使用されます。	3
112	2024-06-29 16:46:04	2024-06-29 16:51:48	1	4	関数	3	Python	def test(a, b):\\n   c = a+ b\\n   return c\\n\\nd = test(1, 2)\\nprint(d)	\N	\N	\N	\N	関数とは与えられた値をもとに、処理を実行し、その結果を返す命令のことです。<br><br>関数は<br><div class="code-block">def 関数名(仮引数):<br>   関数の処理内容<br>   return 戻り値(関数外に返したい値)</div><br>の形式で作成することができます。<br>また、仮引数は,区切りで増やすことができます。<br><br>関数呼び出し時は、<br><div class="code-block">関数名(引数)</div><br>の形式で呼び出すことができます。<br><br>上の例では、test関数は2つの値の合計を返す関数となっています。<br>呼び出し時に引数が(1, 2)となっており、それぞれが関数のa, bに代入され計算されています。	7
113	2024-06-29 16:53:38	2024-06-29 16:59:19	1	4	条件分岐(if文)	a=1\\n\\nif(a<0):\\n   print('aは0未満です')\\nelif(a==0):\\n   print('aは0です')\\nelse:\\n   print('aは0より大きいです')	Python	a=1\\n\\nif(a<0):\\n   print('aは0未満です')\\nelif(a==0):\\n   print('aは0です')\\nelse:\\n   print('aは0より大きいです')	\N	\N	\N	\N	if文は、条件によって処理を分岐するときに使用します。<br><br>if文は<br><div class="code-block">if(条件):<br>   条件に一致していた時の処理<br>elif(条件2):<br>   条件2に一致していた時の処理<br>else:<br>   どの条件にも一致しなかったときの処理</div><br>の形式で記入します。<br>条件に一致するとそれ以降の処理は行われません。	8
114	2024-06-29 17:05:35	2024-06-29 17:10:46	1	4	条件分岐(match文)	男性です	Python	value='男性'\\n\\nmatch value:\\n    case '男性':\\n        print("男性です")\\n    case '女性':\\n        print("女性です")\\n    case _:\\n        print("性別不明です")	\N	\N	\N	\N	match文は変数の内容に応じて条件分岐するときに使用される文となっています。<br><div class="code-block">match 変数名:<br>   case 条件:<br>      条件に一致したときの処理<br>   case _:<br>      どの条件にも一致しなかったときの処理</div><br>の形式で記入します。<br>また、一致する条件以降の処理は行われません。	9
115	2024-06-29 17:12:47	2024-06-29 17:16:43	1	4	繰り返し処理(while文)	0\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9	Python	value = 0\\n\\nwhile value < 10:\\n    print(value)\\n    value += 1	\N	\N	\N	\N	while文は条件に一致する間繰り返しよりを行う文です。<br><div class="code-block">while 条件:<br>   条件に一致する間行う処理</div><br>の形式で記入します。<br><br>最後に使用する変数の値の増減を忘れると無限ループしてしまうので気を付けてください。<br><div class="code-block">変数名 += 1</div><br>は変数の値を+1するという内容となっています。	10
117	2024-06-30 03:34:34	2025-03-22 19:40:03.38076	4	10	インストール、プロジェクトの作成など	\N	\N	\N	\N	\N	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>Djangoとは</h2>\n    <p>Djangoとは、PythonのサーバーサイドのWebフレームワークでWebアプリの作成などに使われます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>Djangoのインストール</h2>\n    <p>Pythonがインストールされている環境であれば、以下のコマンドでインストールできます：</p>\n    \n    <div class="code-block">pip install django</div>\n    \n    <p>コマンドプロンプトに入力することでインストールすることができます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>プロジェクトの作成</h2>\n    <p>コマンドプロンプトを開きプロジェクトを作成したいフォルダに移動後、以下のコマンドを実行します：</p>\n    \n    <div class="code-block">django-admin startproject プロジェクト名</div>\n    \n    <p>このコマンドを実行すると、現在のフォルダにプロジェクト名のフォルダが作成されます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>settings.pyの設定</h2>\n    <p>フォルダが作成されたら、最初からあるフォルダの中にあるsetting.pyを開き、以下のように修正します：</p>\n    \n    <h3>osモジュールの追加</h3>\n    <p>以下の部分を：</p>\n    <div class="code-block">from pathlib import Path</div>\n    \n    <p>次のように変更します：</p>\n    <div class="code-block">from pathlib import Path<br>import os</div>\n    \n    <h3>言語と時間の設定</h3>\n    <p>日本語、日本の時間に設定するために、以下の部分を：</p>\n    <div class="code-block">LANGUAGE_CODE = "en-us"<br><br>TIME_ZONE = "UTC"</div>\n    \n    <p>次のように書き換えます：</p>\n    <div class="code-block">LANGUAGE_CODE = "ja"<br><br>TIME_ZONE = "Asia/Tokyo"</div>\n    \n    <h3>テンプレートパスの設定</h3>\n    <p>テンプレートを直下のテンプレートとして使用するために、以下の部分を：</p>\n    <div class="code-block">TEMPLATES = [<br>    {<br>        "BACKEND": "django.template.backends.django.DjangoTemplates",<br>        "DIRS": [],<br>        "APP_DIRS": True,<br>        "OPTIONS": {<br>            "context_processors": [<br>                "django.template.context_processors.debug",<br>                "django.template.context_processors.request",<br>                "django.contrib.auth.context_processors.auth",<br>                "django.contrib.messages.context_processors.messages",<br>            ],<br>        },<br>    },<br>]</div>\n    \n    <p>次のように書き換えます：</p>\n    <div class="code-block">TEMPLATES = [<br>    {<br>        "BACKEND": "django.template.backends.django.DjangoTemplates",<br>        'DIRS': [os.path.join(BASE_DIR, 'templates')],<br>        "APP_DIRS": True,<br>        "OPTIONS": {<br>            "context_processors": [<br>                "django.template.context_processors.debug",<br>                "django.template.context_processors.request",<br>                "django.contrib.auth.context_processors.auth",<br>                "django.contrib.messages.context_processors.messages",<br>            ],<br>        },<br>    },<br>]</div>\n    \n    <p>これは、views.pyで使用するテンプレートのパスを設定しています。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>テンプレートフォルダの作成</h2>\n    <p>設定後、プロジェクト直下に、templatesフォルダを作成してください。</p>\n    <p>このフォルダは、viewで読み込むhtmlのテンプレートファイルを置くためのフォルダとなっています。</p>\n    \n    <div class="note">\n        <p><strong>注意：</strong> テンプレートフォルダの場所が正しくないと、テンプレートを見つけられずエラーが発生する可能性があります。</p>\n    </div>\n</div>	3
118	2024-06-30 03:45:37	2025-03-22 19:41:08.56983	4	10	仮想サーバーの立ち上げ	\N	\N	\N	\N	\N	\N	\N	<div class="code-block">python manage.py runserver</div><br>\nとすることで仮想サーバーを作動させることができます。<br>\n<a href="http://127.0.0.1:8000/">http://127.0.0.1:8000/</a>にアクセスして画面が表示されたら成功です。	4
120	2024-06-30 04:13:54	2025-03-22 19:42:42.797553	4	10	urls.py	\N	\N	\N	\N	\N	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>urls.pyの役割</h2>\n    <p>urls.pyは、フロントから受け取った内容に応じてルーティング(どのアプリケーションのviews.py内のどのクラスで処理をおこなうのか)を選定するクラスとなっています。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>デフォルトのurls.py</h2>\n    <p>プロジェクト作成時にできたフォルダのurls.pyを開くと、以下のようになっています：</p>\n    \n    <div class="code-block">from django.contrib import admin<br>from django.urls import path<br><br>urlpatterns = [<br>    path("admin/", admin.site.urls),<br>]</div>\n    \n    <p>これはルート(ローカル環境だとhttp://127.0.0.1:8000)/admin/にアクセスするとデータベースの管理者ページが開かれるという内容になっています。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>ルーティングの追加方法</h2>\n    <p>新たにルーティングは、以下の形式で追加することができます：</p>\n    \n    <div class="code-block">urlpatterns = [<br>    path("admin/", admin.site.urls),<br>    path('ルートからの相対パス',views.使用するviews内のクラス名.as_view(), name = 'テンプレートから呼び出すときの名称'),<br>]</div>\n    \n    <p>,区切りで何個でも追加することができるので大規模なアプリケーションでも対応可能となっています。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>別ファイルのurls.pyを読み込む方法</h2>\n    <p>別ファイルのurls.pyを読み込むときは以下の形式で記入します：</p>\n    \n    <div class="code-block">path('ルートからの相対パス/', include(('読み込むurls.pyのあるアプリケーション名.urls', '読み込み時の名称'),namespace='読み込み時の名称')),</div>\n    \n    <p><strong>例：</strong></p>\n    <p>アプリケーション作成時にできたフォルダのurls.py</p>\n    \n    <div class="code-block">from django.contrib import admin<br>from django.urls import path, include<br><br>urlpatterns = [<br>    path("admin/", admin.site.urls),<br>    path('test/', include(('test_application.urls', 'test_application'),namespace='test_application')),<br>]</div>\n    \n    <p>作成したアプリケーションのurls.py(例では'test_application'としています。)</p>\n    \n    <div class="code-block">from django.contrib import admin<br>from django.urls import path<br>from . import views<br><br>urlpatterns = [<br>    path('test_page',views.TestView.as_view(), name = 'test_view'),<br>]</div>\n    \n    <p>このようにすると、ルート/test/test_pageにアクセスするとtest_applicationフォルダのviews.pyのTestViewクラスが動作します。(まだTestViewクラスを作成していないため現状ではエラーが出ます。)</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>URLパラメータの渡し方</h2>\n    <p>URLを通じてビューにパラメータを渡すことができます：</p>\n    \n    <div class="code-block">path('test_page/&lt;str:test_string&gt;/&lt;int:test_int&gt;/', views.TestView.as_view(), name='test_view'),</div>\n    \n    <p>この形式で記入すると、test_page/test/1のようにアクセスするとTestViewクラスに対して変数test_stringとしてtestを、変数test_intとして1を渡すことができます。</p>\n    \n    <p>str、intは型と呼ばれるもので、strは文字列、intは整数を指します。</p>\n    \n    <div class="note">\n        <p><strong>重要：</strong> URLパターンを定義する際は、パターンの順序に注意してください。Djangoは最初にマッチしたパターンを使用します。</p>\n        <p>より具体的なパターンを先に、より一般的なパターンを後に配置することをお勧めします。</p>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">6</span>その他の主なURLパターンの型</h2>\n    <table>\n        <tr>\n            <th>パターン</th>\n            <th>説明</th>\n            <th>例</th>\n        </tr>\n        <tr>\n            <td>&lt;int:name&gt;</td>\n            <td>整数</td>\n            <td>1, 2, 3</td>\n        </tr>\n        <tr>\n            <td>&lt;str:name&gt;</td>\n            <td>文字列（/以外の任意の文字）</td>\n            <td>hello, world</td>\n        </tr>\n        <tr>\n            <td>&lt;slug:name&gt;</td>\n            <td>スラッグ（英数字、ハイフン、アンダースコア）</td>\n            <td>my-page, page_1</td>\n        </tr>\n        <tr>\n            <td>&lt;uuid:name&gt;</td>\n            <td>UUID</td>\n            <td>075194d3-6885-417e-a8a8-6c931e272f00</td>\n        </tr>\n        <tr>\n            <td>&lt;path:name&gt;</td>\n            <td>パス（/を含む任意の文字）</td>\n            <td>news/2024/03/23</td>\n        </tr>\n    </table>\n</div>	6
158	2024-07-01 06:09:16	2024-07-01 06:13:55	1	3	繰り返し処理(最低1回は実行する)	\N	Javascript	let count = 11;\\ndo {\\n    console.log(count);\\n    count++;\\n} while(count <= 10);	\N	\N	\N	\N	do-while文を使用することで、最初から条件を満たしていないときでも最低1回は実行させることができます。<br><br>do-while文は<br><div class="code-block">do{<br>   条件を満たす間繰り返す処理(最初から条件を満たさないときは1回実行される)<br>}while(条件)</div><br>の形式で記入します。<br><br>上の例では、変数countの値が11となっており、最初から条件が満たされていませんが1回だけ実行されています。	16
123	2024-06-30 06:46:44	2025-03-22 19:46:35.250739	4	10	models.py	\N	models.py	class Company(models.Model):\\n    name = models.CharField(\\n        verbose_name='会社名', max_length=20)\\n    \\nclass Person(models.Model):\\n    name = models.CharField(\\n        verbose_name='氏名', max_length=20)\\n    age = models.PositiveIntegerField(\\n        verbose_name='年齢', blank=True, default='')\\n    birth = models.DateTimeField(\\n        null=True, blank=True, verbose_name='誕生日', default=None)\\n    company = models.ForeignKey(\\n        Company, null=True, on_delete=models.CASCADE, related_name='person')	\N	\N	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>models.pyの役割</h2>\n    <p>models.pyは、データベースにテーブルを作成したりするのに使用されます。</p>\n    \n    <div class="code-block">class テーブル名(models.Model):<br>   定義するカラム名</div>\n    \n    <p>の形式でテーブルを作成することができます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>主なフィールドタイプ</h2>\n    <table>\n        <tr>\n            <th>フィールドタイプ</th>\n            <th>説明</th>\n        </tr>\n        <tr>\n            <td>models.CharField</td>\n            <td>文字列</td>\n        </tr>\n        <tr>\n            <td>models.PositiveIntegerField</td>\n            <td>正の整数</td>\n        </tr>\n        <tr>\n            <td>models.DateTimeField</td>\n            <td>日時</td>\n        </tr>\n        <tr>\n            <td>models.ForeignKey</td>\n            <td>多側のテーブルからの他の1側のテーブルへのリレーション</td>\n        </tr>\n    </table>\n    \n    <p>また、verbose_nameはadminページに表示されるときの列名となっています。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>モデル定義の例</h2>\n    <p>以下は、CompanyテーブルとPersonテーブルの例です：</p>\n    \n    <div class="code-block">from django.db import models<br><br>class Company(models.Model):<br>    name = models.CharField(max_length=20, verbose_name='会社名')<br>    <br>    def __str__(self):<br>        return self.name<br><br>class Person(models.Model):<br>    name = models.CharField(max_length=20, verbose_name='名前')<br>    age = models.PositiveIntegerField(blank=True, default='', verbose_name='年齢')<br>    birth = models.DateTimeField(null=True, blank=True, verbose_name='生年月日')<br>    company = models.ForeignKey(Company, on_delete=models.CASCADE, related_name='employees', verbose_name='所属会社')<br>    <br>    def __str__(self):<br>        return self.name</div>\n    \n    <p>上の例では、以下のようなテーブルが定義されています：</p>\n    \n    <h3>Companyテーブル</h3>\n    <ul>\n        <li>上限20文字の文字列のnameフィールド</li>\n    </ul>\n    \n    <h3>Personテーブル</h3>\n    <ul>\n        <li>上限20文字の文字列のnameフィールド</li>\n        <li>正の整数のageフィールド(未記入時は'')</li>\n        <li>日時型のbirthフィールド(未記入時はNone)</li>\n        <li>Companyテーブルへのリレーションのcompanyフィールド</li>\n    </ul>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>リレーションの種類</h2>\n    <table>\n        <tr>\n            <th>リレーションタイプ</th>\n            <th>説明</th>\n        </tr>\n        <tr>\n            <td>models.ForeignKey</td>\n            <td>多対1の多側からのリレーション</td>\n        </tr>\n        <tr>\n            <td>models.OneToOneField</td>\n            <td>1対1でのリレーション</td>\n        </tr>\n        <tr>\n            <td>models.ManyToManyField</td>\n            <td>多対多のリレーション</td>\n        </tr>\n    </table>\n    \n    <p>また、1側から多側のデータを取得したいときなどはrelated_nameで指定されている文字列を使用してさかのぼります。</p>\n    \n    <div class="code-block"># 例: ある会社の全従業員を取得<br>company = Company.objects.get(name='サンプル株式会社')<br>employees = company.employees.all()  # related_nameを使用</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>フィールドのオプション</h2>\n    <table>\n        <tr>\n            <th>オプション</th>\n            <th>説明</th>\n        </tr>\n        <tr>\n            <td>max_length</td>\n            <td>文字列フィールドの最大長</td>\n        </tr>\n        <tr>\n            <td>null</td>\n            <td>True の場合、データベースにNULLとして保存可能</td>\n        </tr>\n        <tr>\n            <td>blank</td>\n            <td>True の場合、フォームで空入力が可能</td>\n        </tr>\n        <tr>\n            <td>default</td>\n            <td>デフォルト値</td>\n        </tr>\n        <tr>\n            <td>choices</td>\n            <td>選択肢のリスト</td>\n        </tr>\n        <tr>\n            <td>on_delete</td>\n            <td>ForeignKeyで参照先が削除された場合の動作</td>\n        </tr>\n        <tr>\n            <td>verbose_name</td>\n            <td>管理画面に表示するフィールド名</td>\n        </tr>\n    </table>\n    \n    <div class="note">\n        <p><strong>重要：</strong> <code>null=True</code>と<code>blank=True</code>は異なります。nullはデータベースレベル、blankはフォームバリデーションレベルの設定です。</p>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">6</span>マイグレーションの実行</h2>\n    <p>models.py内でクラスを定義後プロジェクトのルートディレクトリで、以下のコマンドを実行します：</p>\n    \n    <div class="code-block">python manage.py makemigrations<br>python manage.py migrate</div>\n    \n    <p>これらのコマンドを実行することでテーブルが作成されます。</p>\n    \n    <div class="flow">\n        <div class="flow-item">\n            <h3>makemigrations</h3>\n            <p>モデルの変更を検出し、マイグレーションファイルを作成します。</p>\n        </div>\n        \n        <div class="flow-item">\n            <h3>migrate</h3>\n            <p>作成されたマイグレーションファイルを実際にデータベースに適用します。</p>\n        </div>\n    </div>\n    \n    <div class="note">\n        <p><strong>注意：</strong> モデルを変更するたびに、これらのコマンドを実行してデータベースを更新する必要があります。</p>\n    </div>\n</div>	8
128	2024-06-30 07:25:44	2025-03-22 19:51:17.426357	4	10	admin.py	\N	admin.py	from django.contrib import admin\\nfrom .models import *\\n\\nadmin.site.register(Company)\\nadmin.site.register(Person)	\N	\N	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>admin.pyの役割</h2>\n    <p>admin.pyは、adminページで表示するテーブルの設定などを行うファイルです。</p>\n    \n    <div class="code-block">admin.site.register(models.py内のクラス名)</div>\n    \n    <p>と記入することでadminページに対象のテーブルが表示されるようになります。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>基本的な使用例</h2>\n    <p>以下は基本的な登録方法の例です：</p>\n    \n    <div class="code-block">from django.contrib import admin<br>from . import models<br><br>admin.site.register(models.Company)<br>admin.site.register(models.Person)</div>\n    \n    <p>上の例では、models.pyのCompanyクラスとPersonクラスをadminページに表示させています。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>adminページへのアクセス</h2>\n    <p>adminページはデフォルトのローカル環境なら<a href="http://127.0.0.1:8000/admin/">http://127.0.0.1:8000/admin/</a>にアクセスすることで開くことができます。</p>\n    \n    <div class="note">\n        <p><strong>注意：</strong> adminページにアクセスするには、事前に<code>python manage.py createsuperuser</code>コマンドで管理者ユーザーを作成しておく必要があります。</p>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>注意点</h2>\n    <p>admin.pyを設定する際の主な注意点：</p>\n    <ul>\n        <li>ファイルの先頭でmodels.pyの読み込み忘れには注意してください。</li>\n        <li>テーブルが表示されない場合は、settings.pyでアプリケーションの追加ができていないかもしれないので確認してください。</li>\n    </ul>\n    \n    <div class="code-block"># settings.py<br><br>INSTALLED_APPS = [<br>    "django.contrib.admin",<br>    "django.contrib.auth",<br>    "django.contrib.contenttypes",<br>    "django.contrib.sessions",<br>    "django.contrib.messages",<br>    "django.contrib.staticfiles",<br>    "あなたのアプリケーション名",  # ここにアプリケーション名が追加されているか確認<br>]</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>高度なカスタマイズ</h2>\n    <p>ModelAdminクラスを使用して、管理画面の表示をカスタマイズできます：</p>\n    \n    <div class="code-block">from django.contrib import admin<br>from . import models<br><br>class PersonAdmin(admin.ModelAdmin):<br>    list_display = ('name', 'age', 'company')  # 一覧表示するフィールド<br>    list_filter = ('company',)  # フィルタリング可能なフィールド<br>    search_fields = ('name',)  # 検索対象フィールド<br>    list_per_page = 20  # 1ページあたりの表示件数<br><br>admin.site.register(models.Person, PersonAdmin)</div>\n    \n    <p>このように設定することで、管理画面での操作性が向上します。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">6</span>インラインモデル表示</h2>\n    <p>関連するモデルを同じページで編集できるようにするには：</p>\n    \n    <div class="code-block">from django.contrib import admin<br>from . import models<br><br>class PersonInline(admin.TabularInline):  # TabularInlineまたはStackedInline<br>    model = models.Person<br>    extra = 1  # 追加用の空フォーム数<br><br>class CompanyAdmin(admin.ModelAdmin):<br>    inlines = [PersonInline]<br><br>admin.site.register(models.Company, CompanyAdmin)<br>admin.site.register(models.Person)</div>\n    \n    <p>これにより、会社の編集ページで所属する人物を一緒に編集できます。</p>\n</div>	10
129	2024-06-30 13:15:50	2025-03-22 19:53:37.750585	4	10	テンプレート	test\\ntest2	base.html	{% load static %}\\n\\n<!DOCTYPE html>\\n<html lang="ja">\\n    <head>\\n        <title>{% block title %}{% endblock %}</title>\\n　　　　　<link href="{% static 'css/styles.css' %}" rel="stylesheet" />\\n    </head>\\n\\n    <body>\\n        {% block body %}{% endblock %}\\n        <script src="{% static 'js/scripts.js' %}"></script>\\n    </body>\\n</html>	test.html	{% extends 'base.html' %}\\n\\n{% block title %}test_title{% endblock %}\\n\\n{% block body %}\\n<div>test</div>\\n<div>test2</div>\\n{% endblock %}	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>Djangoテンプレートの基本</h2>\n    <p>Djangoのテンプレートでは通常のHTMLの記述とは別にDjango独自のタグを使用することもできます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>スタティックファイルの利用</h2>\n    <p>スタティックファイル（CSS、JavaScript、画像など）を利用するには、まず以下のようにテンプレートの先頭に記述します：</p>\n    \n    <div class="code-block">{% load static %}</div>\n    \n    <p>これは、settings.pyで設定したstaticフォルダのファイルを読み込むという内容になっています。</p>\n    \n    <p>settings.pyで以下の部分を：</p>\n    <div class="code-block">STATIC_URL = "static/"</div>\n    \n    <p>次のように変更します：</p>\n    <div class="code-block">STATIC_URL = '/static/'<br>STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]</div>\n    \n    <p>この設定により、プロジェクト直下のstaticフォルダのファイルを読み込むことができるようになります。</p>\n    \n    <p>staticフォルダのファイルは、以下の形式で読み込むことができます：</p>\n    <div class="code-block">&lt;link href="{% static 'staticフォルダからのパス' %}" rel="stylesheet"&gt;<br>&lt;script src="{% static 'staticフォルダからのパス' %}"&gt;&lt;/script&gt;</div>\n    \n    <p>例えば、static/css/styles.cssとstatic/js/scripts.jsの2つのファイルを読み込む場合：</p>\n    <div class="code-block">&lt;link href="{% static 'css/styles.css' %}" rel="stylesheet"&gt;<br>&lt;script src="{% static 'js/scripts.js' %}"&gt;&lt;/script&gt;</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>テンプレートの継承</h2>\n    <p>特定の場所に別ファイルのHTMLなどを埋め込みたいときは、テンプレートの継承機能を使用します。</p>\n    \n    <h3>ベーステンプレート (base.html)</h3>\n    <p>土台側のHTMLファイルに、以下のように記述します：</p>\n    <div class="code-block">{% block ブロック名 %}{% endblock %}</div>\n    \n    <p>例：</p>\n    <div class="code-block">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    {% load static %}<br>    &lt;title&gt;{% block title %}デフォルトタイトル{% endblock %}&lt;/title&gt;<br>    &lt;link href="{% static 'css/styles.css' %}" rel="stylesheet"&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;header&gt;サイトヘッダー&lt;/header&gt;<br>    <br>    {% block content %}{% endblock %}<br>    <br>    &lt;footer&gt;サイトフッター&lt;/footer&gt;<br>    &lt;script src="{% static 'js/scripts.js' %}"&gt;&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;</div>\n    \n    <h3>子テンプレート</h3>\n    <p>埋め込む側のHTMLには、先頭に以下を記述します：</p>\n    <div class="code-block">{% extends '土台側のHTMLのファイル名' %}</div>\n    \n    <p>そして、埋め込みたい内容を対応するブロック内に記述します：</p>\n    <div class="code-block">{% block ブロック名 %}埋め込み内容{% endblock %}</div>\n    \n    <p>例：</p>\n    <div class="code-block">{% extends 'base.html' %}<br><br>{% block title %}ホームページ{% endblock %}<br><br>{% block content %}<br>    &lt;h1&gt;ホームページへようこそ&lt;/h1&gt;<br>    &lt;p&gt;これはホームページの内容です。&lt;/p&gt;<br>{% endblock %}</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>URLタグの使用</h2>\n    <p>テンプレート内でURLを生成するには、urlタグを使用します：</p>\n    \n    <div class="code-block">{% url 'urls.pyで定義しているname' %}</div>\n    \n    <p>例：</p>\n    <div class="code-block">&lt;a href="{% url 'home' %}"&gt;ホームへ&lt;/a&gt;<br>&lt;a href="{% url 'blog:detail' post.id %}"&gt;記事の詳細&lt;/a&gt;</div>\n    \n    <p>この形式で記入することで、urls.pyの一致するnameのURLを埋め込むことができます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>条件分岐（if文）</h2>\n    <p>Djangoのテンプレートでは、views.pyから受け取った変数等を利用して、条件分岐を行うことができます：</p>\n    \n    <div class="code-block">{% if 条件 %}<br>    条件に一致したときの処理<br>{% elif 条件2 %}<br>    条件2に一致したときの処理<br>{% else %}<br>    条件に一致しなかったときの処理<br>{% endif %}</div>\n    \n    <p>例：</p>\n    <div class="code-block">{% if user.is_authenticated %}<br>    &lt;p&gt;こんにちは、{{ user.username }}さん&lt;/p&gt;<br>{% else %}<br>    &lt;p&gt;ログインしていません。&lt;a href="{% url 'login' %}"&gt;ログイン&lt;/a&gt;&lt;/p&gt;<br>{% endif %}</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">6</span>繰り返し処理（for文）</h2>\n    <p>リストや辞書などのコレクションに対して繰り返し処理を行うことができます：</p>\n    \n    <div class="code-block">{% for 代入する変数 in views.pyから受け取った変数 %}<br>    繰り返し時の処理<br>{% endfor %}</div>\n    \n    <p>例：</p>\n    <div class="code-block">&lt;ul&gt;<br>{% for item in items %}<br>    &lt;li&gt;{{ item.name }} - {{ item.price }}円&lt;/li&gt;<br>{% empty %}<br>    &lt;li&gt;アイテムがありません&lt;/li&gt;<br>{% endfor %}<br>&lt;/ul&gt;</div>\n    \n    <p>{% empty %} タグを使うと、コレクションが空の場合の処理を記述できます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">7</span>CSRFトークン</h2>\n    <p>フォームやAjaxなどでサーバーサイドにデータを送るときは、セキュリティのためにCSRFトークンを含める必要があります：</p>\n    \n    <div class="code-block">{% csrf_token %}</div>\n    \n    <p>例：</p>\n    <div class="code-block">&lt;form method="post" action="{% url 'contact' %}"&gt;<br>    {% csrf_token %}<br>    &lt;input type="text" name="name"&gt;<br>    &lt;input type="email" name="email"&gt;<br>    &lt;button type="submit"&gt;送信&lt;/button&gt;<br>&lt;/form&gt;</div>\n    \n    <p>これにより、なりすましを防ぐことができます。</p>\n    \n    <div class="note">\n        <p><strong>重要：</strong> POST、PUT、DELETEメソッドを使用するフォームには必ず{% csrf_token %}を含めてください。</p>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">8</span>変数の表示</h2>\n    <p>views.pyから渡された変数を表示するには、二重中括弧を使用します：</p>\n    \n    <div class="code-block">{{ 変数名 }}</div>\n    \n    <p>オブジェクトのプロパティやメソッドにアクセスすることもできます：</p>\n    <div class="code-block">{{ user.username }}<br>{{ object.get_absolute_url }}</div>\n    \n    <p>フィルタを使用して変数を加工することもできます：</p>\n    <div class="code-block">{{ name|lower }}<br>{{ text|truncatewords:30 }}<br>{{ date|date:"Y-m-d" }}</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">9</span>コメント</h2>\n    <p>テンプレート内にコメントを記述することもできます：</p>\n    \n    <div class="code-block">{# これは1行コメントです #}</div>\n    \n    <p>複数行のコメントは以下のように記述します：</p>\n    <div class="code-block">{% comment %}<br>    これは複数行の<br>    コメントです<br>{% endcomment %}</div>\n</div>	11
130	2024-06-30 14:05:24	2025-03-23 08:00:55.452727	4	13	ORMとは	\N	\N	\N	\N	\N	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>ORMとは</h2>\n    <p>ORMとは、DjangoのModelsのメソッドを使用してSQL(データベースで処理を行う言語)を発行する機能です。通常のSQLより簡単に記述することができますが、SQLを直接記入するのに比べて処理速度は低下します。</p>\n    \n    <div class="note">\n        <p><strong>メリット：</strong> Python構文でデータベース操作ができるため、SQL文を覚える必要がなく、コードの可読性も向上します。</p>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>ORMの実行場所</h2>\n    <p>ORMのコードはviews.pyのgetメソッドやpostメソッドなどに記入することで対象のアクセスが行われたときに実行されます。</p>\n    \n    <p>また、views.py内で使用するモデルのインポートを忘れないようにしてください。</p>\n    \n    <div class="code-block">\n        <pre>from .models import Company, Person</pre>\n    </div>\n    \n    <p>上の例では、同じフォルダにあるmodels.pyのCompany, Personモデルを読み込んでいます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>簡単な使用例</h2>\n    <p>views.pyの基本的な使用例：</p>\n    \n    <div class="code-block">\n        <pre>from django.shortcuts import render\nfrom .models import Company, Person\n\ndef company_list(request):\n    # 全ての会社データを取得\n    companies = Company.objects.all()\n    \n    # テンプレートにデータを渡す\n    return render(request, 'companies/company_list.html', {\n        'companies': companies\n    })</pre>\n    </div>\n</div>	1
140	2024-06-30 16:56:23	2025-03-23 07:24:48.591654	4	13	データの並び替え	\N	views.py	model = Company.objects.all().order_by('-pk')	\N	\N	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>order_byメソッドの基本</h2>\n    <p>Djangoでは、以下の形式でモデルのデータを並べ替えることができます：</p>\n    \n    <div class="code-block">\n        <pre>モデル.objects.all().order_by('並べ替えに使用するフィールド')\nモデル.objects.filter(条件).order_by('並べ替えに使用するフィールド')</pre>\n    </div>\n    \n    <p>これにより、指定したフィールドの値で昇順（小さい順）に並べ替えられます。</p>\n    \n    <p>例：</p>\n    \n    <div class="code-block">\n        <pre># 名前の昇順（アルファベット順）に並べ替え\ncompanies = Company.objects.all().order_by('name')\n\n# idの昇順に並べ替え\ncompanies = Company.objects.all().order_by('id')</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>降順での並べ替え</h2>\n    <p>フィールド名の前に「-」（マイナス）を付けることで、降順（大きい順）に並べ替えることができます：</p>\n    \n    <div class="code-block">\n        <pre>モデル.objects.all().order_by('-並べ替えに使用するフィールド')</pre>\n    </div>\n    \n    <p>例：</p>\n    \n    <div class="code-block">\n        <pre># IDの降順に並べ替え\ncompanies = Company.objects.all().order_by('-id')</pre>\n    </div>\n    \n    <p>上の例では、pkが降順になるように並べ替えています。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>複数フィールドでの並べ替え</h2>\n    <p>複数のフィールドを指定して並べ替えることもできます：</p>\n    \n    <div class="code-block">\n        <pre>モデル.objects.all().order_by('フィールド1', 'フィールド2')</pre>\n    </div>\n    \n    <p>この場合、最初に指定したフィールドで並べ替え、値が同じ場合は次のフィールドで並べ替えられます。</p>\n    \n    <p>例：</p>\n    \n    <div class="code-block">\n        <pre># まず場所で昇順に並べ、同じ場所のデータはIDの降順に並べる\ncompanies = Company.objects.all().order_by('location', '-id')</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>条件付き検索と並べ替えの組み合わせ</h2>\n    <p>filterやexcludeなどの条件付き検索と組み合わせることができます：</p>\n    \n    <div class="code-block">\n        <pre># nameが「test」を含むデータをIDの降順で取得\ncompanies = Company.objects.filter(name__contains='test').order_by('-id')\n\n# 複数条件での検索結果を並べ替え\ncompanies = Company.objects.filter(is_active=True).exclude(location='北海道').order_by('name')</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>ランダムな並べ替え</h2>\n    <p>データをランダムに並べ替えたい場合は、<code>?</code>を使用します：</p>\n    \n    <div class="code-block">\n        <pre># ランダムに並べ替え\ncompanies = Company.objects.all().order_by('?')</pre>\n    </div>\n    \n    <p>ただし、大量のデータがある場合はパフォーマンスに影響するため注意が必要です。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">6</span>実践的な使用例</h2>\n    <p>views.pyでのorder_byメソッドの使用例：</p>\n    \n    <div class="code-block">\n        <pre>from django.shortcuts import render\nfrom .models import Company\n\ndef company_list(request):\n    # ソートパラメータの取得（デフォルトは'name'）\n    sort_by = request.GET.get('sort', 'name')\n    \n    # ソート方向の取得（デフォルトは昇順）\n    direction = request.GET.get('direction', 'asc')\n    \n    # ソート方向に基づいてフィールド名を調整\n    if direction == 'desc':\n        sort_field = f'-{sort_by}'\n    else:\n        sort_field = sort_by\n    \n    # データを並べ替えて取得\n    companies = Company.objects.all().order_by(sort_field)\n    \n    return render(request, 'companies/company_list.html', {\n        'companies': companies,\n        'current_sort': sort_by,\n        'current_direction': direction\n    })</pre>\n    </div>\n    \n    <p>テンプレートでの使用例（company_list.html）：</p>\n    \n    <div class="code-block">\n        <pre>&lt;h1&gt;会社一覧&lt;/h1&gt;\n\n&lt;div class="sort-controls"&gt;\n    &lt;p&gt;並べ替え:&lt;/p&gt;\n    &lt;a href="?sort=name&amp;direction=asc"&gt;名前（昇順）&lt;/a&gt;\n    &lt;a href="?sort=name&amp;direction=desc"&gt;名前（降順）&lt;/a&gt;\n    &lt;a href="?sort=id&amp;direction=asc"&gt;ID（昇順）&lt;/a&gt;\n    &lt;a href="?sort=id&amp;direction=desc"&gt;ID（降順）&lt;/a&gt;\n&lt;/div&gt;\n\n&lt;table&gt;\n    &lt;tr&gt;\n        &lt;th&gt;ID&lt;/th&gt;\n        &lt;th&gt;名前&lt;/th&gt;\n        &lt;th&gt;アクション&lt;/th&gt;\n    &lt;/tr&gt;\n    {% for company in companies %}\n        &lt;tr&gt;\n            &lt;td&gt;{{ company.id }}&lt;/td&gt;\n            &lt;td&gt;{{ company.name }}&lt;/td&gt;\n            &lt;td&gt;\n                &lt;a href="{% url 'company_detail' company.id %}"&gt;詳細&lt;/a&gt;\n            &lt;/td&gt;\n        &lt;/tr&gt;\n    {% empty %}\n        &lt;tr&gt;\n            &lt;td colspan="3"&gt;会社が登録されていません。&lt;/td&gt;\n        &lt;/tr&gt;\n    {% endfor %}\n&lt;/table&gt;</pre>\n    </div>\n</div>\n\n<div class="note">\n    <p><strong>注意点：</strong> デフォルトでは、Djangoはモデルの<code>Meta</code>クラスに<code>ordering</code>が定義されていない限り、データベースから返される順序が保証されません。そのため、一貫した結果を得るためには常に<code>order_by</code>を使用することをお勧めします。</p>\n</div>	10
135	2024-06-30 16:03:25	2025-03-23 07:18:30.124709	4	13	データの取得(全件)	\N	views.py	model = Company.objects.all();\\n\\nprint(model[0].name)	\N	\N	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>all()メソッドの基本</h2>\n    <p>Djangoでは、以下の形式で対象のモデルのデータを全件取得することができます：</p>\n    \n    <div class="code-block">\n        <pre>モデル.objects.all()</pre>\n    </div>\n    \n    <p>例えば、Companyモデルのすべてのデータを取得する場合：</p>\n    \n    <div class="code-block">\n        <pre>companies = Company.objects.all()</pre>\n    </div>\n    \n    <p>上の例ではCompanyモデルのデータを全件取得しています。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>取得結果へのアクセス</h2>\n    <p>取得したモデルはリスト形式（正確にはクエリセット）となっているため、データにアクセスするときは、以下の形式で記入します：</p>\n    \n    <div class="code-block">\n        <pre>モデルを代入した変数[インデックス].フィールド名</pre>\n    </div>\n    \n    <p>例：</p>\n    \n    <div class="code-block">\n        <pre>companies = Company.objects.all()\n\n# 1番目の会社の名前にアクセス\nfirst_company_name = companies[0].name\n\n# 2番目の会社のIDにアクセス\nsecond_company_id = companies[1].id</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>繰り返し処理</h2>\n    <p>取得したデータを一つずつ処理する場合は、for文を使用します：</p>\n    \n    <div class="code-block">\n        <pre>companies = Company.objects.all()\n\n# すべての会社を表示\nfor company in companies:\n    print(company.name)</pre>\n    </div>\n    \n    <p>この方法により、すべてのレコードに対して処理を行うことができます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>件数の確認</h2>\n    <p>取得したデータの件数を確認するには、lenやcountを使います：</p>\n    \n    <div class="code-block">\n        <pre>companies = Company.objects.all()\n\n# 件数を取得（方法1）\ncompany_count = len(companies)\n\n# 件数を取得（方法2）\ncompany_count = companies.count()\n\nprint(f"会社の総数: {company_count}")</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>ビューでの使用例</h2>\n    <p>views.pyでall()メソッドを使用する例：</p>\n    \n    <div class="code-block">\n        <pre>from django.shortcuts import render\nfrom .models import Company\n\ndef company_list(request):\n    # すべての会社を取得\n    companies = Company.objects.all()\n    \n    # テンプレートに渡す\n    return render(request, 'companies/company_list.html', {\n        'companies': companies\n    })</pre>\n    </div>\n    \n    <p>テンプレートでの使用例（company_list.html）：</p>\n    \n    <div class="code-block">\n        <pre>&lt;h1&gt;会社一覧&lt;/h1&gt;\n\n&lt;ul&gt;\n    {% for company in companies %}\n        &lt;li&gt;{{ company.name }}&lt;/li&gt;\n    {% empty %}\n        &lt;li&gt;登録されている会社はありません。&lt;/li&gt;\n    {% endfor %}\n&lt;/ul&gt;</pre>\n    </div>\n</div>\n\n<div class="note">\n    <p><strong>注意：</strong> データ量が多い場合、all()メソッドはすべてのレコードを取得するため、メモリ使用量やパフォーマンスに影響を与える可能性があります。大量のデータを扱う場合は、フィルタリングやページネーションの使用を検討してください。</p>\n</div>	5
136	2024-06-30 16:15:43	2025-03-23 07:19:29.51198	4	13	データを値にして取得する	\N	views.py	model = Company.objects.all().values();	\N	\N	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>valuesメソッドの基本</h2>\n    <p>Djangoでは、以下の形式でモデルのデータを辞書型にして取得することができます：</p>\n    \n    <div class="code-block">\n        <pre>モデル.objects.all().values()\nモデル.objects.filter(条件).values()</pre>\n    </div>\n    \n    <p>データはリストの中に<code>{フィールド名: 値}</code>の形式で取得されます。</p>\n    \n    <p>例：</p>\n    \n    <div class="code-block">\n        <pre>companies = Company.objects.all().values()\n# 結果: <QuerySet [{'id': 1, 'name': 'test'}, {'id': 2, 'name': 'example'}]></pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>特定のフィールドのみ取得</h2>\n    <p>values()メソッドに引数を指定することで、特定のフィールドのみを取得できます：</p>\n    \n    <div class="code-block">\n        <pre>companies = Company.objects.all().values('name')\n# 結果: <QuerySet [{'name': 'test'}, {'name': 'example'}]></pre>\n    </div>\n    \n    <p>複数のフィールドを指定する場合：</p>\n    \n    <div class="code-block">\n        <pre>companies = Company.objects.all().values('id', 'name')\n# 結果: <QuerySet [{'id': 1, 'name': 'test'}, {'id': 2, 'name': 'example'}]></pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>QuerySetからリストへの変換</h2>\n    <p>データは<code>&lt;QuerySet [{'id': 1, 'name': 'test'}]&gt;</code>のような形式でQuerySetというものがついています。フロントエンドにこのデータを返したいときは、以下の形式で通常のリストに変換します：</p>\n    \n    <div class="code-block">\n        <pre>list(データを格納した変数)</pre>\n    </div>\n    \n    <p>例：</p>\n    \n    <div class="code-block">\n        <pre>companies = Company.objects.all().values()\ncompanies_list = list(companies)\n# 結果: [{'id': 1, 'name': 'test'}, {'id': 2, 'name': 'example'}]</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>単一レコードの辞書型取得</h2>\n    <p>単一のモデルを辞書型データとして取得したいときは、以下の形式で記入します：</p>\n    \n    <div class="code-block">\n        <pre>モデル.objects.values().get(条件)</pre>\n    </div>\n    \n    <p>values()が末尾ではなくなるため注意してください。</p>\n    \n    <p>例：</p>\n    \n    <div class="code-block">\n        <pre>company = Company.objects.values().get(id=1)\n# 結果: {'id': 1, 'name': 'test'}</pre>\n    </div>\n    \n    <p>特定のフィールドのみを取得する場合：</p>\n    \n    <div class="code-block">\n        <pre>company = Company.objects.values('name').get(id=1)\n# 結果: {'name': 'test'}</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>辞書型データへのアクセス</h2>\n    <p>取得した辞書型データには、Pythonの辞書操作でアクセスできます：</p>\n    \n    <div class="code-block">\n        <pre># 単一レコードの場合\ncompany = Company.objects.values().get(id=1)\ncompany_name = company['name']\nprint(company_name)  # 'test'\n\n# 複数レコードの場合\ncompanies = Company.objects.all().values()\nfor company in companies:\n    print(company['name'])</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">6</span>実践的な使用例</h2>\n    <p>JSONレスポンスを返すビューでの使用例：</p>\n    \n    <div class="code-block">\n        <pre>from django.http import JsonResponse\nfrom .models import Company\n\ndef company_list_json(request):\n    # 会社データを辞書型で取得\n    companies = Company.objects.all().values()\n    \n    # リストに変換してJSONレスポンスとして返す\n    return JsonResponse({\n        'companies': list(companies)\n    })</pre>\n    </div>\n    \n    <p>テンプレートでの使用例：</p>\n    \n    <div class="code-block">\n        <pre>from django.shortcuts import render\nfrom .models import Company\n\ndef company_list(request):\n    # 会社データを辞書型で取得\n    companies = Company.objects.all().values('id', 'name')\n    \n    # テンプレートに渡す\n    return render(request, 'companies/company_list.html', {\n        'companies': companies\n    })</pre>\n    </div>\n    \n    <p>テンプレート内での使用（company_list.html）：</p>\n    \n    <div class="code-block">\n        <pre>&lt;h1&gt;会社一覧&lt;/h1&gt;\n\n&lt;ul&gt;\n    {% for company in companies %}\n        &lt;li&gt;ID: {{ company.id }} - 名前: {{ company.name }}&lt;/li&gt;\n    {% empty %}\n        &lt;li&gt;登録されている会社はありません。&lt;/li&gt;\n    {% endfor %}\n&lt;/ul&gt;</pre>\n    </div>\n</div>\n\n<div class="note">\n    <p><strong>メリット：</strong> valuesメソッドを使用すると、必要なフィールドだけを取得できるため、メモリ使用量を削減できます。また、JSONに変換する際にも便利です。ただし、モデルインスタンスのメソッドにはアクセスできなくなるため、用途に応じて選択してください。</p>\n</div>	6
137	2024-06-30 16:31:17	2025-03-23 07:20:28.303553	4	13	データの取得(除外)	\N	views.py	model = Company.objects.all().exclude(pk=1);	\N	\N	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>excludeメソッドの基本</h2>\n    <p>Djangoでは、以下の形式で取得したモデルから特定の条件に一致するデータを除外することができます：</p>\n    \n    <div class="code-block">\n        <pre>モデル.objects.all().exclude(除外する条件)\nモデル.objects.filter(条件).exclude(除外する条件)</pre>\n    </div>\n    \n    <p>例えば、すべてのCompanyモデルからpkが1のデータを除外する場合：</p>\n    \n    <div class="code-block">\n        <pre>companies = Company.objects.all().exclude(pk=1)</pre>\n    </div>\n    \n    <p>上の例ではCompanyモデルをpkが1のもの以外を取得しています。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>様々な条件での除外</h2>\n    <p>excludeメソッドでは、filterと同様に様々な条件を指定できます：</p>\n    \n    <div class="code-block">\n        <pre># 名前が「test」のデータを除外\ncompanies = Company.objects.all().exclude(name="test")\n\n# idが5未満のデータを除外\ncompanies = Company.objects.all().exclude(id__lt=5)\n\n# 名前に「株式会社」を含むデータを除外\ncompanies = Company.objects.all().exclude(name__contains="株式会社")</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>複数条件での除外</h2>\n    <p>複数の条件を指定して除外することもできます：</p>\n    \n    <div class="code-block">\n        <pre># 名前が「test」でidが10のデータを除外\ncompanies = Company.objects.all().exclude(name="test", id=10)\n\n# 複数のidを持つデータを除外\ncompanies = Company.objects.all().exclude(id__in=[1, 3, 5])</pre>\n    </div>\n    \n    <p>カンマで区切られた複数の条件は「AND」条件として扱われ、すべての条件に一致するデータのみが除外されます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>filterとexcludeの組み合わせ</h2>\n    <p>filterとexcludeを組み合わせて、より細かい条件でデータを取得できます：</p>\n    \n    <div class="code-block">\n        <pre># nameに「test」を含むデータのうち、idが10のデータを除外\ncompanies = Company.objects.filter(name__contains="test").exclude(id=10)\n\n# 複数のfilterとexcludeを組み合わせる\ncompanies = Company.objects.filter(name__contains="会社").exclude(id__lt=5).filter(id__lt=20)</pre>\n    </div>\n    \n    <p>このように、filterとexcludeをチェーンして複雑な条件を表現できます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>実践的な使用例</h2>\n    <p>views.pyでのexcludeメソッドの使用例：</p>\n    \n    <div class="code-block">\n        <pre>from django.shortcuts import render\nfrom .models import Company\n\ndef active_companies(request):\n    # 非アクティブな会社を除外して取得\n    companies = Company.objects.all().exclude(is_active=False)\n    \n    # テンプレートに渡す\n    return render(request, 'companies/active_list.html', {\n        'companies': companies,\n        'title': 'アクティブな会社一覧'\n    })\n\ndef filtered_companies(request):\n    # 検索クエリを取得\n    query = request.GET.get('q', '')\n    exclude_id = request.GET.get('exclude_id', None)\n    \n    # 基本クエリ\n    companies = Company.objects.filter(name__contains=query)\n    \n    # 特定のIDを除外（指定された場合）\n    if exclude_id:\n        companies = companies.exclude(id=exclude_id)\n    \n    return render(request, 'companies/company_list.html', {\n        'companies': companies,\n        'query': query,\n        'exclude_id': exclude_id\n    })</pre>\n    </div>\n</div>\n\n<div class="note">\n    <p><strong>注意点：</strong> excludeメソッドは「~ではない」という条件を表現できるため、filterだけでは実現しにくい複雑なクエリを簡潔に書くことができます。ただし、複数のexcludeを組み合わせると、意図しない結果になることがあるため注意が必要です。</p>\n</div>	7
139	2024-06-30 16:50:20	2025-03-23 07:23:06.808724	4	13	データの削除	\N	views.py	model = Company.objects.filter(name='test')\\nmodel.delete()	\N	\N	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>基本的なデータ削除</h2>\n    <p>Djangoでは、以下の形式で対象のモデルのデータを削除することができます：</p>\n    \n    <div class="code-block">\n        <pre>モデルを代入した変数.delete()</pre>\n    </div>\n    \n    <p>例えば、特定のCompanyモデルのデータを削除する場合：</p>\n    \n    <div class="code-block">\n        <pre>company = Company.objects.get(pk=1)\ncompany.delete()</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>複数データの一括削除</h2>\n    <p>deleteメソッドは、1件時(get()での取得)でも複数件時(all()、filter()での取得)でも使用することができます：</p>\n    \n    <div class="code-block">\n        <pre># 特定条件に一致するデータをすべて削除\ncompanies = Company.objects.filter(name="test")\ncompanies.delete()\n\n# すべてのデータを削除\nall_companies = Company.objects.all()\nall_companies.delete()</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>直接削除</h2>\n    <p>変数に代入せずに末尾に.delete()をつけて直接削除することも可能です：</p>\n    \n    <div class="code-block">\n        <pre># 特定条件に一致するデータを直接削除\nCompany.objects.filter(name="test").delete()\n\n# すべてのデータを直接削除\nCompany.objects.all().delete()</pre>\n    </div>\n    \n    <p>上の例ではnameがtestのデータを全て削除しています。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>deleteメソッドの戻り値</h2>\n    <p>deleteメソッドは、削除されたオブジェクトの数とオブジェクトタイプごとの削除数を含むタプルを返します：</p>\n    \n    <div class="code-block">\n        <pre># 削除した結果を取得\nresult = Company.objects.filter(is_active=False).delete()\nprint(result)\n# 出力例: (3, {'myapp.Company': 3})\n\n# 削除数を変数に代入\ntotal_deleted, details = Company.objects.filter(is_active=False).delete()\nprint(f"合計 {total_deleted} 件のレコードが削除されました")\nprint(f"内訳: {details}")</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>実践的な使用例</h2>\n    <p>views.pyでの削除処理の例：</p>\n    \n    <div class="code-block">\n        <pre>from django.shortcuts import render, redirect, get_object_or_404\nfrom django.contrib import messages\nfrom .models import Company\n\n# 単一データの削除ビュー\ndef delete_company(request, company_id):\n    company = get_object_or_404(Company, id=company_id)\n    \n    if request.method == 'POST':\n        company_name = company.name\n        company.delete()\n        messages.success(request, f"会社「{company_name}」を削除しました")\n        return redirect('company_list')\n    \n    return render(request, 'companies/confirm_delete.html', {\n        'company': company\n    })\n\n# 複数データの削除ビュー\ndef bulk_delete(request):\n    if request.method == 'POST':\n        company_ids = request.POST.getlist('company_ids')\n        \n        # 選択された会社を削除\n        deleted_count = Company.objects.filter(id__in=company_ids).delete()[0]\n        \n        messages.success(request, f"{deleted_count}件の会社を削除しました")\n        return redirect('company_list')\n    \n    # GETリクエストの場合は会社一覧を表示\n    companies = Company.objects.all()\n    return render(request, 'companies/bulk_delete.html', {\n        'companies': companies\n    })</pre>\n    </div>\n    \n    <p>削除確認テンプレートの例（confirm_delete.html）：</p>\n    \n    <div class="code-block">\n        <pre>&lt;h1&gt;会社の削除確認&lt;/h1&gt;\n\n&lt;p&gt;以下の会社を削除してもよろしいですか？&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;{{ company.name }}&lt;/strong&gt;&lt;/p&gt;\n\n&lt;form method="post"&gt;\n    {% csrf_token %}\n    &lt;button type="submit" class="danger"&gt;削除する&lt;/button&gt;\n    &lt;a href="{% url 'company_list' %}"&gt;キャンセル&lt;/a&gt;\n&lt;/form&gt;</pre>\n    </div>\n</div>\n\n<div class="note">\n    <p><strong>注意点：</strong></p>\n    <ul>\n        <li>関連するモデルがある場合、デフォルトではCASCADEが適用され、関連するデータも削除されます。</li>\n        <li>大量のデータを削除する場合は、パフォーマンスに注意してください。</li>\n        <li>重要なデータの削除前には、ユーザーに確認を求めるUIを実装することをお勧めします。</li>\n    </ul>\n</div>	9
141	2024-06-30 17:04:43	2025-03-23 07:25:58.215639	4	13	対象のデータがあるか調べる	\N	views.py	age = 30\\n\\nif Person.objects.filter(age__gte=age).exists():\\n    print(str(age) + "歳以上の人が存在します。")\\nelse:\\n    print(str(age) + "歳以上の人は存在しません。")	\N	\N	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>existsメソッドの基本</h2>\n    <p>Djangoでは、以下の形式で対象のモデルデータが存在するかどうかを確認することができます：</p>\n    \n    <div class="code-block">\n        <pre>モデル.objects.all().exists()\nモデル.objects.filter(条件).exists()</pre>\n    </div>\n    \n    <p>対象のモデルがあればTrue、対象のモデルがなければFalseを返すため、if文と合わせて使用することができます。</p>\n    \n    <p>例：</p>\n    \n    <div class="code-block">\n        <pre># 何らかのデータが存在するか確認\nif Company.objects.all().exists():\n    print("会社データが存在します")\nelse:\n    print("会社データがありません")</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>条件付きの存在確認</h2>\n    <p>特定の条件に一致するデータが存在するかを確認する場合：</p>\n    \n    <div class="code-block">\n        <pre># ageが30以上のPersonが存在するか確認\nif Person.objects.filter(age__gte=30).exists():\n    print("30歳以上の人が存在します")\nelse:\n    print("30歳以上の人はいません")</pre>\n    </div>\n    \n    <p>上の例では、Personモデルのageが30以上のモデルがあるかどうかを判別しています。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>existsメソッドのメリット</h2>\n    <p>existsメソッドは単にデータの存在確認だけを行うため、全データを取得するよりも効率的です：</p>\n    \n    <div class="code-block">\n        <pre># 効率的な方法（データが存在するかだけを確認）\nif Company.objects.filter(name__contains="テスト").exists():\n    # 処理...\n\n# 非効率な方法（全データを取得してからチェック）\ncompanies = Company.objects.filter(name__contains="テスト")\nif companies:\n    # 処理...</pre>\n    </div>\n    \n    <p>existsメソッドを使用すると、データベースから必要最小限の情報だけを取得するので、パフォーマンスが向上します。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>複雑な条件での存在確認</h2>\n    <p>複数の条件を組み合わせた存在確認も可能です：</p>\n    \n    <div class="code-block">\n        <pre># 複数条件の組み合わせ\nif Company.objects.filter(name__contains="株式会社", is_active=True).exists():\n    print("「株式会社」を含む名前のアクティブな会社が存在します")\n\n# 除外条件を含む確認\nif Company.objects.filter(is_active=True).exclude(location="東京").exists():\n    print("東京以外の場所にあるアクティブな会社が存在します")</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>実践的な使用例</h2>\n    <p>views.pyでのexistsメソッドの使用例：</p>\n    \n    <div class="code-block">\n        <pre>from django.shortcuts import render, redirect\nfrom django.contrib import messages\nfrom .models import Company, Person\n\ndef create_person(request):\n    if request.method == 'POST':\n        name = request.POST.get('name')\n        age = request.POST.get('age')\n        company_id = request.POST.get('company_id')\n        \n        # 指定された会社が存在するか確認\n        if not Company.objects.filter(id=company_id).exists():\n            messages.error(request, "指定された会社は存在しません")\n            return redirect('create_person')\n        \n        # 同じ名前の人が既に存在するか確認\n        if Person.objects.filter(name=name).exists():\n            messages.warning(request, f"同じ名前の人({name})が既に登録されています")\n        \n        # 人物データの作成\n        person = Person(name=name, age=age, company_id=company_id)\n        person.save()\n        \n        messages.success(request, f"{name}さんを登録しました")\n        return redirect('person_list')\n    \n    return render(request, 'persons/create.html', {\n        'companies': Company.objects.all()\n    })</pre>\n    </div>\n</div>\n\n<div class="note">\n    <p><strong>注意点：</strong> existsメソッドは単に存在するかどうかだけを確認するため、データの内容にアクセスする必要がない場合に最も効果的です。データ自体にアクセスする必要がある場合は、通常のquerysetを使用する方が適切です。</p>\n</div>	11
142	2024-06-30 17:16:13	2025-03-23 07:27:26.263784	4	13	リレーションされているモデルのデータを取得する(多側から1側)	\N	views.py	model = Person.objects.select_related('company').all().values('company__name')	\N	\N	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>select_relatedの基本</h2>\n    <p>Djangoでは、以下の形式で多側のモデルから1側のモデルのデータを効率的に取得することができます：</p>\n    \n    <div class="code-block">\n        <pre>多側のモデル.objects.select_related('1側のモデルのフィールド名').get(条件)\n多側のモデル.objects.select_related('1側のモデルのフィールド名').filter(条件)\n多側のモデル.objects.select_related('1側のモデルのフィールド名').all()</pre>\n    </div>\n    \n    <p>例えば、Personモデル（多側）からCompanyモデル（1側）のデータを取得する場合：</p>\n    \n    <div class="code-block">\n        <pre># Personに関連づけられたCompanyも同時に取得\nperson = Person.objects.select_related('company').get(id=1)\n\n# 関連Companyのデータにアクセス\ncompany_name = person.company.name</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>N+1問題とselect_related</h2>\n    <p>本来、値取得のたびに取得するモデルのSQLの発行がされますが、select_relatedを使用すると、多側のモデル取得時に1側のモデルのデータも同時に取得するため、複数回SQLが発行されることを防ぐことができます。</p>\n    \n    <p>多対1の関係というのは、会社(1)に対して人(多)が存在するという関係のことを言います。なので、人側から見ると会社は1個に特定されるので、紐づいたモデルは1つとなる関係です。</p>\n    \n    <div class="note">\n        <p><strong>N+1問題とは？</strong> 必要以上にSQLが発行されパフォーマンスが悪くなる問題のことです。例えば、10人のPersonデータを取得し、それぞれの所属Companyを参照する場合、1回のPersonsテーブルへのクエリと10回のCompanyテーブルへのクエリが発行されてしまう状況を指します（合計11回=N+1回）。</p>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>select_relatedとvaluesの組み合わせ</h2>\n    <p>select_relatedとvaluesを組み合わせて、必要なフィールドだけを取得することもできます：</p>\n    \n    <div class="code-block">\n        <pre>多側のモデル.objects.select_related('1側のモデルのフィールド名').values('1側のモデルのフィールド名__1側のフィールド名')</pre>\n    </div>\n    \n    <p>例：</p>\n    \n    <div class="code-block">\n        <pre># Personモデルと紐づいたCompanyモデルのnameフィールドを取得\npersons = Person.objects.select_related('company').values('id', 'name', 'company__name')\n\n# 結果例: [{'id': 1, 'name': '山田太郎', 'company__name': '株式会社A'}, ...]</pre>\n    </div>\n    \n    <p>上の例では、Personモデルと紐づいたCompanyモデルのnameフィールドの値を取得しています。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>繰り返し処理での活用</h2>\n    <p>select_relatedの効果は、for文でデータを繰り返し処理するときに特に顕著になります：</p>\n    \n    <div class="code-block">\n        <pre># select_relatedを使わない場合（N+1問題が発生）\npersons = Person.objects.all()\nfor person in persons:\n    print(f"{person.name}は{person.company.name}に所属しています")  # 各ループでSQLが発行される\n\n# select_relatedを使う場合（効率的）\npersons = Person.objects.select_related('company').all()\nfor person in persons:\n    print(f"{person.name}は{person.company.name}に所属しています")  # 追加のSQLは発行されない</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>個別アクセスの例</h2>\n    <p>取得したデータの中から特定のレコードにアクセスする場合も、select_relatedの恩恵を受けられます：</p>\n    \n    <div class="code-block">\n        <pre># 取得したクエリセットから最初のデータの関連Companyにアクセス\npersons = Person.objects.select_related('company').all()\nfirst_person_company_name = persons[0].company.name</pre>\n    </div>\n    \n    <p>このような形式でも紐づいているモデルにアクセスすることができます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">6</span>実践的な使用例</h2>\n    <p>views.pyでのselect_relatedの使用例：</p>\n    \n    <div class="code-block">\n        <pre>from django.shortcuts import render\nfrom .models import Person\n\ndef person_list(request):\n    # 関連Companyデータも一緒に取得\n    persons = Person.objects.select_related('company').all()\n    \n    return render(request, 'persons/list.html', {\n        'persons': persons\n    })\n\ndef person_detail(request, person_id):\n    # 個別データ取得時も関連Companyデータを効率的に取得\n    person = Person.objects.select_related('company').get(id=person_id)\n    \n    return render(request, 'persons/detail.html', {\n        'person': person\n    })</pre>\n    </div>\n    \n    <p>テンプレートでの使用例（list.html）：</p>\n    \n    <div class="code-block">\n        <pre>&lt;h1&gt;社員一覧&lt;/h1&gt;\n\n&lt;table&gt;\n    &lt;tr&gt;\n        &lt;th&gt;ID&lt;/th&gt;\n        &lt;th&gt;名前&lt;/th&gt;\n        &lt;th&gt;所属会社&lt;/th&gt;\n    &lt;/tr&gt;\n    {% for person in persons %}\n        &lt;tr&gt;\n            &lt;td&gt;{{ person.id }}&lt;/td&gt;\n            &lt;td&gt;{{ person.name }}&lt;/td&gt;\n            &lt;td&gt;{{ person.company.name }}&lt;/td&gt;  &lt;!-- 追加SQLなしでアクセス可能 --&gt;\n        &lt;/tr&gt;\n    {% endfor %}\n&lt;/table&gt;</pre>\n    </div>\n</div>\n\n<div class="note">\n    <p><strong>補足：</strong></p>\n    <ul>\n        <li>select_relatedは多対1（ForeignKey）または1対1（OneToOneField）の関係でのみ使用できます。</li>\n        <li>1対多または多対多の関係には、prefetch_relatedを使用します。</li>\n        <li>複数の関連モデルを取得する場合は、select_related('model1', 'model2')のように指定できます。</li>\n        <li>ネストした関連も取得できます：select_related('company__industry')</li>\n    </ul>\n</div>	12
143	2024-06-30 17:53:24	2025-03-23 07:28:53.287573	4	13	リレーションされているモデルのデータを取得する(1側から多側)	\N	views.py	model = Company.objects.prefetch_related('person').get(pk=1)\\n\\nfor person in model.person.all():\\n   print(person.name)	\N	\N	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>prefetch_relatedの基本</h2>\n    <p>Djangoでは、1側のモデルから多側のモデルのデータを効率的に取得するために、以下の形式でprefetch_relatedを使用します：</p>\n    \n    <div class="code-block">\n        <pre>1側のモデル.objects.prefetch_related('リレーションのフィールド名').get(条件)\n1側のモデル.objects.prefetch_related('リレーションのフィールド名').filter(条件)\n1側のモデル.objects.prefetch_related('リレーションのフィールド名').all()</pre>\n    </div>\n    \n    <p>例えば、Companyモデル（1側）からPersonモデル（多側）のデータを取得する場合：</p>\n    \n    <div class="code-block">\n        <pre># Companyに関連づけられたPersonも同時に取得\ncompany = Company.objects.prefetch_related('persons').get(id=1)</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>select_relatedとprefetch_relatedの違い</h2>\n    <p>先ほどのselect_relatedの場合は、多側からだったので、自身が決まれば紐づいているモデルが確定したのに対して、prefetch_relatedは、1側からなので、自身が決まっても、自身に紐づいているモデルが複数あるという状態になります。</p>\n    \n    <p>Company(1)に対してPerson(多)がある場合、1つのCompanyに紐づいているPersonは複数あるという関係です。</p>\n    \n    <div class="note">\n        <p><strong>重要な違い：</strong></p>\n        <ul>\n            <li><strong>select_related:</strong> 1回のSQLクエリで全データを取得（JOINを使用）</li>\n            <li><strong>prefetch_related:</strong> 2回以上のSQLクエリを実行し、Pythonメモリ上で結合</li>\n        </ul>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>紐づいたデータへのアクセス</h2>\n    <p>prefetch_relatedで取得した紐づいたモデルは複数あるため、リスト形式で紐づきます。アクセスするにはselect_relatedとは違い、for文で繰り返し処理をするかインデックスを指定してアクセスすることになります：</p>\n    \n    <div class="code-block">\n        <pre># Companyに関連づけられたPersonを取得\ncompany = Company.objects.prefetch_related('persons').get(id=1)\n\n# for文でアクセス\nfor person in company.persons.all():\n    print(person.name)\n\n# インデックスでアクセス\nfirst_person = company.persons.all()[0]\nprint(first_person.name)</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>N+1問題の解決</h2>\n    <p>prefetch_relatedもselect_relatedと同様に、N+1問題を解決するために使用します。複数の1側モデルから多側モデルにアクセスする場合に特に効果を発揮します：</p>\n    \n    <div class="code-block">\n        <pre># prefetch_relatedを使わない場合（N+1問題が発生）\ncompanies = Company.objects.all()\nfor company in companies:\n    # 各ループでSQLが発行される\n    for person in company.persons.all():\n        print(f"{company.name}の社員: {person.name}")\n\n# prefetch_relatedを使う場合（効率的）\ncompanies = Company.objects.prefetch_related('persons').all()\nfor company in companies:\n    # 追加のSQLは発行されない\n    for person in company.persons.all():\n        print(f"{company.name}の社員: {person.name}")</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>高度な使用例</h2>\n    <p>複数の関連モデルや、ネストした関連モデルを取得することもできます：</p>\n    \n    <div class="code-block">\n        <pre># 複数の関連モデルを取得\ncompanies = Company.objects.prefetch_related('persons', 'departments').all()\n\n# ネストした関連を取得\ncompanies = Company.objects.prefetch_related('persons__skills').all()</pre>\n    </div>\n    \n    <p>関連するモデルに対してフィルタリングを適用することもできます：</p>\n    \n    <div class="code-block">\n        <pre>from django.db.models import Prefetch\n\n# 特定条件の関連モデルのみをプリフェッチ\ncompanies = Company.objects.prefetch_related(\n    Prefetch('persons', queryset=Person.objects.filter(age__gte=30))\n).all()</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">6</span>実践的な使用例</h2>\n    <p>views.pyでのprefetch_relatedの使用例：</p>\n    \n    <div class="code-block">\n        <pre>from django.shortcuts import render\nfrom .models import Company\n\ndef company_list(request):\n    # 関連Personデータも一緒に取得\n    companies = Company.objects.prefetch_related('persons').all()\n    \n    return render(request, 'companies/list.html', {\n        'companies': companies\n    })\n\ndef company_detail(request, company_id):\n    # 個別データ取得時も関連Personデータを効率的に取得\n    company = Company.objects.prefetch_related('persons').get(id=company_id)\n    \n    return render(request, 'companies/detail.html', {\n        'company': company\n    })</pre>\n    </div>\n    \n    <p>テンプレートでの使用例（list.html）：</p>\n    \n    <div class="code-block">\n        <pre>&lt;h1&gt;会社一覧&lt;/h1&gt;\n\n{% for company in companies %}\n    &lt;div class="company-card"&gt;\n        &lt;h2&gt;{{ company.name }}&lt;/h2&gt;\n        &lt;h3&gt;社員一覧&lt;/h3&gt;\n        &lt;ul&gt;\n            {% for person in company.persons.all %}\n                &lt;li&gt;{{ person.name }}&lt;/li&gt;  &lt;!-- 追加SQLなしでアクセス可能 --&gt;\n            {% empty %}\n                &lt;li&gt;社員はいません&lt;/li&gt;\n            {% endfor %}\n        &lt;/ul&gt;\n    &lt;/div&gt;\n{% endfor %}</pre>\n    </div>\n</div>\n\n<div class="note">\n    <p><strong>補足：</strong></p>\n    <ul>\n        <li>prefetch_relatedは多対多（ManyToManyField）や1対多（逆参照のForeignKey）の関係で使用します。</li>\n        <li>多対1の関係には、select_relatedの方が適しています。</li>\n        <li>prefetch_relatedでは、リレーションの名前はモデルで定義された関連名（related_name）か、デフォルトの関連名（モデル名の小文字_set）を使用します。</li>\n        <li>大量のデータを扱う場合、メモリ使用量に注意が必要です。</li>\n    </ul>\n</div>	13
145	2024-06-30 18:15:54	2025-03-23 07:33:39.622142	4	13	特定のフィールドの値を使用して演算する	\N	views.py	update_model = Sales.objects.update(sale = F('sale')*1.1)	\N	\N	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>F式の基本</h2>\n    <p>Djangoでは、F式を使用してデータベースレベルでフィールド値に対する計算を行うことができます。基本的な構文は以下の通りです：</p>\n    \n    <div class="code-block">\n        <pre>from django.db.models import F\n\nF('フィールド名')計算式</pre>\n    </div>\n    \n    <p>このF式を使用すると、Pythonレベルではなくデータベースレベルでの操作が可能になり、効率的なデータ更新ができます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>基本的な使用例</h2>\n    <p>例えば、Salesモデルのsaleフィールドの値を1.1倍（10%増）する場合：</p>\n    \n    <div class="code-block">\n        <pre>from django.db.models import F\n\n# Salesモデルのsaleフィールドを全て1.1倍する\nSales.objects.update(sale=F('sale') * 1.1)</pre>\n    </div>\n    \n    <p>上の例は、Salesモデルのsaleフィールドを全て1.1倍した値にして更新しています。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>様々な計算例</h2>\n    <p>F式では様々な計算が可能です：</p>\n    \n    <div class="code-block">\n        <pre># 加算\nProduct.objects.update(price=F('price') + 100)  # 価格を100円上げる\n\n# 減算\nProduct.objects.update(price=F('price') - 50)  # 価格を50円下げる\n\n# 乗算\nProduct.objects.update(price=F('price') * 1.05)  # 価格を5%上げる\n\n# 除算\nProduct.objects.update(price=F('price') / 2)  # 価格を半額にする\n\n# べき乗\nProduct.objects.update(price=F('price') ** 2)  # 価格を2乗する</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>条件付き更新</h2>\n    <p>特定の条件に一致するレコードだけを更新することもできます：</p>\n    \n    <div class="code-block">\n        <pre># 価格が1000円以上の商品のみ10%割引\nProduct.objects.filter(price__gte=1000).update(price=F('price') * 0.9)\n\n# 在庫が10個未満の商品の在庫を2倍にする\nProduct.objects.filter(stock__lt=10).update(stock=F('stock') * 2)</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>複数フィールドの計算</h2>\n    <p>F式を使って別のフィールドを参照した計算も可能です：</p>\n    \n    <div class="code-block">\n        <pre># 単価と数量から合計金額を計算\nOrder.objects.update(total_amount=F('unit_price') * F('quantity'))\n\n# 在庫と予約数から利用可能数を計算\nProduct.objects.update(available=F('stock') - F('reserved'))</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">6</span>実践的な使用例</h2>\n    <p>views.pyでのF式の使用例：</p>\n    \n    <div class="code-block">\n        <pre>from django.shortcuts import redirect\nfrom django.contrib import messages\nfrom django.db.models import F\nfrom .models import Product\n\ndef apply_discount(request):\n    # 割引率を取得（デフォルトは10%）\n    discount_rate = float(request.POST.get('discount_rate', 10)) / 100\n    category_id = request.POST.get('category_id')\n    \n    # 基本クエリ\n    query = Product.objects\n    \n    # カテゴリが指定されている場合はフィルタリング\n    if category_id:\n        query = query.filter(category_id=category_id)\n    \n    # 価格を割引率に基づいて更新\n    updated_count = query.update(price=F('price') * (1 - discount_rate))\n    \n    messages.success(request, f"{updated_count}件の商品に{int(discount_rate*100)}%の割引を適用しました")\n    return redirect('product_list')\n\ndef increment_view_count(request, product_id):\n    # 商品の閲覧数を1増やす\n    Product.objects.filter(id=product_id).update(view_count=F('view_count') + 1)\n    \n    # 商品詳細ページにリダイレクト\n    return redirect('product_detail', product_id=product_id)</pre>\n    </div>\n</div>\n\n<div class="note">\n    <p><strong>F式のメリット：</strong></p>\n    <ul>\n        <li>データベースレベルで計算が行われるため、Python側でデータを取得して計算するよりも効率的です。</li>\n        <li>複数のユーザーが同時に更新した場合でも、競合状態（race condition）を回避できます。</li>\n        <li>大量のレコードを一度に更新する場合、メモリ使用量が少なくて済みます。</li>\n    </ul>\n</div>	15
144	2024-06-30 18:08:42	2025-03-23 07:31:51.855112	4	13	filter内での条件をOR形式にする	\N	views.py	from django.db.models import Q\\n\\nmodel = Company.objects.filter(Q(name='test') | Q(name='test2'))	\N	\N	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>Qオブジェクトの基本</h2>\n    <p>Djangoでは、Qオブジェクトを使用して複雑な条件式を作成することができます。OR条件を実現するには、以下の形式を使用します：</p>\n    \n    <div class="code-block">\n        <pre>from django.db.models import Q\n\nモデル.objects.filter(Q(条件) | Q(条件))</pre>\n    </div>\n    \n    <p>「|」演算子がOR条件を表します。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>基本的な使用例</h2>\n    <p>例えば、Companyモデルのnameフィールドが「test」または「test2」のデータを取得する場合：</p>\n    \n    <div class="code-block">\n        <pre>from django.db.models import Q\n\ncompanies = Company.objects.filter(Q(name='test') | Q(name='test2'))</pre>\n    </div>\n    \n    <p>上の例では、Companyモデルのnameフィールドがtestもしくはtest2のデータを取得しています。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>複数条件の組み合わせ</h2>\n    <p>Qオブジェクトでは、複数の条件を組み合わせることができます：</p>\n    \n    <div class="code-block">\n        <pre># OR条件の組み合わせ（3つ以上の条件）\ncompanies = Company.objects.filter(\n    Q(name='test') | Q(name='test2') | Q(name='test3')\n)\n\n# AND条件とOR条件の組み合わせ\ncompanies = Company.objects.filter(\n    Q(is_active=True) & (Q(name='test') | Q(name='test2'))\n)\n\n# OR条件とAND条件の組み合わせ\ncompanies = Company.objects.filter(\n    (Q(name='test') & Q(location='東京')) | (Q(name='test2') & Q(location='大阪'))\n)</pre>\n    </div>\n    \n    <p>「&amp;」演算子がAND条件を表し、括弧を使って条件の優先順位を指定できます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>複雑なフィルタリング</h2>\n    <p>Qオブジェクトを使うと、より柔軟なフィルタリングが可能になります：</p>\n    \n    <div class="code-block">\n        <pre># 名前に「株式会社」を含むか、または従業員数が100以上の会社\ncompanies = Company.objects.filter(\n    Q(name__contains='株式会社') | Q(employee_count__gte=100)\n)\n\n# IDが特定のリストに含まれる、または特定の条件に一致する会社\ntarget_ids = [1, 3, 5]\ncompanies = Company.objects.filter(\n    Q(id__in=target_ids) | Q(name__startswith='テスト')\n)</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>NOT条件の使用</h2>\n    <p>Qオブジェクトは「~」（チルダ）を使用して条件を否定することもできます：</p>\n    \n    <div class="code-block">\n        <pre># nameが「test」でない会社\ncompanies = Company.objects.filter(~Q(name='test'))\n\n# nameが「test」でなく、かつlocationが「東京」の会社\ncompanies = Company.objects.filter(~Q(name='test') & Q(location='東京'))\n\n# nameが「test」でなく、またはlocationが「東京」でない会社\ncompanies = Company.objects.filter(~Q(name='test') | ~Q(location='東京'))</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">6</span>実践的な使用例</h2>\n    <p>views.pyでのQオブジェクトの使用例：</p>\n    \n    <div class="code-block">\n        <pre>from django.shortcuts import render\nfrom django.db.models import Q\nfrom .models import Company\n\ndef company_search(request):\n    query = request.GET.get('q', '')\n    location = request.GET.get('location', '')\n    is_active = request.GET.get('active', None)\n    \n    # 基本クエリを作成\n    companies = Company.objects.all()\n    \n    # 検索条件を追加\n    if query:\n        # 名前または説明に検索クエリが含まれる場合\n        companies = companies.filter(\n            Q(name__icontains=query) | Q(description__icontains=query)\n        )\n    \n    # 場所のフィルター\n    if location:\n        companies = companies.filter(location=location)\n    \n    # アクティブステータスのフィルター\n    if is_active is not None:\n        is_active_bool = is_active == '1'\n        companies = companies.filter(is_active=is_active_bool)\n    \n    return render(request, 'companies/search.html', {\n        'companies': companies,\n        'query': query,\n        'location': location,\n        'is_active': is_active\n    })</pre>\n    </div>\n    \n    <p>検索フォームの例（search.html）：</p>\n    \n    <div class="code-block">\n        <pre>&lt;form method="get"&gt;\n    &lt;div class="search-field"&gt;\n        &lt;label for="q"&gt;キーワード検索:&lt;/label&gt;\n        &lt;input type="text" id="q" name="q" value="{{ query }}"&gt;\n    &lt;/div&gt;\n    \n    &lt;div class="search-field"&gt;\n        &lt;label for="location"&gt;場所:&lt;/label&gt;\n        &lt;select id="location" name="location"&gt;\n            &lt;option value="" {% if not location %}selected{% endif %}&gt;すべて&lt;/option&gt;\n            &lt;option value="東京" {% if location == '東京' %}selected{% endif %}&gt;東京&lt;/option&gt;\n            &lt;option value="大阪" {% if location == '大阪' %}selected{% endif %}&gt;大阪&lt;/option&gt;\n            &lt;option value="名古屋" {% if location == '名古屋' %}selected{% endif %}&gt;名古屋&lt;/option&gt;\n        &lt;/select&gt;\n    &lt;/div&gt;\n    \n    &lt;div class="search-field"&gt;\n        &lt;label for="active"&gt;ステータス:&lt;/label&gt;\n        &lt;select id="active" name="active"&gt;\n            &lt;option value="" {% if not is_active %}selected{% endif %}&gt;すべて&lt;/option&gt;\n            &lt;option value="1" {% if is_active == '1' %}selected{% endif %}&gt;アクティブ&lt;/option&gt;\n            &lt;option value="0" {% if is_active == '0' %}selected{% endif %}&gt;非アクティブ&lt;/option&gt;\n        &lt;/select&gt;\n    &lt;/div&gt;\n    \n    &lt;button type="submit"&gt;検索&lt;/button&gt;\n&lt;/form&gt;</pre>\n    </div>\n</div>\n\n<div class="note">\n    <p><strong>注意点：</strong></p>\n    <ul>\n        <li>Qオブジェクトを使用するには、<code>from django.db.models import Q</code>のインポートが必要です。</li>\n        <li>複雑な条件を使用する場合は、括弧を使って条件の優先順位を明確にすることをお勧めします。</li>\n        <li>Qオブジェクトは通常のfilterの条件と組み合わせることもできます。その場合、通常の条件はAND条件として扱われます。</li>\n    </ul>\n</div>	14
146	2024-06-30 18:21:10	2025-03-23 07:35:09.428478	4	13	フィルタリングしたリレーションのデータを取得する	\N	views.py	from django.db.models import Prefetch\\n\\nperson_prefetch = Prefetch('person', queryset=Person.objects.filter(name='test'))\\ncompany = Company.objects.prefetch_related(person_prefetch).get(pk=1)\\n\\nfor person in company.person.all():\\n   print(person.name)	\N	\N	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>Prefetchオブジェクトの基本</h2>\n    <p>Djangoでは、Prefetchオブジェクトを使用してprefetch_relatedで取得する関連モデルをさらに細かくフィルタリングすることができます。基本的な構文は以下の通りです：</p>\n    \n    <div class="code-block">\n        <pre>from django.db.models import Prefetch\n\n変数名 = Prefetch('リレーションのフィールド名', queryset=多側のモデルでのORM)</pre>\n    </div>\n    \n    <p>定義した変数をprefetch_related()の引数にすることで、フィルタリングされたリレーションのデータのみを取得することができます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>基本的な使用例</h2>\n    <p>例えば、Companyモデルに関連付けられたPersonモデルのうち、特定の条件に一致するものだけを取得する場合：</p>\n    \n    <div class="code-block">\n        <pre>from django.db.models import Prefetch\nfrom .models import Company, Person\n\n# nameが'test'のPersonだけをプリフェッチする\npersons_prefetch = Prefetch('persons', queryset=Person.objects.filter(name='test'))\n\n# Companyモデルのpkが1のデータと、それに関連する特定のPersonデータを取得\ncompany = Company.objects.prefetch_related(persons_prefetch).get(pk=1)</pre>\n    </div>\n    \n    <p>上の例では、Companyモデルのpkが1のモデルに紐づいたPersonの中でnameフィールドがtestのデータだけを取得しています。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>Prefetchの様々な使用例</h2>\n    <p>Prefetchオブジェクトではfilterだけでなく、様々なクエリメソッドを使用できます：</p>\n    \n    <div class="code-block">\n        <pre># 並べ替え（order_by）\nactive_persons = Prefetch('persons', \n                         queryset=Person.objects.filter(is_active=True).order_by('name'))\n\n# 除外（exclude）\nnon_tokyo_persons = Prefetch('persons', \n                            queryset=Person.objects.exclude(location='東京'))\n\n# 取得フィールドの制限（values）\npersons_names = Prefetch('persons', \n                         queryset=Person.objects.values('id', 'name'))</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>複数のPrefetchの組み合わせ</h2>\n    <p>複数のPrefetchオブジェクトを組み合わせることもできます：</p>\n    \n    <div class="code-block">\n        <pre>from django.db.models import Prefetch\n\n# アクティブな社員をプリフェッチ\nactive_persons = Prefetch('persons', \n                         queryset=Person.objects.filter(is_active=True))\n\n# 東京の部署をプリフェッチ\ntokyo_departments = Prefetch('departments', \n                            queryset=Department.objects.filter(location='東京'))\n\n# 両方を適用して会社データを取得\ncompanies = Company.objects.prefetch_related(active_persons, tokyo_departments).all()</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>ネストしたPrefetch</h2>\n    <p>Prefetchオブジェクト内でさらにprefetch_relatedを使うことも可能です：</p>\n    \n    <div class="code-block">\n        <pre># Personに関連するProjectをフィルタリングしてプリフェッチ\nprojects_prefetch = Prefetch('projects', \n                            queryset=Project.objects.filter(status='active'))\n\n# Personをプリフェッチし、さらにそのPersonに関連するProjectもプリフェッチ\npersons_with_projects = Prefetch('persons', \n                                queryset=Person.objects.prefetch_related(projects_prefetch))\n\n# 会社と、その社員、さらにその社員のプロジェクトを取得\ncompanies = Company.objects.prefetch_related(persons_with_projects).all()</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">6</span>実践的な使用例</h2>\n    <p>views.pyでのPrefetchオブジェクトの使用例：</p>\n    \n    <div class="code-block">\n        <pre>from django.shortcuts import render\nfrom django.db.models import Prefetch\nfrom .models import Company, Person, Project\n\ndef company_detail(request, company_id):\n    # リクエストからフィルターパラメータを取得\n    department = request.GET.get('department')\n    active_only = request.GET.get('active_only') == 'true'\n    \n    # 基本的な社員クエリを作成\n    persons_query = Person.objects.all()\n    \n    # フィルターを適用\n    if department:\n        persons_query = persons_query.filter(department=department)\n    \n    if active_only:\n        persons_query = persons_query.filter(is_active=True)\n    \n    # 常に名前で並べ替え\n    persons_query = persons_query.order_by('name')\n    \n    # Prefetchオブジェクトを作成\n    persons_prefetch = Prefetch('persons', queryset=persons_query)\n    \n    # プロジェクトもプリフェッチ（アクティブなプロジェクトのみ）\n    projects_prefetch = Prefetch('projects', \n                               queryset=Project.objects.filter(status='active'))\n    \n    # 会社データと関連データを取得\n    company = Company.objects.prefetch_related(\n        persons_prefetch,\n        'departments',\n        Prefetch('persons__projects', queryset=Project.objects.filter(status='active'))\n    ).get(id=company_id)\n    \n    return render(request, 'companies/detail.html', {\n        'company': company,\n        'department_filter': department,\n        'active_only': active_only\n    })</pre>\n    </div>\n    \n    <p>テンプレートでの使用例（detail.html）：</p>\n    \n    <div class="code-block">\n        <pre>&lt;h1&gt;{{ company.name }}の詳細&lt;/h1&gt;\n\n&lt;h2&gt;社員一覧&lt;/h2&gt;\n&lt;div class="filters"&gt;\n    &lt;form method="get"&gt;\n        &lt;select name="department"&gt;\n            &lt;option value=""&gt;すべての部門&lt;/option&gt;\n            {% for dept in company.departments.all %}\n                &lt;option value="{{ dept.name }}" {% if department_filter == dept.name %}selected{% endif %}&gt;\n                    {{ dept.name }}\n                &lt;/option&gt;\n            {% endfor %}\n        &lt;/select&gt;\n        \n        &lt;label&gt;\n            &lt;input type="checkbox" name="active_only" value="true" {% if active_only %}checked{% endif %}&gt;\n            アクティブな社員のみ表示\n        &lt;/label&gt;\n        \n        &lt;button type="submit"&gt;フィルター適用&lt;/button&gt;\n    &lt;/form&gt;\n&lt;/div&gt;\n\n&lt;ul class="employees"&gt;\n    {% for person in company.persons.all %}\n        &lt;li&gt;\n            &lt;h3&gt;{{ person.name }} ({{ person.department }})&lt;/h3&gt;\n            \n            {% if person.projects.exists %}\n                &lt;h4&gt;担当プロジェクト:&lt;/h4&gt;\n                &lt;ul&gt;\n                    {% for project in person.projects.all %}\n                        &lt;li&gt;{{ project.name }} ({{ project.status }})&lt;/li&gt;\n                    {% endfor %}\n                &lt;/ul&gt;\n            {% else %}\n                &lt;p&gt;担当プロジェクトはありません&lt;/p&gt;\n            {% endif %}\n        &lt;/li&gt;\n    {% empty %}\n        &lt;li&gt;条件に一致する社員はいません&lt;/li&gt;\n    {% endfor %}\n&lt;/ul&gt;</pre>\n    </div>\n</div>\n\n<div class="note">\n    <p><strong>重要ポイント：</strong></p>\n    <ul>\n        <li>Prefetchの第1引数は「リレーションのフィールド名」、querysetパラメータには「多側のモデルをどのようにするか」を指定します。</li>\n        <li>Prefetchオブジェクトを使うことで、関連データの取得をより細かく制御でき、必要なデータだけを効率的に取得できます。</li>\n        <li>複雑なフィルタリングやソートが必要な場合、Prefetchオブジェクトは特に有用です。</li>\n        <li>ネストした関連（例：company→person→project）でも使用できますが、クエリが複雑になるため注意が必要です。</li>\n    </ul>\n</div>	16
147	2024-06-30 18:33:11	2025-03-23 07:36:25.366298	4	13	特定の計算などをしたフィールドを追加して取得する	\N	views.py	model = Person.objects.all().annotate(\\n    next_age=F('age') + 1\\n).values()	\N	\N	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>annotateメソッドの基本</h2>\n    <p>Djangoでは、annotateメソッドを使用して、クエリ結果に一時的なフィールドを追加することができます。基本的な構文は以下の通りです：</p>\n    \n    <div class="code-block">\n        <pre>モデル.objects.annotate(追加するフィールド名=追加するデータ)</pre>\n    </div>\n    \n    <p>annotateを使用しても取得したデータに対してフィールドを追加するだけなので、元のモデルにフィールドが増えるわけではありません。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>基本的な使用例</h2>\n    <p>例えば、Personモデルのageフィールドに1を足した値を新しいフィールドとして追加する場合：</p>\n    \n    <div class="code-block">\n        <pre>from django.db.models import F\n\n# ageフィールドに1を足した値をnext_ageフィールドとして追加\npersons = Person.objects.annotate(next_age=F('age') + 1)</pre>\n    </div>\n    \n    <p>上の例では、Personモデルにannotateでnext_ageフィールドにageフィールドの値+1した値を追加しています。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>様々な計算の例</h2>\n    <p>annotateメソッドでは、様々な計算や集計ができます：</p>\n    \n    <div class="code-block">\n        <pre>from django.db.models import F, Sum, Count, Avg, Max, Min\n\n# 数値演算\nproducts = Product.objects.annotate(\n    discounted_price=F('price') * 0.9,  # 10%割引価格\n    price_with_tax=F('price') * 1.1     # 税込価格\n)\n\n# 文字列連結（PostgreSQLの場合）\nfrom django.db.models.functions import Concat\nfrom django.db.models import Value\npersons = Person.objects.annotate(\n    full_name=Concat('first_name', Value(' '), 'last_name')\n)</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>集計関数との組み合わせ</h2>\n    <p>関連モデルの集計値を注釈として追加することも可能です：</p>\n    \n    <div class="code-block">\n        <pre># 会社ごとの社員数を追加\ncompanies = Company.objects.annotate(employee_count=Count('persons'))\n\n# 会社ごとの平均年齢を追加\ncompanies = Company.objects.annotate(avg_age=Avg('persons__age'))\n\n# 会社ごとの最高年齢と最低年齢を追加\ncompanies = Company.objects.annotate(\n    max_age=Max('persons__age'),\n    min_age=Min('persons__age')\n)\n\n# 会社ごとの部署数を追加\ncompanies = Company.objects.annotate(department_count=Count('departments', distinct=True))</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>フィルタリングと組み合わせる</h2>\n    <p>annotateで追加したフィールドを使ってフィルタリングすることもできます：</p>\n    \n    <div class="code-block">\n        <pre># 社員数が10人以上の会社を取得\ncompanies = Company.objects.annotate(\n    employee_count=Count('persons')\n).filter(employee_count__gte=10)\n\n# 平均年齢が30歳以上の会社を取得\ncompanies = Company.objects.annotate(\n    avg_age=Avg('persons__age')\n).filter(avg_age__gte=30)\n\n# 追加フィールドでソート\ncompanies = Company.objects.annotate(\n    employee_count=Count('persons')\n).order_by('-employee_count')  # 社員数の多い順</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">6</span>実践的な使用例</h2>\n    <p>views.pyでのannotateメソッドの使用例：</p>\n    \n    <div class="code-block">\n        <pre>from django.shortcuts import render\nfrom django.db.models import Count, Avg, F\nfrom .models import Company, Person\n\ndef company_statistics(request):\n    # 会社ごとの統計情報を計算\n    companies = Company.objects.annotate(\n        employee_count=Count('persons'),\n        avg_age=Avg('persons__age'),\n        next_year_avg_age=Avg('persons__age') + 1\n    ).order_by('-employee_count')\n    \n    return render(request, 'companies/statistics.html', {\n        'companies': companies\n    })\n\ndef product_pricing(request):\n    # 割引率をパラメータから取得\n    discount_rate = float(request.GET.get('discount', 0)) / 100\n    \n    # 標準価格と割引価格を計算\n    products = Product.objects.annotate(\n        price_with_tax=F('price') * 1.1,\n        discounted_price=F('price') * (1 - discount_rate)\n    )\n    \n    return render(request, 'products/pricing.html', {\n        'products': products,\n        'discount_rate': discount_rate * 100\n    })</pre>\n    </div>\n    \n    <p>テンプレートでの使用例（statistics.html）：</p>\n    \n    <div class="code-block">\n        <pre>&lt;h1&gt;会社統計&lt;/h1&gt;\n\n&lt;table&gt;\n    &lt;tr&gt;\n        &lt;th&gt;会社名&lt;/th&gt;\n        &lt;th&gt;社員数&lt;/th&gt;\n        &lt;th&gt;平均年齢&lt;/th&gt;\n        &lt;th&gt;来年の平均年齢&lt;/th&gt;\n    &lt;/tr&gt;\n    {% for company in companies %}\n        &lt;tr&gt;\n            &lt;td&gt;{{ company.name }}&lt;/td&gt;\n            &lt;td&gt;{{ company.employee_count }}人&lt;/td&gt;\n            &lt;td&gt;{{ company.avg_age|floatformat:1 }}歳&lt;/td&gt;\n            &lt;td&gt;{{ company.next_year_avg_age|floatformat:1 }}歳&lt;/td&gt;\n        &lt;/tr&gt;\n    {% endfor %}\n&lt;/table&gt;</pre>\n    </div>\n</div>\n\n<div class="note">\n    <p><strong>重要ポイント：</strong></p>\n    <ul>\n        <li>annotateは一時的なフィールドを追加するため、データベースに変更は加えられません。</li>\n        <li>複雑な計算をデータベース側で行うことができるため、パフォーマンスの向上につながります。</li>\n        <li>F式やデータベース関数を使用することで、より高度な計算が可能です。</li>\n        <li>複数のannotateを連鎖させると、各annotateの結果を次のannotateで使用できます。</li>\n    </ul>\n</div>	17
148	2024-06-30 18:46:55	2025-03-23 07:37:58.015492	4	13	追加したフィールドに値を代入する	\N	views.py	from django.db.models import Value\\n\\nmodel = Person.objects.all().annotate(\\n    test = Value(1)\\n).values()\\n\\nprint(model)	\N	\N	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>Valueオブジェクトの基本</h2>\n    <p>Djangoでは、Value式を使って固定値をORMのクエリに組み込むことができます。基本的な構文は以下の通りです：</p>\n    \n    <div class="code-block">\n        <pre>from django.db.models import Value\n\nValue(値)</pre>\n    </div>\n    \n    <p>ORMではannotateで作成したフィールドに直接値を代入しようとするとエラーとなるので、Valueオブジェクトを使用する必要があります。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>基本的な使用例</h2>\n    <p>例えば、annotateメソッドでtestという名前のフィールドに固定値の1を代入する場合：</p>\n    \n    <div class="code-block">\n        <pre>from django.db.models import Value\n\n# testフィールドに1を代入\npersons = Person.objects.annotate(test=Value(1))</pre>\n    </div>\n    \n    <p>上の例では、testフィールドに1を代入しています。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>様々な型の値を設定</h2>\n    <p>Valueオブジェクトには、様々な型の値を設定することができます：</p>\n    \n    <div class="code-block">\n        <pre># 数値\npersons = Person.objects.annotate(score=Value(100))\n\n# 文字列\npersons = Person.objects.annotate(status=Value('アクティブ'))\n\n# 真偽値\npersons = Person.objects.annotate(is_featured=Value(True))\n\n# 日付・時刻（from djangoのみをインポートして簡潔に示す）\nfrom django import timezone\npersons = Person.objects.annotate(\n    reference_date=Value(timezone.now().date())\n)</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>計算式との組み合わせ</h2>\n    <p>Valueオブジェクトは、F式や計算式と組み合わせて使うことができます：</p>\n    \n    <div class="code-block">\n        <pre>from django.db.models import F, Value\n\n# 年齢に固定値を足す\npersons = Person.objects.annotate(\n    adjusted_age=F('age') + Value(5)  # 5歳上の年齢\n)\n\n# 固定の割引率を適用\nproducts = Product.objects.annotate(\n    discount_rate=Value(0.1),  # 10%割引\n    sale_price=F('price') * (Value(1) - F('discount_rate'))\n)</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>文字列連結での使用</h2>\n    <p>Valueオブジェクトは文字列連結にも使用できます（PostgreSQL使用時）：</p>\n    \n    <div class="code-block">\n        <pre>from django.db.models import Value\nfrom django.db.models.functions import Concat\n\n# 姓名の間にスペースを挿入して連結\npersons = Person.objects.annotate(\n    full_name=Concat(\n        'first_name', \n        Value(' '),  # スペースを挿入\n        'last_name'\n    )\n)\n\n# テキストを追加\nproducts = Product.objects.annotate(\n    price_text=Concat(\n        'name',\n        Value(': '),\n        'price',\n        Value('円')\n    )\n)</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">6</span>実践的な使用例</h2>\n    <p>views.pyでのValueオブジェクトの使用例：</p>\n    \n    <div class="code-block">\n        <pre>from django.shortcuts import render\nfrom django.db.models import Value, F, ExpressionWrapper, DecimalField\nfrom django.db.models.functions import Concat\nfrom .models import Product\n\ndef product_list(request):\n    # 税率と割引率を定義\n    tax_rate = 0.1  # 10%\n    discount_rate = 0.05  # 5%\n    \n    # 様々な価格計算と固定値の適用\n    products = Product.objects.annotate(\n        # 固定値\n        tax_rate=Value(tax_rate),\n        discount_rate=Value(discount_rate),\n        \n        # 価格計算\n        price_with_tax=ExpressionWrapper(\n            F('price') * (Value(1) + F('tax_rate')),\n            output_field=DecimalField(max_digits=10, decimal_places=2)\n        ),\n        \n        discounted_price=ExpressionWrapper(\n            F('price') * (Value(1) - F('discount_rate')),\n            output_field=DecimalField(max_digits=10, decimal_places=2)\n        ),\n        \n        # 表示用テキスト\n        price_label=Concat(\n            'name',\n            Value(' - '),\n            'price',\n            Value('円 (税込: '),\n            F('price_with_tax'),\n            Value('円)')\n        )\n    )\n    \n    return render(request, 'products/list.html', {\n        'products': products,\n        'tax_rate': tax_rate * 100,\n        'discount_rate': discount_rate * 100\n    })</pre>\n    </div>\n    \n    <p>テンプレートでの使用例（list.html）：</p>\n    \n    <div class="code-block">\n        <pre>&lt;h1&gt;商品一覧&lt;/h1&gt;\n&lt;p&gt;税率: {{ tax_rate }}% / 割引率: {{ discount_rate }}%&lt;/p&gt;\n\n&lt;table&gt;\n    &lt;tr&gt;\n        &lt;th&gt;商品名&lt;/th&gt;\n        &lt;th&gt;通常価格&lt;/th&gt;\n        &lt;th&gt;税込価格&lt;/th&gt;\n        &lt;th&gt;割引価格&lt;/th&gt;\n    &lt;/tr&gt;\n    {% for product in products %}\n        &lt;tr&gt;\n            &lt;td&gt;{{ product.name }}&lt;/td&gt;\n            &lt;td&gt;{{ product.price }}円&lt;/td&gt;\n            &lt;td&gt;{{ product.price_with_tax }}円&lt;/td&gt;\n            &lt;td&gt;{{ product.discounted_price }}円&lt;/td&gt;\n        &lt;/tr&gt;\n    {% endfor %}\n&lt;/table&gt;\n\n&lt;h2&gt;商品ラベル&lt;/h2&gt;\n&lt;ul&gt;\n    {% for product in products %}\n        &lt;li&gt;{{ product.price_label }}&lt;/li&gt;\n    {% endfor %}\n&lt;/ul&gt;</pre>\n    </div>\n</div>\n\n<div class="note">\n    <p><strong>重要ポイント：</strong></p>\n    <ul>\n        <li>Valueオブジェクトは、Django ORMのクエリ内で固定値を使用するために必要です。</li>\n        <li>数値、文字列、真偽値、日付など、様々な型の値をValueオブジェクトで包むことができます。</li>\n        <li>F式と組み合わせることで、既存のフィールド値と固定値を組み合わせた計算が可能です。</li>\n        <li>複雑な計算やテキスト連結を行う場合は、適切なoutput_fieldを指定することがあります。</li>\n    </ul>\n</div>	18
149	2024-06-30 18:52:08	2025-03-23 07:39:04.898354	4	13	カウントした数を代入する	\N	views.py	from django.db.models import Count\\n\\nmodel = Company.objects.all().annotate(\\n    persons=Count('person')\\n).values()\\n\\nprint(model)	\N	\N	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>Count関数の基本</h2>\n    <p>Djangoでは、Count関数を使用して関連するモデルの数を数えることができます。基本的な構文は以下の通りです：</p>\n    \n    <div class="code-block">\n        <pre>from django.db.models import Count\n\nCount(数えたいフィールド)</pre>\n    </div>\n    \n    <p>この関数は、annotateやaggregateメソッドと組み合わせて使用します。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>基本的な使用例</h2>\n    <p>例えば、Companyモデルに紐づいているPersonモデルの数を数える場合：</p>\n    \n    <div class="code-block">\n        <pre>from django.db.models import Count\n\n# 各会社に紐づくPersonの数をカウント\ncompanies = Company.objects.annotate(persons_count=Count('persons'))</pre>\n    </div>\n    \n    <p>上の例は、自身に紐づいたPersonモデルの数量をpersons_countフィールドに代入しています。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>フィルタリングと組み合わせる</h2>\n    <p>Count関数はフィルタリングと組み合わせることができます：</p>\n    \n    <div class="code-block">\n        <pre># 社員が5人以上の会社だけを取得\ncompanies = Company.objects.annotate(\n    persons_count=Count('persons')\n).filter(persons_count__gte=5)\n\n# 特定の部署の社員数をカウント\ncompanies = Company.objects.annotate(\n    dev_count=Count('persons', filter=Q(persons__department='開発部'))\n)</pre>\n    </div>\n    \n    <p>filterパラメータを使うことで、カウント対象を特定の条件に一致するものだけに限定できます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>distinct引数を使う</h2>\n    <p>重複を除外してカウントする場合は、distinct=Trueを指定します：</p>\n    \n    <div class="code-block">\n        <pre># 各会社にある部署の数（重複を除く）\ncompanies = Company.objects.annotate(\n    department_count=Count('persons__department', distinct=True)\n)\n\n# 各会社が取引している顧客の数（重複を除く）\ncompanies = Company.objects.annotate(\n    customer_count=Count('projects__customer', distinct=True)\n)</pre>\n    </div>\n    \n    <p>distinctを使うことで、同じ値が複数回出現しても1つとしてカウントされるようになります。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>複数のカウントを同時に行う</h2>\n    <p>1つのクエリで複数の集計を行うことができます：</p>\n    \n    <div class="code-block">\n        <pre># 各会社の社員数と部署数を同時に取得\ncompanies = Company.objects.annotate(\n    persons_count=Count('persons'),\n    department_count=Count('departments')\n)\n\n# 部署ごとの男性社員数と女性社員数\ndepartments = Department.objects.annotate(\n    male_count=Count('persons', filter=Q(persons__gender='男性')),\n    female_count=Count('persons', filter=Q(persons__gender='女性'))\n)</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">6</span>実践的な使用例</h2>\n    <p>views.pyでのCount関数の使用例：</p>\n    \n    <div class="code-block">\n        <pre>from django.shortcuts import render\nfrom django.db.models import Count, Q\nfrom .models import Company, Department\n\ndef company_statistics(request):\n    # 会社ごとの統計情報を計算\n    companies = Company.objects.annotate(\n        # 全社員数\n        total_employees=Count('persons'),\n        \n        # 部署ごとの社員数\n        dev_employees=Count('persons', filter=Q(persons__department='開発部')),\n        sales_employees=Count('persons', filter=Q(persons__department='営業部')),\n        admin_employees=Count('persons', filter=Q(persons__department='管理部')),\n        \n        # 部署数（重複を除外）\n        department_count=Count('persons__department', distinct=True)\n    ).order_by('-total_employees')\n    \n    return render(request, 'companies/statistics.html', {\n        'companies': companies\n    })\n\ndef department_comparison(request):\n    # 部署ごとの統計\n    departments = Department.objects.annotate(\n        employee_count=Count('persons'),\n        male_ratio=Count('persons', filter=Q(persons__gender='男性')) * 100.0 / Count('persons'),\n        project_count=Count('persons__projects', distinct=True)\n    ).order_by('-employee_count')\n    \n    return render(request, 'departments/comparison.html', {\n        'departments': departments\n    })</pre>\n    </div>\n    \n    <p>テンプレートでの使用例（statistics.html）：</p>\n    \n    <div class="code-block">\n        <pre>&lt;h1&gt;会社統計&lt;/h1&gt;\n\n&lt;table&gt;\n    &lt;tr&gt;\n        &lt;th&gt;会社名&lt;/th&gt;\n        &lt;th&gt;総社員数&lt;/th&gt;\n        &lt;th&gt;開発部&lt;/th&gt;\n        &lt;th&gt;営業部&lt;/th&gt;\n        &lt;th&gt;管理部&lt;/th&gt;\n        &lt;th&gt;部署数&lt;/th&gt;\n    &lt;/tr&gt;\n    {% for company in companies %}\n        &lt;tr&gt;\n            &lt;td&gt;{{ company.name }}&lt;/td&gt;\n            &lt;td&gt;{{ company.total_employees }}人&lt;/td&gt;\n            &lt;td&gt;{{ company.dev_employees }}人&lt;/td&gt;\n            &lt;td&gt;{{ company.sales_employees }}人&lt;/td&gt;\n            &lt;td&gt;{{ company.admin_employees }}人&lt;/td&gt;\n            &lt;td&gt;{{ company.department_count }}部署&lt;/td&gt;\n        &lt;/tr&gt;\n    {% endfor %}\n&lt;/table&gt;</pre>\n    </div>\n</div>\n\n<div class="note">\n    <p><strong>重要ポイント：</strong></p>\n    <ul>\n        <li>Count関数は、Django ORMのクエリ内で数を集計するために使用します。</li>\n        <li>annotateと組み合わせると、各レコードに集計フィールドを追加できます。</li>\n        <li>filterパラメータを使うと、特定条件に一致するものだけをカウントできます。</li>\n        <li>distinct=Trueを指定すると、重複する値を除外してカウントできます。</li>\n        <li>複数のCount関数を組み合わせることで、1つのクエリで複数の集計を行うことができます。</li>\n    </ul>\n</div>	19
155	2024-07-01 04:13:33	2024-07-11 12:42:22	1	3	オブジェクト	\N	Javascript	let user = {\\n      name: 'tarou',\\n      age: 30,\\n   }\\n\\n   console.log(user.name);\\n   console.log(user.age);\\n\\nlet users = [{\\n      name: 'tarou',\\n      age: 30,\\n   },{\\n      name: 'hanako',\\n      age: 20,\\n   }]\\n\\n   console.log(users[0].name);	\N	\N	\N	\N	オブジェクトとは、Pythonの辞書型のようなもので、キーと値を設定し、キーを使用して値にアクセスできる機能です。<br><div class="code-block">変数名 = {<br>   キー名: 値,<br>}</div><br>の形式で定義することができ,区切りでキーと値を追加することができます。<br><br>アクセス時は、<br><div class="code-block">オブジェクトを代入した変数.キー</div><br>の形式でアクセスすることができます。<br><br>また、変数と同名のプロパティの時は、キーを省略して記入することができ、<br><div class="code-block">const test = 'test';<br>const test2 = 'test2';<br><br>const dict = {test, test2};</div><br>と記入すると、dictは{test: test, test2: test2}と同じ内容となります。<br><br>オブジェクトには、関数も代入することが可能となっており、<br><div class="code-block">const dict = {<br>    test: 'test',<br>    testFunc(){<br>        console.log(this.test)<br>    }<br>}<br><br>dict.testFunc();</div><br>のように記入します。<br>呼び出し時はプロパティ時と同じくオブジェクトを代入した変数.オブジェクト内の関数()の形式で呼び出します。<br>また、thisを使用することで、オブジェクト自身のほかのプロパティを使用することもできます。	14
156	2024-07-01 04:24:37	2024-07-01 04:30:55	1	3	配列	\N	Javascript	let test_array = [1, 2, 3, 'test'];\\n    console.log(test_array);\\n    console.log(test_array[0])	\N	\N	\N	\N	配列は、一つの変数に複数の値を代入時などに使用されます。<br><div class="code-block">配列を代入する変数 = [値]</div><br>の形式で定義することができ,区切りで値を追加することができます。<br><br>配列は先頭を0としてインデックスという値がふられ、<br><div class="code-block">配列を代入した変数[インデックス]</div><br>の形式でアクセスすることができます。<br><br>また、配列には異なる型(数字と文字など)を混ぜて代入することができます。	13
157	2024-07-01 05:56:58	2024-07-01 06:06:07	1	3	繰り返し処理(while文)	\N	Javascript	let count = 0;\\nwhile(count <= 10) {\\n    console.log(count);\\n    count++;\\n}	\N	\N	\N	\N	while文は、条件を満たしている間繰り返し処理を行う文となっています。<br><br>while文は、<br><div class="code-block">while(条件){<br>    条件に一致する間行う処理<br>}</div><br>の形式で記入します。<br><br>上の例では、変数countが10以下の間繰り返し処理を行っています。<br>最後のcount ++;はcount = count +1;と同じ意味となります。<br>変数++などで変数の値を変化させないと繰り返し条件を満たし続けることとなり無限ループしてしまうので注意してください。	15
151	2024-06-30 19:04:07	2025-03-23 07:41:45.74863	4	13	自身を呼び出しているモデルのデータを使ってフィルタリングする	\N	views.py	from django.db.models import Subquery, OuterRef\\n\\nlast_sales_date = Sales.objects.filter(\\n    name=OuterRef('pk')\\n   ).order_by('-date').values('date')[:1]\\n\\nmodel = Person.objects.annotate(\\n    last_sale_date=Subquery(last_sales_date))\\n\\nprint(model.values('name', 'last_sale_date'))	\N	\N	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>SubqueryとOuterRefの基本</h2>\n    <p>Djangoでは、SubqueryとOuterRefを組み合わせることで、自身を呼び出しているデータを使用してフィルタリングし、そのデータをannotateで追加することができます。</p>\n    \n    <div class="code-block">\n        <pre>from django.db.models import Subquery, OuterRef</pre>\n    </div>\n    \n    <p><strong>重要な注意点：</strong> Subqueryは複数データがある状態が返ってくるとエラーになるので、返ってくるデータが1つになるようにする必要があります。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>基本的な使用例</h2>\n    <p>例えば、各Personに対して最終売上日を取得する場合：</p>\n    \n    <div class="code-block">\n        <pre>from django.db.models import Subquery, OuterRef\n\n# 各人の最終売上日を取得するサブクエリ\nlast_sales_date = Sales.objects.filter(\n    person_id=OuterRef('pk')  # 外部参照で現在処理中のPersonのpkを参照\n).order_by('-date').values('date')[:1]  # 日付の降順で並べて最初の1件だけ取得\n\n# Personに最終売上日を追加\npersons = Person.objects.annotate(\n    last_sale_date=Subquery(last_sales_date)\n)</pre>\n    </div>\n    \n    <p>上の例は、OuterRefを使用して、自身を呼び出しているモデル(Person)のpkを使用してフィルタリングしています。last_sales_dateはperson_idフィールドが自身を呼び出しているモデルのpkのデータを取得し、それをdateで降順にし、最初の1件目を取得しています。</p>\n    \n    <p>Subqueryはannotateに他のモデルのデータを埋め込むのに使用され、ここでは、変数last_sales_dateで処理された結果がlast_sale_dateフィールドに代入されています。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>複雑な例：フィールドの取得と条件付きサブクエリ</h2>\n    <p>特定のフィールドの値や、条件付きのデータを取得する例：</p>\n    \n    <div class="code-block">\n        <pre># 各人の最終売上額を取得\nlast_sale_amount = Sales.objects.filter(\n    person_id=OuterRef('pk')\n).order_by('-date').values('amount')[:1]\n\n# 各人の今年の最高売上額を取得\nfrom django.db.models import Max\nfrom datetime import datetime\n\ncurrent_year = datetime.now().year\nmax_sale_this_year = Sales.objects.filter(\n    person_id=OuterRef('pk'),\n    date__year=current_year\n).values('person_id').annotate(\n    max_amount=Max('amount')\n).values('max_amount')\n\n# Personに最終売上額と今年の最高売上額を追加\npersons = Person.objects.annotate(\n    last_sale_amount=Subquery(last_sale_amount),\n    max_sale_this_year=Subquery(max_sale_this_year)\n)</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>複数のモデルにまたがるサブクエリ</h2>\n    <p>複数のモデルを通じた関連データの取得：</p>\n    \n    <div class="code-block">\n        <pre># 各会社の最終売上の担当者名を取得\nlatest_sale_person = Sales.objects.filter(\n    company_id=OuterRef('pk')\n).order_by('-date').values('person__name')[:1]\n\n# 各会社の売上合計が最も多い部門名を取得\ntop_department = Sales.objects.filter(\n    company_id=OuterRef('pk')\n).values('department').annotate(\n    total=Sum('amount')\n).order_by('-total').values('department')[:1]\n\n# Companyに最終売上担当者と売上トップ部門を追加\ncompanies = Company.objects.annotate(\n    latest_sale_by=Subquery(latest_sale_person),\n    top_department=Subquery(top_department)\n)</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>条件分岐を含むサブクエリ</h2>\n    <p>Case式とSubqueryを組み合わせて、条件分岐を含む集計を行う例：</p>\n    \n    <div class="code-block">\n        <pre>from django.db.models import Case, When, Value, CharField\n\n# 各人の売上状況に基づくステータスを計算\nhas_sales = Sales.objects.filter(\n    person_id=OuterRef('pk')\n).values('person_id').annotate(\n    count=Count('id')\n).values('count')[:1]\n\n# Personにステータスを追加\npersons = Person.objects.annotate(\n    sales_status=Case(\n        When(Subquery(has_sales) > 0, then=Value('有効')),\n        default=Value('未売上'),\n        output_field=CharField()\n    )\n)</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">6</span>実践的な使用例</h2>\n    <p>views.pyでのSubqueryとOuterRefの使用例：</p>\n    \n    <div class="code-block">\n        <pre>from django.shortcuts import render\nfrom django.db.models import Subquery, OuterRef, Sum, Count, F, ExpressionWrapper, FloatField\nfrom .models import Person, Sales, Company\n\ndef sales_dashboard(request):\n    # 各人の最終売上情報\n    last_sale_date = Sales.objects.filter(\n        person_id=OuterRef('pk')\n    ).order_by('-date').values('date')[:1]\n    \n    last_sale_amount = Sales.objects.filter(\n        person_id=OuterRef('pk')\n    ).order_by('-date').values('amount')[:1]\n    \n    # 各人の売上合計と平均\n    total_sales = Sales.objects.filter(\n        person_id=OuterRef('pk')\n    ).values('person_id').annotate(\n        total=Sum('amount')\n    ).values('total')[:1]\n    \n    sales_count = Sales.objects.filter(\n        person_id=OuterRef('pk')\n    ).values('person_id').annotate(\n        count=Count('id')\n    ).values('count')[:1]\n    \n    # 平均売上額を計算（total_salesとsales_countから）\n    persons = Person.objects.annotate(\n        last_sale_date=Subquery(last_sale_date),\n        last_sale_amount=Subquery(last_sale_amount),\n        total_sales=Subquery(total_sales),\n        sales_count=Subquery(sales_count),\n        avg_sale=ExpressionWrapper(\n            F('total_sales') / F('sales_count'),\n            output_field=FloatField()\n        )\n    ).order_by('-total_sales')\n    \n    return render(request, 'persons/dashboard.html', {\n        'persons': persons\n    })</pre>\n    </div>\n    \n    <p>テンプレートでの使用例（dashboard.html）：</p>\n    \n    <div class="code-block">\n        <pre>&lt;h1&gt;営業担当者別ダッシュボード&lt;/h1&gt;\n\n&lt;table&gt;\n    &lt;tr&gt;\n        &lt;th&gt;担当者名&lt;/th&gt;\n        &lt;th&gt;最終売上日&lt;/th&gt;\n        &lt;th&gt;最終売上額&lt;/th&gt;\n        &lt;th&gt;売上合計&lt;/th&gt;\n        &lt;th&gt;売上件数&lt;/th&gt;\n        &lt;th&gt;平均売上額&lt;/th&gt;\n    &lt;/tr&gt;\n    {% for person in persons %}\n        &lt;tr&gt;\n            &lt;td&gt;{{ person.name }}&lt;/td&gt;\n            &lt;td&gt;{{ person.last_sale_date|default:"未売上" }}&lt;/td&gt;\n            &lt;td&gt;{{ person.last_sale_amount|default:"-"|floatformat:0 }}円&lt;/td&gt;\n            &lt;td&gt;{{ person.total_sales|default:0|floatformat:0 }}円&lt;/td&gt;\n            &lt;td&gt;{{ person.sales_count|default:0 }}件&lt;/td&gt;\n            &lt;td&gt;{{ person.avg_sale|default:"-"|floatformat:0 }}円&lt;/td&gt;\n        &lt;/tr&gt;\n    {% endfor %}\n&lt;/table&gt;</pre>\n    </div>\n</div>\n\n<div class="note">\n    <p><strong>重要ポイント：</strong></p>\n    <ul>\n        <li>SubqueryとOuterRefを使うことで、関連モデルの特定データを効率的に取得できます。</li>\n        <li>Subqueryが返すのは必ず1件のデータにする必要があります（[:1]や集計関数を使用）。</li>\n        <li>OuterRefは現在処理中のレコードのフィールド値を参照するために使用します。</li>\n        <li>複数のSubqueryをannotateに追加することで、一度のクエリで複数の関連情報を取得できます。</li>\n        <li>パフォーマンスの観点から、通常のリレーション参照よりもSubqueryを使う方が複雑なケースで効率的なことがあります。</li>\n    </ul>\n</div>	21
152	2024-06-30 19:19:43	2025-03-23 07:43:00.350877	4	13	ORM内での条件分岐	\N	views.py	sales_exists = Sales.objects.filter(name=OuterRef('pk'))\\n\\nperson_model = Person.objects.annotate(\\n    has_sales=Case(\\n        When(Exists(sales_exists), then=Value('売り上げあり')),\\n        default=Value('売り上げなし'),\\n    )\\n)\\n\\nprint(person_model.values('name', 'has_sales'))	\N	\N	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>Case/When式の基本</h2>\n    <p>Djangoでは、Case/When式を使用してORM内で条件分岐を行うことができます。基本的な構文は以下の通りです：</p>\n    \n    <div class="code-block">\n        <pre>from django.db.models import Case, When, Value\n\nCase(\n   When(条件, then=条件に一致したときの値),\n   default=条件に一致しなかったときの値,\n)</pre>\n    </div>\n    \n    <p>この式はSQL文の「CASE WHEN...THEN...ELSE...END」に相当し、データベースレベルで条件分岐を実行します。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>基本的な使用例</h2>\n    <p>例えば、Personモデルに紐づいているSalesの有無によって値を分岐させる場合：</p>\n    \n    <div class="code-block">\n        <pre>from django.db.models import Case, When, Value, Count, CharField\n\n# Personモデルに、Salesが存在するかどうかのフラグを追加\npersons = Person.objects.annotate(\n    sales_count=Count('sales'),\n    has_sales=Case(\n        When(sales_count__gt=0, then=Value('売り上げあり')),\n        default=Value('売り上げなし'),\n        output_field=CharField()\n    )\n)</pre>\n    </div>\n    \n    <p>上の例では、自身に紐づいたSalesが1つでもあれば「売り上げあり」、なければ「売り上げなし」がhas_salesフィールドに代入されています。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>複数の条件分岐</h2>\n    <p>When句を複数使って、複数の条件分岐を作ることもできます：</p>\n    \n    <div class="code-block">\n        <pre>from django.db.models import Case, When, Value, IntegerField\n\n# 売上金額に応じてランク付け\npersons = Person.objects.annotate(\n    total_sales=Sum('sales__amount'),\n    sales_rank=Case(\n        When(total_sales__gte=1000000, then=Value(1)),  # 100万以上はランク1\n        When(total_sales__gte=500000, then=Value(2)),   # 50万以上はランク2\n        When(total_sales__gte=100000, then=Value(3)),   # 10万以上はランク3\n        default=Value(4),                               # それ以下はランク4\n        output_field=IntegerField()\n    )\n)</pre>\n    </div>\n    \n    <p>When句は上から順に評価され、最初に条件が一致したところのthen値が採用されます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>フィルタリングと組み合わせる</h2>\n    <p>Case/When式の結果でフィルタリングすることもできます：</p>\n    \n    <div class="code-block">\n        <pre># ランク1とランク2の人だけを取得\ntop_performers = Person.objects.annotate(\n    total_sales=Sum('sales__amount'),\n    sales_rank=Case(\n        When(total_sales__gte=1000000, then=Value(1)),\n        When(total_sales__gte=500000, then=Value(2)),\n        When(total_sales__gte=100000, then=Value(3)),\n        default=Value(4),\n        output_field=IntegerField()\n    )\n).filter(sales_rank__lte=2)</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>様々な条件式の例</h2>\n    <p>Case/When式ではさまざまな条件を使用できます：</p>\n    \n    <div class="code-block">\n        <pre># 文字列フィールドに基づく条件\npersons = Person.objects.annotate(\n    department_category=Case(\n        When(department__startswith='営業', then=Value('営業系')),\n        When(department__startswith='技術', then=Value('技術系')),\n        When(department__startswith='管理', then=Value('管理系')),\n        default=Value('その他'),\n        output_field=CharField()\n    )\n)\n\n# 複数フィールドの組み合わせ条件\nfrom django.db.models import Q\n\npersons = Person.objects.annotate(\n    status=Case(\n        When(Q(age__gte=60) & Q(years_of_service__gte=20), then=Value('定年退職対象')),\n        When(Q(age__gte=50) & Q(years_of_service__gte=15), then=Value('早期退職可能')),\n        default=Value('通常雇用'),\n        output_field=CharField()\n    )\n)</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">6</span>実践的な使用例</h2>\n    <p>views.pyでのCase/When式の使用例：</p>\n    \n    <div class="code-block">\n        <pre>from django.shortcuts import render\nfrom django.db.models import Case, When, Value, Sum, Count, CharField, IntegerField\nfrom .models import Person, Sales\n\ndef sales_analysis(request):\n    # 売上実績に基づく分析\n    persons = Person.objects.annotate(\n        # 売上件数\n        sales_count=Count('sales'),\n        \n        # 売上合計\n        total_sales=Sum('sales__amount'),\n        \n        # 売上状況の分類\n        sales_status=Case(\n            When(sales_count=0, then=Value('未売上')),\n            When(sales_count__gte=10, then=Value('優良営業')),\n            default=Value('通常営業'),\n            output_field=CharField()\n        ),\n        \n        # 売上金額に基づくランク\n        sales_rank=Case(\n            When(total_sales__gte=1000000, then=Value('S')),\n            When(total_sales__gte=500000, then=Value('A')),\n            When(total_sales__gte=100000, then=Value('B')),\n            When(total_sales__gt=0, then=Value('C')),\n            default=Value('D'),\n            output_field=CharField()\n        ),\n        \n        # 売上達成率に応じたボーナス計算\n        bonus_percentage=Case(\n            When(total_sales__gte=2000000, then=Value(20)),  # 200万以上は20%ボーナス\n            When(total_sales__gte=1000000, then=Value(15)),  # 100万以上は15%ボーナス\n            When(total_sales__gte=500000, then=Value(10)),   # 50万以上は10%ボーナス\n            When(total_sales__gt=0, then=Value(5)),          # 売上あれば5%ボーナス\n            default=Value(0),\n            output_field=IntegerField()\n        )\n    ).order_by('-total_sales')\n    \n    return render(request, 'persons/sales_analysis.html', {\n        'persons': persons\n    })</pre>\n    </div>\n    \n    <p>テンプレートでの使用例（sales_analysis.html）：</p>\n    \n    <div class="code-block">\n        <pre>&lt;h1&gt;営業担当者売上分析&lt;/h1&gt;\n\n&lt;table&gt;\n    &lt;tr&gt;\n        &lt;th&gt;担当者名&lt;/th&gt;\n        &lt;th&gt;売上件数&lt;/th&gt;\n        &lt;th&gt;売上合計&lt;/th&gt;\n        &lt;th&gt;売上状況&lt;/th&gt;\n        &lt;th&gt;ランク&lt;/th&gt;\n        &lt;th&gt;ボーナス率&lt;/th&gt;\n    &lt;/tr&gt;\n    {% for person in persons %}\n        &lt;tr&gt;\n            &lt;td&gt;{{ person.name }}&lt;/td&gt;\n            &lt;td&gt;{{ person.sales_count }}件&lt;/td&gt;\n            &lt;td&gt;{{ person.total_sales|default:0|floatformat:0 }}円&lt;/td&gt;\n            &lt;td&gt;{{ person.sales_status }}&lt;/td&gt;\n            &lt;td&gt;{{ person.sales_rank }}&lt;/td&gt;\n            &lt;td&gt;{{ person.bonus_percentage }}%&lt;/td&gt;\n        &lt;/tr&gt;\n    {% endfor %}\n&lt;/table&gt;</pre>\n    </div>\n</div>\n\n<div class="note">\n    <p><strong>重要ポイント：</strong></p>\n    <ul>\n        <li>Case/When式はデータベースレベルで実行されるため、Pythonコードで条件分岐するよりも効率的です。</li>\n        <li>output_fieldパラメータで、結果の型を指定する必要があります（CharFieldやIntegerFieldなど）。</li>\n        <li>条件が複雑な場合はQオブジェクトを使用して柔軟な条件式を作成できます。</li>\n        <li>When句は上から順に評価されるため、条件の順序が重要です（最初に合致した条件のthen値が採用されます）。</li>\n        <li>defaultを指定しないと、どの条件にも一致しない場合にNoneが返されます。</li>\n    </ul>\n</div>	22
153	2024-06-30 19:27:58	2025-03-23 07:44:29.491395	4	13	データがないときはデフォルト値を代入する	\N	views.py	from django.db.models.functions import Coalesce\\nfrom django.utils import timezone\\n\\nmodel=Sales.objects.annotate(test=Coalesce('date', timezone.now()))\\nprint(model.values('test'))	\N	\N	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>Coalesce関数の基本</h2>\n    <p>Djangoでは、Coalesce関数を使用してフィールドの値がNULLの場合のデフォルト値を設定することができます。基本的な構文は以下の通りです：</p>\n    \n    <div class="code-block">\n        <pre>from django.db.models import Coalesce, Value\n\nCoalesce(データがあるときの値, データがないときの値)</pre>\n    </div>\n    \n    <p>Coalesce関数は最初の引数がNULLでなければその値を、NULLであれば次の引数を返します。これを使って、フィールドにデフォルト値を設定できます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>基本的な使用例</h2>\n    <p>例えば、dateフィールドがない場合に現在の日時をデフォルト値として設定する場合：</p>\n    \n    <div class="code-block">\n        <pre>from django.db.models import Coalesce, Value\nfrom django.utils import timezone\n\n# dateフィールドがあればそれを、なければ現在時刻を使用\nrecords = MyModel.objects.annotate(\n    test=Coalesce('date', Value(timezone.now()))\n)</pre>\n    </div>\n    \n    <p>上の例では、testフィールドに、dateフィールドがあればdateを、なければ今の日時を代入しています。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>様々なデータ型での使用例</h2>\n    <p>Coalesce関数は様々なタイプのデータで使用できます：</p>\n    \n    <div class="code-block">\n        <pre># 数値フィールドのデフォルト値\nproducts = Product.objects.annotate(\n    actual_price=Coalesce('sale_price', 'regular_price')\n)\n\n# 文字列フィールドのデフォルト値\npersons = Person.objects.annotate(\n    display_name=Coalesce('nickname', 'full_name', Value('名称未設定'))\n)\n\n# ブール値フィールドのデフォルト値\nfrom django.db.models import BooleanField\ntasks = Task.objects.annotate(\n    is_important=Coalesce('priority_flag', Value(False), output_field=BooleanField())\n)</pre>\n    </div>\n    \n    <p>Coalesceは2つ以上の引数を取ることができ、最初のNULLでない値を返します。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>関連モデルのフィールドでの使用</h2>\n    <p>関連モデルのフィールドにもCoalesceを適用できます：</p>\n    \n    <div class="code-block">\n        <pre># 所属部署名がない場合に「所属なし」と表示\npersons = Person.objects.annotate(\n    department_name=Coalesce('department__name', Value('所属なし'))\n)\n\n# 最終売上日がない場合に「未売上」と表示\nfrom django.db.models import Max, CharField\npersons = Person.objects.annotate(\n    last_sale_date=Max('sales__date')\n).annotate(\n    last_sale_display=Coalesce(\n        'last_sale_date', \n        Value('未売上'),\n        output_field=CharField()\n    )\n)</pre>\n    </div>\n    \n    <p>異なるデータ型を扱う場合は、output_fieldパラメータで結果の型を指定する必要があります。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>計算フィールドでの使用</h2>\n    <p>計算結果がNULLになる可能性がある場合にデフォルト値を設定：</p>\n    \n    <div class="code-block">\n        <pre>from django.db.models import F, DecimalField\n\n# 割引率がNULLの場合は割引なし（1.0）として計算\nproducts = Product.objects.annotate(\n    discount_factor=Coalesce('discount_rate', Value(1.0)),\n    sale_price=F('regular_price') * F('discount_factor')\n)\n\n# 除算でゼロ除算を防ぐ\nfrom django.db.models import ExpressionWrapper\norders = Order.objects.annotate(\n    safe_denominator=Coalesce('quantity', Value(1)),  # 0や NULL を 1 に置き換え\n    unit_cost=ExpressionWrapper(\n        F('total_cost') / F('safe_denominator'),\n        output_field=DecimalField(max_digits=10, decimal_places=2)\n    )\n)</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">6</span>実践的な使用例</h2>\n    <p>views.pyでのCoalesce関数の使用例：</p>\n    \n    <div class="code-block">\n        <pre>from django.shortcuts import render\nfrom django.db.models import Coalesce, Value, Sum, Count, CharField, F\nfrom .models import Person, Sales\n\ndef sales_dashboard(request):\n    # 売上データがない場合のデフォルト値を設定\n    persons = Person.objects.annotate(\n        # 売上件数（デフォルト0）\n        sales_count=Coalesce(Count('sales'), Value(0)),\n        \n        # 売上合計（デフォルト0）\n        total_sales=Coalesce(Sum('sales__amount'), Value(0)),\n        \n        # 最終売上日（デフォルト「未売上」）\n        last_sale_date=Max('sales__date'),\n        last_sale_display=Coalesce(\n            'last_sale_date', \n            Value('未売上'),\n            output_field=CharField()\n        ),\n        \n        # 平均売上単価（デフォルト0、ゼロ除算回避）\n        safe_count=Coalesce(Count('sales'), Value(1)),  # 0を避けるため最小値1\n        avg_sale=Coalesce(\n            Sum('sales__amount') / F('safe_count'),\n            Value(0)\n        )\n    ).order_by('-total_sales')\n    \n    return render(request, 'persons/dashboard.html', {\n        'persons': persons\n    })</pre>\n    </div>\n    \n    <p>テンプレートでの使用例（dashboard.html）：</p>\n    \n    <div class="code-block">\n        <pre>&lt;h1&gt;営業担当者ダッシュボード&lt;/h1&gt;\n\n&lt;table&gt;\n    &lt;tr&gt;\n        &lt;th&gt;担当者名&lt;/th&gt;\n        &lt;th&gt;売上件数&lt;/th&gt;\n        &lt;th&gt;売上合計&lt;/th&gt;\n        &lt;th&gt;最終売上日&lt;/th&gt;\n        &lt;th&gt;平均売上単価&lt;/th&gt;\n    &lt;/tr&gt;\n    {% for person in persons %}\n        &lt;tr&gt;\n            &lt;td&gt;{{ person.name }}&lt;/td&gt;\n            &lt;td&gt;{{ person.sales_count }}件&lt;/td&gt;\n            &lt;td&gt;{{ person.total_sales|floatformat:0 }}円&lt;/td&gt;\n            &lt;td&gt;{{ person.last_sale_display }}&lt;/td&gt;\n            &lt;td&gt;{{ person.avg_sale|floatformat:0 }}円&lt;/td&gt;\n        &lt;/tr&gt;\n    {% endfor %}\n&lt;/table&gt;</pre>\n    </div>\n</div>\n\n<div class="note">\n    <p><strong>重要ポイント：</strong></p>\n    <ul>\n        <li>Coalesce関数はSQLのCOALESCE関数に相当し、データベースレベルで処理されます。</li>\n        <li>複数の引数を渡すことができ、最初のNULLでない値が返されます。</li>\n        <li>異なるデータ型の値を扱う場合は、output_fieldパラメータで結果の型を指定する必要があります。</li>\n        <li>ゼロ除算や未設定値によるエラーを防ぐためにCoalesceを使用すると、コードの堅牢性が向上します。</li>\n        <li>集計関数（Sum, Count, Max等）と組み合わせることで、データがない場合の適切なデフォルト値を設定できます。</li>\n    </ul>\n</div>	23
154	2024-06-30 19:37:16	2025-03-23 07:45:41.179086	4	13	年、月、日ごとに集計する	\N	views.py	from django.db.models import Sum\\nfrom django.db.models.functions import TruncMonth\\n\\nmonth_sales = Person.objects.annotate(\\n    month=TruncMonth('sales__date')).annotate(total_sales=Sum('sales__sale')\\n).values('month', 'name','total_sales').order_by('month')\\n\\nprint(month_sales)	\N	\N	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>Trunc関数の基本</h2>\n    <p>Djangoでは、Trunc関数を使用して日付時間フィールドを特定の精度（年、月、週、日など）で切り捨てて集計することができます。これにより、時系列データの集計や分析が容易になります。</p>\n    \n    <div class="code-block">\n        <pre>from django.db.models.functions import TruncMonth, TruncYear, TruncWeek, TruncDay, TruncHour</pre>\n    </div>\n    \n    <p>これらの関数は通常、annotateメソッドと一緒に使用されます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>TruncMonthの使用例</h2>\n    <p>TruncMonthを使用すると、日付データを月ごとにまとめることができます：</p>\n    \n    <div class="code-block">\n        <pre>from django.db.models.functions import TruncMonth\nfrom django.db.models import Sum\n\n# 月ごとの売上集計\nmonthly_sales = Person.objects.annotate(\n    month=TruncMonth('sales__date')\n).values('month').annotate(\n    total_sales=Sum('sales__sale')\n).order_by('month')</pre>\n    </div>\n    \n    <p>この例では、annotateでPersonモデルのmonthフィールドにsales__dateを月でまとめたもの(1日から31日までのデータが当月の1日としてまとめられる)を、total_salesには月でまとめたもののsaleの合計が代入されます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>様々な時間単位でのTrunc関数</h2>\n    <p>他の時間単位でも同様にデータをまとめることができます：</p>\n    \n    <div class="code-block">\n        <pre>from django.db.models.functions import TruncYear, TruncWeek, TruncDay, TruncHour\nfrom django.db.models import Sum\n\n# 年ごとの集計\nyearly_sales = Person.objects.annotate(\n    year=TruncYear('sales__date')\n).values('year').annotate(\n    total_sales=Sum('sales__sale')\n).order_by('year')\n\n# 週ごとの集計\nweekly_sales = Person.objects.annotate(\n    week=TruncWeek('sales__date')\n).values('week').annotate(\n    total_sales=Sum('sales__sale')\n).order_by('week')\n\n# 日ごとの集計\ndaily_sales = Person.objects.annotate(\n    day=TruncDay('sales__date')\n).values('day').annotate(\n    total_sales=Sum('sales__sale')\n).order_by('day')\n\n# 時間ごとの集計\nhourly_sales = Person.objects.annotate(\n    hour=TruncHour('sales__date')\n).values('hour').annotate(\n    total_sales=Sum('sales__sale')\n).order_by('hour')</pre>\n    </div>\n    \n    <p>このように、TruncYearにすると年ごと、TruncWeekにすると週ごと、TruncDayにすると日ごと、TruncHourにすると1時間ごとの集計が可能です。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>複数の集計関数との組み合わせ</h2>\n    <p>Trunc関数と複数の集計関数を組み合わせることもできます：</p>\n    \n    <div class="code-block">\n        <pre>from django.db.models.functions import TruncMonth\nfrom django.db.models import Sum, Avg, Count, Max, Min\n\nmonthly_stats = Person.objects.annotate(\n    month=TruncMonth('sales__date')\n).values('month').annotate(\n    total_sales=Sum('sales__sale'),\n    avg_sale=Avg('sales__sale'),\n    sales_count=Count('sales'),\n    max_sale=Max('sales__sale'),\n    min_sale=Min('sales__sale')\n).order_by('month')</pre>\n    </div>\n    \n    <p>この例では、月ごとの売上合計、平均売上、売上件数、最高売上、最低売上を一度に計算しています。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>フィルタリングとの組み合わせ</h2>\n    <p>Trunc関数はフィルタリングと組み合わせることもできます：</p>\n    \n    <div class="code-block">\n        <pre>from django.db.models.functions import TruncMonth\nfrom django.db.models import Sum\nfrom datetime import datetime\n\n# 今年の月別売上\ncurrent_year = datetime.now().year\nmonthly_sales_this_year = Person.objects.annotate(\n    month=TruncMonth('sales__date')\n).values('month').annotate(\n    total_sales=Sum('sales__sale')\n).filter(\n    month__year=current_year\n).order_by('month')\n\n# 特定の担当者の月別売上\nsales_by_person = Person.objects.filter(\n    name='山田太郎'\n).annotate(\n    month=TruncMonth('sales__date')\n).values('month').annotate(\n    total_sales=Sum('sales__sale')\n).order_by('month')</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">6</span>実践的な使用例</h2>\n    <p>views.pyでのTrunc関数の使用例：</p>\n    \n    <div class="code-block">\n        <pre>from django.shortcuts import render\nfrom django.db.models.functions import TruncMonth, TruncYear\nfrom django.db.models import Sum, Count\nfrom .models import Person, Sales\nfrom datetime import datetime\n\ndef sales_report(request):\n    # 期間フィルターの取得（デフォルトは今年）\n    year = request.GET.get('year', datetime.now().year)\n    \n    # 月別売上データ\n    monthly_data = Person.objects.annotate(\n        month=TruncMonth('sales__date')\n    ).values('month').annotate(\n        total_sales=Sum('sales__sale'),\n        sales_count=Count('sales')\n    ).filter(\n        month__year=year\n    ).order_by('month')\n    \n    # 年別売上データ（過去5年分）\n    yearly_data = Person.objects.annotate(\n        year=TruncYear('sales__date')\n    ).values('year').annotate(\n        total_sales=Sum('sales__sale'),\n        sales_count=Count('sales')\n    ).order_by('-year')[:5]\n    \n    # 担当者別・月別の売上データ\n    person_monthly_data = Person.objects.annotate(\n        month=TruncMonth('sales__date')\n    ).values('name', 'month').annotate(\n        total_sales=Sum('sales__sale')\n    ).filter(\n        month__year=year\n    ).order_by('name', 'month')\n    \n    return render(request, 'sales/report.html', {\n        'monthly_data': monthly_data,\n        'yearly_data': yearly_data,\n        'person_monthly_data': person_monthly_data,\n        'selected_year': year\n    })</pre>\n    </div>\n    \n    <p>テンプレートでの使用例（report.html）：</p>\n    \n    <div class="code-block">\n        <pre>&lt;h1&gt;売上レポート（{{ selected_year }}年）&lt;/h1&gt;\n\n&lt;form method="get"&gt;\n    &lt;label for="year"&gt;年を選択：&lt;/label&gt;\n    &lt;select name="year" id="year" onchange="this.form.submit()"&gt;\n        {% for y_data in yearly_data %}\n            &lt;option value="{{ y_data.year|date:'Y' }}" {% if y_data.year|date:'Y' == selected_year %}selected{% endif %}&gt;\n                {{ y_data.year|date:'Y' }}年\n            &lt;/option&gt;\n        {% endfor %}\n    &lt;/select&gt;\n&lt;/form&gt;\n\n&lt;h2&gt;月別売上&lt;/h2&gt;\n&lt;table&gt;\n    &lt;tr&gt;\n        &lt;th&gt;月&lt;/th&gt;\n        &lt;th&gt;売上合計&lt;/th&gt;\n        &lt;th&gt;売上件数&lt;/th&gt;\n    &lt;/tr&gt;\n    {% for data in monthly_data %}\n        &lt;tr&gt;\n            &lt;td&gt;{{ data.month|date:'Y年m月' }}&lt;/td&gt;\n            &lt;td&gt;{{ data.total_sales|floatformat:0 }}円&lt;/td&gt;\n            &lt;td&gt;{{ data.sales_count }}件&lt;/td&gt;\n        &lt;/tr&gt;\n    {% empty %}\n        &lt;tr&gt;\n            &lt;td colspan="3"&gt;データがありません&lt;/td&gt;\n        &lt;/tr&gt;\n    {% endfor %}\n&lt;/table&gt;\n\n&lt;h2&gt;担当者別・月別売上&lt;/h2&gt;\n{% regroup person_monthly_data by name as person_data %}\n{% for person in person_data %}\n    &lt;h3&gt;{{ person.grouper }}&lt;/h3&gt;\n    &lt;table&gt;\n        &lt;tr&gt;\n            &lt;th&gt;月&lt;/th&gt;\n            &lt;th&gt;売上合計&lt;/th&gt;\n        &lt;/tr&gt;\n        {% for data in person.list %}\n            &lt;tr&gt;\n                &lt;td&gt;{{ data.month|date:'Y年m月' }}&lt;/td&gt;\n                &lt;td&gt;{{ data.total_sales|floatformat:0 }}円&lt;/td&gt;\n            &lt;/tr&gt;\n        {% endfor %}\n    &lt;/table&gt;\n{% endfor %}</pre>\n    </div>\n</div>\n\n<div class="note">\n    <p><strong>重要ポイント：</strong></p>\n    <ul>\n        <li>Trunc関数は、時系列データの分析や集計に非常に便利です。</li>\n        <li>使用できる主なTrunc関数には、TruncYear、TruncQuarter、TruncMonth、TruncWeek、TruncDay、TruncHour、TruncMinute、TruncSecondがあります。</li>\n        <li>values()メソッドと組み合わせることで、グループ化した集計が可能になります。</li>\n        <li>DateField、DateTimeFieldの両方に対して使用できますが、時間単位の関数（TruncHourなど）はDateTimeFieldにのみ使用できます。</li>\n        <li>集計結果は、データベースのタイムゾーン設定に依存します。Djangoの設定（TIME_ZONE）と一致するように注意してください。</li>\n    </ul>\n</div>	24
159	2024-07-01 06:16:45	2024-07-01 06:27:57	1	3	繰り返し処理(for文)	\N	Javascript	for(let i=0; i<=10; i++){\\n    console.log(i);\\n}	\N	\N	\N	\N	for文は、繰り返し処理に使用される文となっています。<br>for文は、<br><div class="code-block">for(変数の定義; 条件; 処理が1回完了するごとの値の変化){<br>   繰り返しを行う処理<br>}</div><br>の形式で記入します。<br><br>for文は他の配列やオブジェクトに対しても繰り返し処理を行うことができ、<br><div class="code-block">let obj = {a: 1, b:2};<br>for(let i in obj){<br>    console.log(i);<br>    console.log(obj[i])<br>}</div><br>のように記入すると、objのキーの値がiに代入されます。<br>配列に対してfor文を行った場合は繰り返し時に値が直接代入されます。<br>	17
160	2024-07-03 19:29:01	2025-03-22 19:56:42.556401	4	6	Laravel基本構造	\N	\N	\N	\N	\N	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>Laravelの概要</h2>\n    <p>LaravelはPHPのフレームワークで、サーバーサイドで使用されています。</p>\n    <p>MVCアーキテクチャに基づいた構造を持ち、効率的なウェブアプリケーション開発をサポートします。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>主要フォルダとファイル</h2>\n    <p>Laravelをインストールすると様々なフォルダが作成されますが、よく使用するフォルダ、ファイルは以下のものとなります。</p>\n    \n    <h3>.env</h3>\n    <p>アプリケーションの基本的な設定を行うファイル</p>\n    <div class="note">\n        <p>データベース接続情報、アプリケーション名、デバッグモードなどの環境変数を設定します。</p>\n        <p>このファイルはGitなどのバージョン管理には含めません。</p>\n    </div>\n    \n    <h3>routes/web.php</h3>\n    <p>ルーティング(アクセスされたURLによっての使用するクラス、メソッドの選択)を行うファイル</p>\n    <div class="note">\n        <p>Webブラウザからアクセスされるルートを定義します。</p>\n        <p>例: <code>Route::get('/home', [HomeController::class, 'index']);</code></p>\n    </div>\n    \n    <h3>app/Http/Controllers</h3>\n    <p>ルーティングで使用するファイルが入るフォルダ</p>\n    <div class="note">\n        <p>ユーザーからのリクエストを処理し、レスポンスを返すコントローラークラスを格納します。</p>\n        <p>MVCアーキテクチャのC（Controller）に該当します。</p>\n    </div>\n    \n    <h3>app/Providers</h3>\n    <p>すべてのページに共通する処理などを記入するファイルが入るフォルダ</p>\n    <div class="note">\n        <p>サービスプロバイダは、アプリケーションの起動時に実行される処理を定義します。</p>\n        <p>データベース接続、キャッシュ、認証など様々なサービスを初期化します。</p>\n    </div>\n    \n    <h3>app/Models</h3>\n    <p>モデル(データベースのテーブル)のバリデーションやORMでの紐づきなどを記入したファイルが入るフォルダ</p>\n    <div class="note">\n        <p>データベースのテーブルとPHPオブジェクトをマッピングします。</p>\n        <p>MVCアーキテクチャのM（Model）に該当します。</p>\n        <p>例: <code>User.php</code>, <code>Product.php</code>など</p>\n    </div>\n    \n    <h3>database/migrations</h3>\n    <p>モデルの作成などに使用し、フォルダ内にはモデルの作成、変更履歴のファイルが入るフォルダ</p>\n    <div class="note">\n        <p>データベースのスキーマをバージョン管理できるようにします。</p>\n        <p>テーブルの作成、変更、削除などの操作をPHPで定義できます。</p>\n        <p>コマンド例: <code>php artisan migrate</code></p>\n    </div>\n    \n    <h3>resources/views</h3>\n    <p>画面に表示するためのテンプレートとなるファイルを入れるフォルダ</p>\n    <div class="note">\n        <p>MVCアーキテクチャのV（View）に該当します。</p>\n        <p>Bladeテンプレートエンジンを使用したファイル（.blade.php）を格納します。</p>\n        <p>例: <code>welcome.blade.php</code>, <code>dashboard.blade.php</code>など</p>\n    </div>\n    \n    <h3>public</h3>\n    <p>テンプレートで使用したいファイルを入れるフォルダ</p>\n    <div class="note">\n        <p>CSS、JavaScript、画像などの静的ファイルを格納します。</p>\n        <p>Webサーバーのドキュメントルートとして設定される唯一のフォルダです。</p>\n        <p>アプリケーションのエントリーポイント（index.php）もここにあります。</p>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>その他の重要なフォルダとファイル</h2>\n    \n    <table>\n        <tr>\n            <th>フォルダ/ファイル</th>\n            <th>説明</th>\n        </tr>\n        <tr>\n            <td>routes/api.php</td>\n            <td>APIルートを定義するファイル</td>\n        </tr>\n        <tr>\n            <td>app/Http/Middleware</td>\n            <td>リクエスト処理の前後に実行される処理を定義するフォルダ</td>\n        </tr>\n        <tr>\n            <td>config/</td>\n            <td>アプリケーションの設定ファイルを格納するフォルダ</td>\n        </tr>\n        <tr>\n            <td>database/seeders</td>\n            <td>初期データを設定するファイルを格納するフォルダ</td>\n        </tr>\n        <tr>\n            <td>resources/js</td>\n            <td>JavaScriptのソースファイルを格納するフォルダ</td>\n        </tr>\n        <tr>\n            <td>resources/css</td>\n            <td>CSSのソースファイルを格納するフォルダ</td>\n        </tr>\n        <tr>\n            <td>storage/</td>\n            <td>アプリケーションが生成するファイルを格納するフォルダ</td>\n        </tr>\n        <tr>\n            <td>tests/</td>\n            <td>テストコードを格納するフォルダ</td>\n        </tr>\n    </table>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>MVC構造の流れ</h2>\n    \n    <div class="flow">\n        <div class="flow-item">\n            <h3>1. リクエスト</h3>\n            <p>ユーザーがブラウザからURLにアクセスします。</p>\n        </div>\n        \n        <div class="flow-item">\n            <h3>2. ルーティング（routes/web.php）</h3>\n            <p>URLに対応するコントローラーとアクションを特定します。</p>\n        </div>\n        \n        <div class="flow-item">\n            <h3>3. コントローラー（app/Http/Controllers）</h3>\n            <p>必要なデータをモデルから取得し、ビューに渡します。</p>\n        </div>\n        \n        <div class="flow-item">\n            <h3>4. モデル（app/Models）</h3>\n            <p>データベースとのやり取りを行い、データを取得・保存します。</p>\n        </div>\n        \n        <div class="flow-item">\n            <h3>5. ビュー（resources/views）</h3>\n            <p>コントローラーから受け取ったデータを使ってHTMLを生成します。</p>\n        </div>\n        \n        <div class="flow-item">\n            <h3>6. レスポンス</h3>\n            <p>ビューが生成したHTMLをユーザーのブラウザに返します。</p>\n        </div>\n    </div>\n</div>	2
161	2024-07-03 19:59:33	2025-03-22 20:00:46.657637	4	6	web.php	\N	\N	\N	\N	\N	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>web.phpの役割</h2>\n    <p>routes/web.phpは、ルーティング(アクセスされたページに対してどのクラス、メソッドを使用するのか)を設定するファイルとなっています。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>コントローラーの読み込み</h2>\n    <p>まずファイルの先頭で以下の形式で使用するコントローラーを読み込みます：</p>\n    \n    <div class="code-block">use App\\Http\\Controllers\\使用するコントローラーのクラス</div>\n    \n    <p>例：</p>\n    <div class="code-block">use App\\Http\\Controllers\\TestController;<br>use App\\Http\\Controllers\\UserController;</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>基本的なルーティング</h2>\n    <p>特にデータベースからデータを取得する必要がないときなどは、以下のように記入します：</p>\n    \n    <div class="code-block">Route::get('/アクセスされるURL', function(){ return view('使用するテンプレート'); })->name('テンプレートから呼び出すときの名前');</div>\n    \n    <p>nameは一意にする必要があるのでアプリケーション内で重複がないようにしてください。</p>\n    \n    <p>例えば、以下のように記述すると：</p>\n    <div class="code-block">Route::get('/test', function(){ return view('test_template'); })->name('test_name');</div>\n    \n    <p>ルート/testにアクセスするとresources/views/test_template.blade.phpが開かれます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>コントローラーを使用したルーティング</h2>\n    <p>テンプレートでデータベースからの値を取得するなど、何かしらの処理をする必要があるときは、コントローラーを使用します：</p>\n    \n    <div class="code-block">Route::get('/アクセスされるURL', [使用するクラス::class, '使用するメソッド'])->name('テンプレートから呼び出すときの名前');</div>\n    \n    <p>例えば、以下のように記述すると：</p>\n    <div class="code-block">Route::get('/test', [TestController::class, 'get'])->name('test.get');</div>\n    \n    <p>ルート/testにアクセスするとapp/Http/Controllers/TestController.phpのTestControllerクラスのgetメソッドが使用されます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>URLパラメータの受け取り</h2>\n    <p>アクセスされたURLのデータを使用されるクラスに変数として渡すこともできます：</p>\n    \n    <div class="code-block">Route::get('/test/{test_data}', [TestController::class, 'get'])->name('test.get');</div>\n    \n    <p>このように記述すると、ルート/test/test_valueにアクセスすると、TestControllerのgetメソッドでは変数test_dataとしてtest_valueの値を使用することができます。</p>\n    \n    <div class="code-block">// TestController.php<br><br>public function get($test_data)<br>{<br>    // $test_dataを使った処理<br>    return view('test', ['data' => $test_data]);<br>}</div>\n    \n    <p>複数のパラメータを受け取ることも可能です：</p>\n    <div class="code-block">Route::get('/users/{id}/posts/{post_id}', [UserController::class, 'showPost'])->name('users.posts.show');</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">6</span>HTTPリクエストメソッドの指定</h2>\n    <p>HTTPリクエストメソッド(getやpost)によって使用するクラスを変更することもできます。その時は以下のように記述します：</p>\n    \n    <div class="code-block">Route::get(...); // GETリクエスト<br>Route::post(...); // POSTリクエスト<br>Route::put(...); // PUTリクエスト<br>Route::delete(...); // DELETEリクエスト<br>Route::patch(...); // PATCHリクエスト</div>\n    \n    <p>例：</p>\n    <div class="code-block">Route::post('/test', [TestController::class, 'post'])->name('test.post');</div>\n    \n    <p>このように記入すると、ルート/testにpostメソッドでアクセスするとapp/Http/Controllers/TestController.phpのTestControllerクラスのpostメソッドが使用されます。</p>\n    \n    <p>同じURLで複数のHTTPメソッドを扱う例：</p>\n    <div class="code-block">// フォーム表示（GET）<br>Route::get('/contact', [ContactController::class, 'showForm'])->name('contact.form');<br><br>// フォーム送信処理（POST）<br>Route::post('/contact', [ContactController::class, 'submitForm'])->name('contact.submit');</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">7</span>名前付きルートの使用方法</h2>\n    <p>テンプレート側でnameを使用して呼び出すときは以下の形式で記入してください：</p>\n    \n    <div class="code-block">&lt;a href="{{ route('呼び出したいURLのname') }}"&gt;テキスト&lt;/a&gt;</div>\n    \n    <p>例：</p>\n    <div class="code-block">&lt;a href="{{ route('test.get') }}"&gt;テストページへ&lt;/a&gt;</div>\n    \n    <p>パラメータがあるルートの場合：</p>\n    <div class="code-block">&lt;a href="{{ route('test.get', ['test_data' => 'value']) }}"&gt;テストページへ&lt;/a&gt;</div>\n    \n    <p>複数のパラメータがある場合：</p>\n    <div class="code-block">&lt;a href="{{ route('users.posts.show', ['id' => 1, 'post_id' => 5]) }}"&gt;記事を見る&lt;/a&gt;</div>\n    \n    <div class="note">\n        <p><strong>重要：</strong> 名前付きルートを使用すると、URLが変更された場合でもテンプレート内のリンクを修正する必要がなくなります。</p>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">8</span>ルートグループ</h2>\n    <p>関連するルートをグループ化して、共通の属性を適用することができます：</p>\n    \n    <div class="code-block">// プレフィックスを共有するグループ<br>Route::prefix('admin')->group(function () {<br>    Route::get('/dashboard', [AdminController::class, 'dashboard'])->name('admin.dashboard');<br>    Route::get('/users', [AdminController::class, 'users'])->name('admin.users');<br>});<br><br>// ミドルウェアを共有するグループ<br>Route::middleware(['auth'])->group(function () {<br>    Route::get('/profile', [ProfileController::class, 'show'])->name('profile.show');<br>    Route::put('/profile', [ProfileController::class, 'update'])->name('profile.update');<br>});</div>\n</div>	4
162	2024-07-04 08:17:04	2025-03-22 20:04:21.236127	4	6	コントローラー	\N	\N	\N	\N	\N	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>コントローラーの役割</h2>\n    <p>コントローラーは、web.phpでアクセスされたURLごとに振り分けを行い、それに対して処理を行う部分となっています。</p>\n    <p>ルーティングからのリクエストを受け取り、モデルと連携してデータを取得・処理し、最終的にビュー（テンプレート）にデータを渡す役割を持ちます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>コントローラーの作成</h2>\n    <p>コントローラーは、コマンドプロンプトでアプリケーションのルートディレクトリに移動し、以下のコマンドで作成できます：</p>\n    \n    <div class="code-block">php artisan make:controller コントローラーのクラス名</div>\n    \n    <p>このコマンドを実行すると、app/Http/Controllersフォルダに記入したクラス名.phpファイルが作成されます。</p>\n    \n    <p>また、app/Http/Controllersの中でさらにフォルダを指定したい場合はコントローラーのクラス名の部分をフォルダ名/クラス名の形式にします：</p>\n    \n    <div class="code-block">php artisan make:controller Admin/UserController</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>コントローラーの基本構造</h2>\n    <p>コントローラーは以下の形式で記述します：</p>\n    \n    <div class="code-block">namespace App\\Http\\Controllers;<br><br>use Illuminate\\Http\\Request;<br><br>class コントローラーのクラス名 extends Controller<br>{<br>    public function メソッド名(Request $request){<br>        行う処理<br>    }<br>}</div>\n    \n    <p>例えば、TestControllerを作成した場合：</p>\n    \n    <div class="code-block">namespace App\\Http\\Controllers;<br><br>use Illuminate\\Http\\Request;<br><br>class TestController extends Controller<br>{<br>    public function get()<br>    {<br>        $data = [<br>            'data1' => 'test',<br>            'data2' => 'test2',<br>        ];<br>        return view('test', compact('data'));<br>    }<br>}</div>\n    \n    <p>この例では、getメソッドはtest.blade.phpに変数dataを渡します。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>テンプレートとデータの連携</h2>\n    <p>コントローラーからテンプレートにデータを渡す方法はいくつかあります：</p>\n    \n    <div class="code-block">// 方法1: viewの第2引数に配列で渡す<br>return view('test', ['data' => $data]);<br><br>// 方法2: compact関数を使用<br>return view('test', compact('data'));<br><br>// 方法3: withメソッドを使用<br>return view('test')->with('data', $data);</div>\n    \n    <p>テンプレートのファイル名指定について：</p>\n    <ul>\n        <li>テンプレートの指定はファイル名から拡張子を外したものにしてください（例：test.blade.php → test）</li>\n        <li>テンプレートファイルがviewsフォルダの中にさらにフォルダがあり、その中に配置されている場合は、フォルダ名.ファイル名の形式にしてください（例：admin/dashboard.blade.php → admin.dashboard）</li>\n    </ul>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>テンプレート側でのデータ利用</h2>\n    <p>テンプレート側では、渡された変数を以下のように利用できます：</p>\n    \n    <div class="code-block"><!-- 配列の特定の値を表示 --><br>{{ $data['data1'] }}<br><br><!-- オブジェクトのプロパティを表示 --><br>{{ $user->name }}</div>\n    \n    <p>また、テンプレート側でリスト形式などで受け取っている場合は繰り返し処理を行うことができます：</p>\n    \n    <div class="code-block">@foreach($data as $value)<br>    &lt;div>{{ $value }}&lt;/div><br>@endforeach</div>\n    \n    <p>上の例では変数$dataを$valueに代入して繰り返し処理を行っています。</p>\n    \n    <div class="code-block"><!-- 連想配列の場合はキーも取得可能 --><br>@foreach($data as $key => $value)<br>    &lt;div>{{ $key }}: {{ $value }}&lt;/div><br>@endforeach</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">6</span>リクエストデータの取得</h2>\n    <p>コントローラーのメソッドで、フォームから送信されたデータなどを取得する方法：</p>\n    \n    <div class="code-block">public function store(Request $request)<br>{<br>    // GET/POSTパラメータの取得<br>    $name = $request->input('name');<br>    <br>    // 特定のメソッド（GET/POST）のみからデータを取得<br>    $email = $request->post('email');<br>    <br>    // 直接プロパティとしてアクセス<br>    $age = $request->age;<br>    <br>    // 全てのデータを取得<br>    $allData = $request->all();<br>    <br>    // 特定のデータだけを取得<br>    $selectedData = $request->only(['name', 'email']);<br>    <br>    // 戻り値（例：処理後のリダイレクト）<br>    return redirect()->route('home')->with('success', '保存しました');<br>}</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">7</span>URLパラメータの取得</h2>\n    <p>ルートで定義したURLパラメータをコントローラーで受け取る方法：</p>\n    \n    <div class="code-block">// routes/web.php<br>Route::get('/users/{id}', [UserController::class, 'show'])->name('users.show');<br><br>// UserController.php<br>public function show($id)<br>{<br>    // $idにURLパラメータの値が入る<br>    $user = User::find($id);<br>    return view('users.show', compact('user'));<br>}</div>\n    \n    <p>複数のパラメータを受け取る例：</p>\n    \n    <div class="code-block">// routes/web.php<br>Route::get('/posts/{category}/{id}', [PostController::class, 'show']);<br><br>// PostController.php<br>public function show($category, $id)<br>{<br>    // $categoryと$idにそれぞれのパラメータが入る<br>    return view('posts.show', compact('category', 'id'));<br>}</div>\n</div>	5
163	2024-07-04 13:36:45	2025-03-22 20:06:20.450298	4	6	テーブルの作成、編集	\N	\N	\N	\N	\N	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>モデルとマイグレーションの作成</h2>\n    <p>データベースに新たにテーブルを作成したり、編集したりするときは、コマンドプロンプトでアプリケーションのルートディレクトリに移動し、以下のコマンドを実行します：</p>\n    \n    <div class="code-block">php artisan make:model 作成するテーブル名 -m</div>\n    \n    <p>このコマンドを実行すると、以下のファイルが作成されます：</p>\n    <ul>\n        <li>app/Models内に作成したテーブル名のモデルファイル</li>\n        <li>database/migrationsフォルダの中にマイグレーションファイル</li>\n    </ul>\n    \n    <p>例：テーブル名が「Employee」の場合</p>\n    <div class="code-block">php artisan make:model Employee -m</div>\n    \n    <div class="note">\n        <p><strong>注意：</strong> モデル名は単数形（Employee）、テーブル名は複数形（employees）になります。Laravelの命名規則に従います。</p>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>マイグレーションファイルの構造</h2>\n    <p>database/migrationsフォルダの中に作成されたファイルはテーブルの列を定義したりするのに使用します。</p>\n    <p>マイグレーションファイルには主に2つのメソッドがあります：</p>\n    <ul>\n        <li><strong>upメソッド：</strong> テーブルの作成、または列を増やす操作を定義</li>\n        <li><strong>downメソッド：</strong> テーブル削除時の操作を定義（upの逆の操作）</li>\n    </ul>\n    \n    <div class="code-block">return new class extends Migration<br>{<br>    public function up(): void<br>    {<br>        Schema::create('employees', function (Blueprint $table) {<br>            $table->id();<br>            $table->string('name');<br>            $table->text('address');<br>            $table->string('phone');<br>            $table->date('birth_date');<br>            $table->foreignId('department_id')->nullable()->constrained('departments')->onDelete('set null');<br>            $table->timestamps();<br>        });<br>    }<br><br>    public function down(): void<br>    {<br>        Schema::dropIfExists('employees');<br>    }<br>};</div>\n    \n    <p>このように記入すると、Employeeテーブルには以下の列が作成されます：</p>\n    <ul>\n        <li>重複のないid（主キー）</li>\n        <li>文字列のname</li>\n        <li>テキスト形式のaddress</li>\n        <li>文字列のphone</li>\n        <li>日付形式のbirth_date</li>\n        <li>外部参照のdepartment_id</li>\n        <li>作成日時（created_at）と更新日時（updated_at）</li>\n    </ul>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>外部キーとリレーションシップ</h2>\n    <p>外部参照（外部キー）とは、別のテーブルのidを使用してそのテーブルのデータを取得できるようにするための紐づけのことを言います。</p>\n    \n    <div class="code-block">$table->foreignId('department_id')->nullable()->constrained('departments')->onDelete('set null');</div>\n    \n    <p>この例では、「employees」テーブルの「department_id」列が「departments」テーブルの「id」列を参照しています。</p>\n    \n    <p>onDeleteオプションは、参照先のレコードが削除されたときの動作を定義します：</p>\n    <ul>\n        <li><strong>onDelete('set null')：</strong> department削除時に参照しているemployeeのdepartment_idはnullに書き換わります。</li>\n        <li><strong>onDelete('cascade')：</strong> department削除時に参照しているemployeeはすべて削除されます。</li>\n        <li><strong>onDelete('restrict')：</strong> 参照しているemployeeが存在する場合、departmentの削除を禁止します。</li>\n    </ul>\n    \n    <p>この例のDepartment(部署)とEmployee(社員)の関係は「1対多」の関係となっています。つまり、1つの部署に複数の社員が所属できます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>主なカラム定義メソッド</h2>\n    <table>\n        <tr>\n            <th>メソッド</th>\n            <th>説明</th>\n        </tr>\n        <tr>\n            <td>$table->id()</td>\n            <td>自動採番の主キー(bigint)</td>\n        </tr>\n        <tr>\n            <td>$table->string('name', 100)</td>\n            <td>文字列（第2引数で長さ指定可）</td>\n        </tr>\n        <tr>\n            <td>$table->text('description')</td>\n            <td>長文テキスト</td>\n        </tr>\n        <tr>\n            <td>$table->integer('count')</td>\n            <td>整数</td>\n        </tr>\n        <tr>\n            <td>$table->decimal('price', 8, 2)</td>\n            <td>小数（全体桁数, 小数点以下桁数）</td>\n        </tr>\n        <tr>\n            <td>$table->boolean('is_active')</td>\n            <td>真偽値</td>\n        </tr>\n        <tr>\n            <td>$table->date('birth_date')</td>\n            <td>日付</td>\n        </tr>\n        <tr>\n            <td>$table->dateTime('published_at')</td>\n            <td>日時</td>\n        </tr>\n        <tr>\n            <td>$table->timestamps()</td>\n            <td>created_atとupdated_at列を追加</td>\n        </tr>\n        <tr>\n            <td>$table->softDeletes()</td>\n            <td>ソフトデリート用のdeleted_at列を追加</td>\n        </tr>\n    </table>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>カラム修飾子</h2>\n    <p>カラム定義に追加できる修飾子には以下のようなものがあります：</p>\n    \n    <div class="code-block">$table->string('name')->nullable(); // NULL値を許可<br>$table->string('email')->unique(); // 一意性制約<br>$table->integer('price')->default(0); // デフォルト値<br>$table->timestamp('published_at')->useCurrent(); // 現在時刻をデフォルト値に<br>$table->string('status')->index(); // インデックスを作成</div>\n    \n    <p>複数の修飾子を組み合わせることも可能です：</p>\n    <div class="code-block">$table->string('email')->nullable()->unique();</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">6</span>マイグレーションの実行</h2>\n    <p>マイグレーションファイルを作成した後、以下のコマンドを実行してデータベースに反映します：</p>\n    \n    <div class="code-block">php artisan migrate</div>\n    \n    <p>特定のマイグレーションだけを実行するには：</p>\n    <div class="code-block">php artisan migrate --path=/database/migrations/xxxx_xx_xx_xxxxxx_create_employees_table.php</div>\n    \n    <p>マイグレーションをロールバック（直前の操作を取り消す）するには：</p>\n    <div class="code-block">php artisan migrate:rollback</div>\n    \n    <p>データベースをリセットして全てのマイグレーションを再実行するには：</p>\n    <div class="code-block">php artisan migrate:fresh</div>\n    \n    <div class="note">\n        <p><strong>注意：</strong> <code>migrate:fresh</code>はデータベースの全テーブルを削除します。本番環境では使用しないでください。</p>\n    </div>\n</div>	6
164	2024-07-04 18:58:24	2025-03-22 20:07:46.222803	4	6	ORMでのリレーションを設定する	\N	\N	\N	\N	\N	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>EloquentとORMの概要</h2>\n    <p>ORMで作成したテーブルと紐づいたテーブルのデータを取得するようにするためには、app/Modelsフォルダにある対象のモデル名のファイルで設定する必要があります。</p>\n    \n    <p>対象のモデル名のファイルがない場合は、コマンドプロンプトでアプリケーションのルートに移動して以下のコマンドを実行します：</p>\n    \n    <div class="code-block">php artisan make:model テーブル名</div>\n    \n    <div class="note">\n        <p><strong>注意：</strong> モデル名は単数形（例：Department, Employee）で、対応するテーブル名は複数形（例：departments, employees）となるのがLaravelの命名規則です。</p>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>一対多（1:n）のリレーション設定</h2>\n    <p>下の例ではDepartment(部署)1に対してEmployee(社員)多の1対多でのリレーションで設定していきます。</p>\n    \n    <h3>1側のモデル（Department）</h3>\n    <p>まず紐づけるテーブル名のメソッドを作成し、Department側では以下のようになるようにします：</p>\n    \n    <div class="code-block">namespace App\\Models;<br><br>use Illuminate\\Database\\Eloquent\\Factories\\HasFactory;<br>use Illuminate\\Database\\Eloquent\\Model;<br><br>class Department extends Model<br>{<br>    use HasFactory;<br><br>    public function employees(){<br>        return $this->hasMany(Employee::class);<br>    }<br>}</div>\n    \n    <p>$this->hasMany(Employee::class)の部分で「自クラス（Department）1に対してEmployeeが多側である」という設定をしています。</p>\n    \n    <div class="note">\n        <p><strong>重要：</strong> 多数のレコードを取得するメソッド名は複数形（employees）にするのが慣例です。</p>\n    </div>\n    \n    <h3>多側のモデル（Employee）</h3>\n    <p>Employee側では、以下のようにbelongsToリレーションを定義します：</p>\n    \n    <div class="code-block">namespace App\\Models;<br><br>use Illuminate\\Database\\Eloquent\\Factories\\HasFactory;<br>use Illuminate\\Database\\Eloquent\\Model;<br><br>class Employee extends Model<br>{<br>    use HasFactory;<br><br>    public function department(){<br>        return $this->belongsTo(Department::class);<br>    }<br>}</div>\n    \n    <p>$this->belongsTo(Department::class)の部分で「自クラス（Employee）多に対して1のDepartmentがある」という設定をしています。</p>\n    \n    <div class="note">\n        <p><strong>注意：</strong> 単一のレコードを取得するメソッド名は単数形（department）にするのが慣例です。</p>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>リレーションの使用例</h2>\n    <p>モデルでリレーションを設定した後は、以下のように簡単にデータを取得できます：</p>\n    \n    <h3>1側から多側を取得する（Department -> Employees）</h3>\n    <div class="code-block">// 部署IDが1の全従業員を取得<br>$department = Department::find(1);<br>$employees = $department->employees; // 関連する全従業員のコレクション<br><br>// 従業員を一覧表示<br>foreach ($employees as $employee) {<br>    echo $employee->name;<br>}</div>\n    \n    <h3>多側から1側を取得する（Employee -> Department）</h3>\n    <div class="code-block">// 従業員IDが5の従業員の部署を取得<br>$employee = Employee::find(5);<br>$department = $employee->department; // 所属部署<br><br>// 部署名を表示<br>echo $department->name;</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>Eagerロード（N+1問題の解決）</h2>\n    <p>リレーションを扱う際には、N+1問題を回避するためにEagerロードを使用することが推奨されます：</p>\n    \n    <div class="code-block">// N+1問題が発生するコード<br>$departments = Department::all();<br>foreach ($departments as $department) {<br>    // 各部署ごとに別のクエリが発行される<br>    $employees = $department->employees;<br>}<br><br>// Eagerロードを使用して効率化<br>$departments = Department::with('employees')->get();<br>foreach ($departments as $department) {<br>    // 追加のクエリは発行されない<br>    $employees = $department->employees;<br>}</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>その他の主なリレーションタイプ</h2>\n    <p>Laravelでは、様々な種類のリレーションが利用可能です：</p>\n    \n    <h3>一対一（1:1）のリレーション</h3>\n    <div class="code-block">// User.php<br>public function profile()<br>{<br>    return $this->hasOne(Profile::class);<br>}<br><br>// Profile.php<br>public function user()<br>{<br>    return $this->belongsTo(User::class);<br>}</div>\n    \n    <h3>多対多（n:m）のリレーション</h3>\n    <div class="code-block">// User.php<br>public function roles()<br>{<br>    return $this->belongsToMany(Role::class);<br>}<br><br>// Role.php<br>public function users()<br>{<br>    return $this->belongsToMany(User::class);<br>}</div>\n    \n    <h3>ポリモーフィックリレーション</h3>\n    <div class="code-block">// Post.php, Video.php などで<br>public function comments()<br>{<br>    return $this->morphMany(Comment::class, 'commentable');<br>}<br><br>// Comment.php<br>public function commentable()<br>{<br>    return $this->morphTo();<br>}</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">6</span>リレーション使用時の条件付け</h2>\n    <p>リレーションに条件を追加することも可能です：</p>\n    \n    <div class="code-block">// 特定条件に一致する従業員のみを取得<br>public function activeEmployees()<br>{<br>    return $this->hasMany(Employee::class)->where('status', 'active');<br>}<br><br>// リレーションの実行時に動的に条件付け<br>$department->employees()->where('hired_at', '>=', '2023-01-01')->get();</div>\n    \n    <p>リレーションを使った新規レコードの作成も簡単です：</p>\n    \n    <div class="code-block">// 部署に新しい従業員を追加<br>$employee = new Employee(['name' => '山田太郎', 'email' => 'yamada@example.com']);<br>$department->employees()->save($employee);<br><br>// 一度に複数の従業員を追加<br>$department->employees()->createMany([<br>    ['name' => '佐藤次郎', 'email' => 'sato@example.com'],<br>    ['name' => '鈴木花子', 'email' => 'suzuki@example.com']<br>]);</div>\n</div>	7
167	2024-07-11 12:24:32	2024-07-11 12:29:48	1	3	アロー関数	\N	Javascript	const test = (value, value2) => value + value2;\\n\\nlet return_value = test(1,2);\\nconsole.log(return_value)	\N	\N	\N	\N	上の例のように記入することで、定数testは<br><div class="code-block">function test(value, value2){<br>    return value + value2;<br>}</div><br><br>と同じ内容となります。<br>returnを記入せず、=&gt;の後ろ側がそのまま戻り値となるため、簡単な関数はアロー関数を使用することで短く書くことができます。	18
168	2024-07-11 12:44:38	2024-07-11 12:50:19	1	3	配列を複数の変数に分割する	\N	Javascript	const testArray = [1, 2, 3, 4];\\nconst [test, test2, ...test3] = testArray;\\n\\nconsole.log(test, test2, test3);	\N	\N	\N	\N	Javascriptでは配列の要素を複数の変数に分割することが可能となっており、上はその例となっています。<br>test、test2には、testArrayの前から2つの値が代入されています。<br><br>最後のtest3は...test3とすることで、残りの要素を全て配列形式で代入しています。	19
169	2024-07-11 12:53:42	2024-07-11 12:58:32	1	3	オブジェクトを複数の変数に分割する	\N	Javascript	const dict = {\\n    name: 'tarou',\\n    age: '20',\\n    adress: 'test@gmail.com',\\n};\\n\\nconst {name, ...other} = dict;\\nconsole.log(name, other);	\N	\N	\N	\N	オブジェクトも配列と同様に、複数の変数に分割をすることができます。<br><br>配列と同様に、最後の代入する変数の前に...を付けることで残りのすべての要素を代入することができます。<br>...で代入した変数にはオブジェクト形式で代入されます。	20
170	2024-07-11 13:07:52	2024-07-11 13:19:21	1	3	引数を配列として扱う	\N	Javascript	function test(...array){\\n    let sum = 0;\\n    for(let val of array){\\n        sum += val;\\n    }\\n    console.log(sum)\\n}\\n\\ntest(1, 2, 3)	\N	\N	\N	\N	上の例のように関数の引数名の前に、...を付けることで、複数ある引数を一つの配列として受け取ることができます。<br><br>上の例では、引数として1, 2, 3を渡しているため、関数内のarrayは[1, 2, 3]となります。<br><br>また、普通の引数との併用も可能となっており、<br><div class="code-block">function test(val, ...array){<br>    let sum = 0;<br>    for(let val of array){<br>        sum += val;<br>    }<br>    console.log(sum)<br>}<br><br>test(1, 2, 3)</div><br>とすると、valには最初の引数1が代入され、arrayには残りの要素が代入されるので[2, 3]が代入されます。<br><br>このように配列として扱う引数のことを可変長引数といいます。	21
171	2024-07-11 13:16:13	2024-07-11 13:23:02	1	3	配列をばらけさせて引数として使用する	\N	Javascript	const testArray = [1, 2, 3];\\n\\nfunction testFunc(val, val2, val3){\\n    console.log(val, val2, val3);\\n}\\n\\ntestFunc(...testArray);	\N	\N	\N	\N	関数呼び出し時に、配列を代入した変数の前に...を付けることで、配列を分解して引数に代入することができます。<br><br>上の例では、引数valには1、val2には2、val3には3が代入されています。<br><br>このような記入方法をスプレッド構文と呼びます。	22
165	2024-07-05 06:24:08	2025-03-22 19:22:57.550955	4	14	モーダルの表示	\N	HTML	<!DOCTYPE html>\\n<html lang="ja">\\n    <head>\\n        <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css" integrity="sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO" crossorigin="anonymous">\\n        <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.4.2/css/all.css" integrity="sha384-/rXc/GQVaYpyDdyxK+ecHPVYJSN9bmVFBvjA/9eOB+pb3F2w2N6fc5qB9Ew5yIns" crossorigin="anonymous">\\n    </head>\\n    </head>\\n\\n    <body>\\n        <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#testModal">モーダル表示</button>\\n\\n        <div class="modal fade" id="testModal" tabindex="-1" role="dialog" aria-labelledby="testModalLabel" aria-hidden="true">\\n            <div class="modal-dialog" role="document">\\n                <div class="modal-content">\\n                    <div class="modal-header">\\n                        <h5 class="modal-title" id="testModalLabel">タイトル</h5>\\n                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">\\n                            <span aria-hidden="true">×</span>\\n                        </button>\\n                    </div>\\n                    <div class="modal-body">\\n                        <form id="testForm">\\n                            <label for="testName">氏名</label>\\n                            <input type="text" class="form-control" id="testName" name="name" required>\\n                        </form>\\n                    </div>\\n\\n                    <div class="modal-footer">\\n                        <button type="submit" class="btn btn-primary">登録</button>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n        <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>\\n        <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js" integrity="sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49" crossorigin="anonymous"></script>\\n        <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js" integrity="sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy" crossorigin="anonymous"></script>\\n    </body>\\n</html>	\N	\N	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>モーダルの基本構造</h2>\n    <p>Bootstrapを使うと、簡単にモーダル（画面上にもう一つウィンドウを表示させる機能）を実装できます。モーダルは以下の要素から構成されています：</p>\nコピー<ul>\n    <li><strong>トリガー要素（ボタン）</strong>：モーダルを表示させるボタンやリンク</li>\n    <li><strong>モーダル本体</strong>：表示されるポップアップウィンドウの内容</li>\n</ul>\n\n<p>ボタンの<code>data-target="#モーダルのid"</code>属性と、モーダルの<code>id</code>属性を一致させることで、ボタンクリック時に特定のモーダルが表示されるように関連付けます。</p>\n</div>\n<div class="step">\n    <h2><span class="step-number">2</span>モーダルの主要部分</h2>\n    <p>モーダルは以下の主要部分から構成されています：</p>\nコピー<ul>\n    <li><strong>modal-header</strong>：タイトルと閉じるボタンを含むヘッダー部分</li>\n    <li><strong>modal-body</strong>：モーダルの主要なコンテンツを配置する部分</li>\n    <li><strong>modal-footer</strong>：閉じるボタンや送信ボタンなどを配置するフッター部分</li>\n</ul>\n</div>\n<div class="note">\n    <p><strong>重要ポイント：</strong> モーダルを機能させるには、以下の点に注意してください：</p>\n    <ul>\n        <li>ボタンには<code>data-toggle="modal"</code>と<code>data-target="#モーダルのid"</code>の両方の属性が必要です</li>\n        <li>モーダル要素には<code>id="モーダルのid"</code>を設定し、ボタンの<code>data-target</code>と一致させます</li>\n        <li>Bootstrap本体とJavaScript依存ファイル（jQuery、Popper.js、Bootstrap.js）が正しく読み込まれている必要があります</li>\n    </ul>\n</div>\n<div class="step">\n    <h2><span class="step-number">3</span>複数のモーダルを使い分ける方法</h2>\n    <p>複数のモーダルを使い分けるには、それぞれに異なるIDを設定し、対応するボタンの<code>data-target</code>属性も合わせて設定します。例えば：</p>\nコピー<ul>\n    <li>ログインモーダル：<code>id="loginModal"</code>と<code>data-target="#loginModal"</code></li>\n    <li>登録モーダル：<code>id="registerModal"</code>と<code>data-target="#registerModal"</code></li>\n</ul>\n\n<p>これにより、特定のボタンをクリックした時に、関連するモーダルだけが表示されるようになります。</p>\n</div>\n<div class="step">\n    <h2><span class="step-number">4</span>モーダル内のフォーム処理</h2>\n    <p>モーダル内にフォームを配置する場合、以下の点に注意すると良いでしょう：</p>\nコピー<ul>\n    <li>モーダルの閉じるボタンには<code>data-dismiss="modal"</code>属性を設定します</li>\n    <li>送信ボタンには<code>type="submit"</code>を設定し、フォームとの関連付けを行います</li>\n    <li>JavaScriptでフォームの送信イベントを捕捉し、データ処理を行います</li>\n</ul>\n</div>	1
174	2024-07-11 19:00:37	2025-03-22 19:36:11.859252	4	15	構成	\N	\N	\N	\N	\N	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>Reactの基本的な読み込みの流れ</h2>\n    <p>Reactでは対象のページにアクセスされると以下の順番でファイルが読み込まれていきます：</p>\n    <ol>\n        <li>public/index.html</li>\n        <li>src/index.js</li>\n        <li>src/App.js</li>\n    </ol>\n    \n    <p>それぞれのファイルの役割：</p>\n    <ul>\n        <li><strong>public/index.html</strong> - タイトルなどのhead部の設定</li>\n        <li><strong>src/index.js</strong> - ファイルの読み込み、ルートの設定</li>\n        <li><strong>src/App.js</strong> - ルートの表示内容</li>\n    </ul>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>ルートの設定</h2>\n    <p>ルートはsrc/index.jsで以下のように定義されています：</p>\n    \n    <div class="code-block">const root = ReactDOM.createRoot(document.getElementById('root'));</div>\n    \n    <p>このコードにより、デフォルトではpublic/index.htmlの「id="root"」が設定された要素に表示されるようになっています。</p>\n    \n    <p>そして、以下のコードでApp.jsのApp関数で定義された内容をrootに埋め込みます：</p>\n    \n    <div class="code-block">root.render(<br>  &lt;React.StrictMode&gt;<br>    &lt;App /&gt;<br>  &lt;/React.StrictMode&gt;<br>);</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>直接表示内容を記入する方法</h2>\n    <p>root.render()内に、App.jsを使わずに直接表示内容を記入することもできます。</p>\n    <p>その場合は、使用されていないクラスを読み込んでいるとエラーとなるため、一番下に追記するか、以下の2行を削除してください：</p>\n    \n    <div class="code-block">import React from 'react';<br>import App from './App';</div>\n    \n    <p>直接記入する例：</p>\n    \n    <div class="code-block">const name = 'test';<br>root.render(<br>  &lt;React.Fragment&gt;<br>    &lt;p&gt;{name}&lt;/p&gt;<br>    &lt;p&gt;test2&lt;/p&gt;<br>  &lt;/React.Fragment&gt;<br>)</div>\n    \n    <p>上記のコードを実行すると画面に以下のように表示されます：</p>\n    <p>test<br>test2</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>注意点</h2>\n    <div class="note">\n        <p><strong>重要：</strong> render関数では複数の要素を直接入れるとエラーになります。</p>\n        <p>複数要素を表示したいときは以下のいずれかの方法を使用してください：</p>\n        <ul>\n            <li>React.Fragmentで囲む</li>\n            <li>divタグで囲む</li>\n        </ul>\n        <p>また、<code>{変数名}</code>とすることで変数を埋め込むことも可能です。</p>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>App.jsについて</h2>\n    <p>App関数は初期状態ではreturn()のみ記入されており、この()内の内容がpublic/index.htmlのidがrootの要素に表示されます。</p>\n    \n    <p>デフォルトの状態では以下のコードがあります：</p>\n    \n    <div class="code-block">&lt;img src={logo} className="App-logo" alt="logo" /&gt;</div>\n    \n    <p>このコードを削除するとエラーになるため、書き直すときは以下の行も一緒に削除してください：</p>\n    \n    <div class="code-block">import logo from './logo.svg';</div>\n</div>	2
183	2024-08-02 05:11:22	2024-08-02 05:14:46	1	17	コメント	test	Ruby	puts 'test' #コメント\\n\\n=bigin\\nコメント\\nコメント\\n=end	\N	\N	\N	\N	Rubyでは、<br><div class="code-block"># コメントの内容</div><br>もしくは、<br><div class="code-block">=bigin<br>コメントの内容<br>=end</div><br>の形式で記入することでコメントアウトすることができます。<br><br>コメントアウトはメモのような感じでプログラムとして実行されません。<br><br>#は記入した行の末尾まで、=begin、=endは複数行にわたるコメントアウトを行うことができます。	3
185	2024-08-02 05:23:10	2024-08-02 05:29:31	1	17	変数	test\\ntest2	Ruby	text = "test"\\nputs text\\n\\ntext ="test2"\\nputs text	\N	\N	\N	\N	変数とは値を代入する入れ物のことです。<br><div class="code-block">変数名 = 変数の値</div><br>の形式で変数を定義することができ、以降変数名を呼び出すことで変数の値を使用することができるようになります。<br><br>また、変数は使用している変数に対して再び値を代入することで値を書き換えることができます。	5
182	2024-08-02 05:07:29	2024-08-02 05:08:13	1	17	実行、出力	test	Ruby	puts 'test'	\N	\N	\N	\N	Rubyでは<br><br><div class="code-block">puts 出力する内容</div><br>の形式で記入することで文字などを出力することができます。<br><br>拡張子を.rbにして保存することでRubyファイルを作成することができ、コマンドプロンプトで<br><div class="code-block">ruby ファイル名</div><br>と入力することでrubyファイルが実行されます。	2
186	2024-08-02 05:34:13	2024-08-02 05:34:13	1	17	定数	test	Ruby	TEXT = "test"\\\\\\\\r\\nputs TEXT	\N	\N	\N	\N	定数は変数と同じように値を代入するのに使用しますが、変数とは違い、値を上書きしようとすると警告が出ます。\\\\\\\\r\\n定数名は変数と見分けがつくようにすべて大文字で記入してください。\\\\\\\\r\\n\\\\\\\\r\\n定数は消費税率など、プログラム内で書き換える必要がない値を代入するのに使用してください。	6
184	2024-08-02 05:19:01	2024-08-02 05:21:00	1	17	文字列の連結	testtest	Ruby	puts 'test' + 'test'	\N	\N	\N	\N	<div class="code-block">任意の文字列+任意の文字列</div><br>の形式で文字列同士を結合することができます。<br>	4
188	2024-08-02 05:44:51	2024-08-02 05:46:21	1	17	文字列内での変数展開	変数の値はtestです	Ruby	text = 'test'\\nputs "変数の値は#{text}です"	\N	\N	\N	\N	文字列を囲っている''を""に変更し、#{変数名}の形式で記入することで、文字列の中で変数を展開することができます。<br>また、#{2-1}のように計算結果を埋め込むこともできます。	7
190	2024-08-02 05:50:40	2024-08-02 05:52:18	1	17	変数に文字列を追加する	testtext	Ruby	text = 'test'\\ntext << 'text'\\nputs text	\N	\N	\N	\N	<div class="code-block">変数名 << 文字列</div><br>の形式で記入することで、変数の末尾に文字列を追加することができます。	8
191	2024-08-02 06:44:54	2024-08-02 07:02:12	1	17	条件分岐(if文)	testは10より小さいです	Ruby	test = 9\\n\\nif test > 10\\n  puts 'testは10より大きいです'\\nelsif test < 10\\n  puts 'testは10より小さいです'\\nelse\\n  puts 'testは10です'\\nend	\N	\N	\N	\N	if文は、処理を分岐するのに使用します。<br><div class="code-block">if 条件<br>   条件に一致したときの処理<br>elsif 条件2<br>   条件2に一致したときの処理<br>else<br>   どの条件にも一致しなかったときの処理<br>end</div><br>の形式で記入します。<br>一致したときのみ処理を行いたいときは、elsif、elseを省略することができます。<br><br>値が同じかどうかを比較するときは値1==値2もしくは値1===値2の形式で記入して下さい。<br>==では型の比較はなし、===は型の比較ありとなっています。<br><br>また、複数条件にしたい場合は<br>条件1&&条件2とすると両方に一致したとき、<br>条件1||条件2とするとどちらかに一致したときという内容になります。<br><br>!条件とすると条件に一致しなかったときという内容にすることもできます。	9
192	2024-08-02 07:02:53	2024-08-02 07:06:38	1	17	条件分岐(unless文)	testは10ではありません	Ruby	test = 8\\n\\nunless test === 10\\n  puts "testは10ではありません"\\nelse\\n  puts "testは10です"\\nend	\N	\N	\N	\N	unless文はif文の逆で、条件に一致しなかったときに処理を行うのに使用します。<br><div class="code-block">unless 条件<br>   条件に一致しなかったときの処理<br>else<br>   条件に一致したときの処理<br>end</div><br>の形式で記入します。<br><br>条件に一致しなかったときの処理のみの場合はelseを省略することができます。	10
193	2024-08-02 07:16:25	2024-08-02 07:20:21	1	17	条件分岐(case文)	testは2もしくは3です	Ruby	test = 3\\n\\ncase test\\nwhen 1\\n  puts 'testは1です'\\nwhen 2,3\\n  puts 'testは2もしくは3です'\\nelse\\n  puts 'testの値は3より大きいもしくは正の整数ではありません'\\nend	\N	\N	\N	\N	case文は変数の値によって条件分岐するのに使用します。<br><br><div class="code-block">case 条件分岐に使用する変数<br>when 値<br>   条件分岐に使用する変数が値だった時の処理<br>else<br>   どのwhenにも一致しなかったときの処理<br>end</div><br>の形式で記入します。<br><br>whenは複数個追加することもでき、,区切りでどれかに一致したときの処理とすることもできます。	11
196	2024-08-02 07:27:14	2024-08-02 07:32:34	1	17	３項演算子	1	Ruby	test = 1\\ntest2 = test>0 ? 1 : 0\\n\\nputs test2	\N	\N	\N	\N	３項演算子は<br><div class="code-block">変数 = 条件 ? 条件に一致したときの値 : 条件に一致しなかったときの値</div><br>の形式で記入することで条件によって変数の値を変えることができます。<br><br>上の例では変数test2には変数testが0より大きいときには1、それ以外の時(0以下)の時には0が代入されています。<br><div class="code-block">if test >0<br>   test2 = 1<br>else<br>   test2 = 0<br>end</div><br>と記入しても同じ内容となります。	12
284	2024-08-22 17:25:24	2025-03-23 07:02:33.450484	4	19	フィールドを追加して取得する	\N	app/controllers/test_controller.rb	class TestController < ApplicationController\\n  def index\\n    @sales = Sale.select(:amount, :sales_date, 'amount * 1.1 AS tax_included')\\n  end\\nend	\N	\N	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>計算フィールドの基本</h2>\n    <p>計算した値などのフィールドを追加するには、<code>select</code>メソッド内で<code>AS</code>キーワードを使用します：</p>\n    \n    <div class="code-block">\n        <pre>モデル.select('計算式 AS 追加するフィールド名')</pre>\n    </div>\n    \n    <p>例えば、税込価格を計算して取得する場合：</p>\n    \n    <div class="code-block">\n        <pre>Sale.select(:amount, :sales_date, 'amount * 1.1 AS tax_included')</pre>\n    </div>\n    \n    <p>上の例では、amount、sales_dateフィールドとともに、amount*1.1した値をtax_includedフィールドとして取得しています。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>既存フィールドと計算フィールドの組み合わせ</h2>\n    <p>既存のフィールドと計算フィールドを一緒に取得する方法：</p>\n    \n    <div class="code-block">\n        <pre># 方法1: 文字列と記号で指定\nSale.select('id, amount, sales_date, amount * 1.1 AS tax_included')\n\n# 方法2: 記号と文字列を混在させる\nSale.select(:id, :amount, :sales_date, 'amount * 1.1 AS tax_included')\n\n# 方法3: 配列で指定\nSale.select([:id, :amount, :sales_date, 'amount * 1.1 AS tax_included'])</pre>\n    </div>\n    \n    <p>どの方法を使っても、同じ結果が得られます。読みやすさや保守性を考慮して選択してください。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>様々な計算例</h2>\n    <p>SQLで使用できる演算子や関数を使って様々な計算フィールドを作成できます：</p>\n    \n    <div class="code-block">\n        <pre># 単純な算術演算\nSale.select(:id, 'amount - discount AS net_amount')\n\n# 割合計算\nSale.select(:id, :amount, 'discount / amount * 100 AS discount_percentage')\n\n# 日付計算\nSale.select(:id, 'DATEDIFF(due_date, sales_date) AS payment_term')\n\n# 条件分岐\nSale.select(:id, :amount, \n          'CASE WHEN amount > 10000 THEN "大口" ELSE "小口" END AS customer_rank')\n\n# 文字列連結\nUser.select(:id, "CONCAT(first_name, ' ', last_name) AS full_name")\n\n# 四捨五入\nSale.select(:id, 'ROUND(amount * 1.1, 0) AS rounded_tax_included')</pre>\n    </div>\n    \n    <p>使用できる関数はデータベース（MySQL, PostgreSQL等）によって異なる場合があります。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>計算フィールドの活用</h2>\n    <p>計算フィールドは取得後、通常のフィールドと同様にアクセスできます：</p>\n    \n    <div class="code-block">\n        <pre>sales = Sale.select(:id, :amount, 'amount * 1.1 AS tax_included')\n\nsales.each do |sale|\n  puts "ID: #{sale.id}"\n  puts "金額（税抜）: #{sale.amount}"\n  puts "金額（税込）: #{sale.tax_included}"\nend</pre>\n    </div>\n    \n    <div class="note">\n        <p><strong>注意：</strong> 計算フィールドの型変換は自動的に行われますが、データベースの返す型によっては期待通りにならないことがあります。必要に応じて<code>to_f</code>や<code>to_i</code>などで型変換してください。</p>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>集計関数との組み合わせ</h2>\n    <p>計算フィールドは集計関数と組み合わせると特に有用です：</p>\n    \n    <div class="code-block">\n        <pre># カテゴリごとの売上合計と税込合計\nSale.select('product_category, \n            SUM(amount) AS total_amount, \n            SUM(amount) * 1.1 AS tax_included_total')\n    .group(:product_category)\n\n# 月ごとの売上と前月比\nSale.select("DATE_FORMAT(sales_date, '%Y-%m') AS month, \n            SUM(amount) AS monthly_total,\n            SUM(amount) / LAG(SUM(amount)) OVER (ORDER BY DATE_FORMAT(sales_date, '%Y-%m')) * 100 - 100 AS growth_rate")\n    .group("DATE_FORMAT(sales_date, '%Y-%m')")\n    .order("month")</pre>\n    </div>\n    \n    <p>2つ目の例のようなウィンドウ関数はMySQLの8.0以降やPostgreSQLでサポートされています。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">6</span>実践的な使用例</h2>\n    <p>コントローラーでの実際の使用例：</p>\n    \n    <div class="code-block">\n        <pre>class SalesController < ApplicationController\n  def index\n    @sales = Sale.select(:id, :product_name, :amount, :sales_date,\n                         'amount * 1.1 AS tax_included',\n                         'CASE \n                            WHEN amount < 5000 THEN "小" \n                            WHEN amount < 10000 THEN "中" \n                            ELSE "大" \n                          END AS scale')\n                 .order(sales_date: :desc)\n  end\n  \n  def analysis\n    # 月ごとの売上サマリー\n    @monthly_summary = Sale.select("DATE_FORMAT(sales_date, '%Y-%m') AS month,\n                                   COUNT(*) AS transaction_count,\n                                   SUM(amount) AS total_amount,\n                                   AVG(amount) AS average_amount,\n                                   MIN(amount) AS min_amount,\n                                   MAX(amount) AS max_amount")\n                           .where("sales_date >= ?", 6.months.ago)\n                           .group("DATE_FORMAT(sales_date, '%Y-%m')")\n                           .order("month DESC")\n  end\nend</pre>\n    </div>\n    \n    <p>ビューでの表示例（app/views/sales/index.html.erb）：</p>\n    \n    <div class="code-block">\n        <pre>&lt;h1&gt;売上一覧&lt;/h1&gt;\n\n&lt;table&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th&gt;ID&lt;/th&gt;\n      &lt;th&gt;商品名&lt;/th&gt;\n      &lt;th&gt;日付&lt;/th&gt;\n      &lt;th&gt;金額（税抜）&lt;/th&gt;\n      &lt;th&gt;金額（税込）&lt;/th&gt;\n      &lt;th&gt;規模&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;% @sales.each do |sale| %&gt;\n      &lt;tr&gt;\n        &lt;td&gt;&lt;%= sale.id %&gt;&lt;/td&gt;\n        &lt;td&gt;&lt;%= sale.product_name %&gt;&lt;/td&gt;\n        &lt;td&gt;&lt;%= sale.sales_date.strftime('%Y-%m-%d') %&gt;&lt;/td&gt;\n        &lt;td&gt;&lt;%= number_to_currency(sale.amount) %&gt;&lt;/td&gt;\n        &lt;td&gt;&lt;%= number_to_currency(sale.tax_included) %&gt;&lt;/td&gt;\n        &lt;td&gt;&lt;%= sale.scale %&gt;&lt;/td&gt;\n      &lt;/tr&gt;\n    &lt;% end %&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;</pre>\n    </div>\n</div>\n\n<div class="note">\n    <p><strong>補足：</strong></p>\n    <ul>\n        <li>計算フィールドはデータベース内で計算されるため、Ruby側でデータを加工するよりも効率的です。</li>\n        <li>複雑な計算や条件分岐はSQLの文法に従う必要があります。</li>\n        <li>データベース固有の関数を使用する場合は、データベースの種類によって記述が異なることを考慮してください。</li>\n        <li>取得した計算フィールドはモデルのインスタンスに一時的に追加されるだけで、データベースには保存されません。永続化する場合は別途updateなどが必要です。</li>\n    </ul>\n</div>	31
197	2024-08-02 07:39:22	2024-08-02 07:42:39	1	17	繰り返し処理(while文)	0\\n1\\n2\\n3\\n4\\n5	Ruby	num = 0\\n\\nwhile num<=5\\n  puts num\\n  num += 1\\nend	\N	\N	\N	\N	while文は条件に一致する間繰り返す文となっています。<br><div class="code-block">while 条件<br>   条件に一致する間繰り返す処理<br>end</div><br>の形式で記入します。<br>処理内で値を更新させないと無限ループになってしまう点に注意してください。<br><br>上の例では、num += 1とすることで、繰り返しのたびに変数numの値を1ずつ増やしています。	13
198	2024-08-02 08:07:04	2024-08-02 08:12:51	1	17	繰り返し処理(until文)	5\\n4\\n3\\n2\\n1	Ruby	num = 5\\n\\nuntil num<=0\\n  puts num\\n  num -= 1\\nend	\N	\N	\N	\N	until文は条件に一致しない間繰り返し処理を行う文となっており、while文の逆となっています。<br><br><div class="code-block">until 条件<br>   条件に一致しないときの処理<br>end</div><br>の形式で記入します。<br><br>while文と同じで繰り返し処理内で値を更新しないと無限ループになってしまう点に注意してください。	14
199	2024-08-02 08:25:50	2024-08-02 08:33:57	1	17	配列	1\\n[1, 2, 3, "test"]\\n[1, 2, 3, "test", [10, 20]]\\n10\\n5	Ruby	array = [1, 2, 3, 'test']\\n\\nputs array[0]\\np(array)\\n\\narray[4] = [10, 20]\\np(array)\\nputs array[4][0]\\n\\nputs array.length	\N	\N	\N	\N	配列は、一つの変数に対して複数の値を代入したりするのに使用します。<br><br><div class="code-block">変数名 = [値, 値, 値...]</div><br>のような形式で変数に代入することができます。<br><br>配列の特定の要素のみ取り出すときは、<br><div class="code-block">配列を代入した変数[インデックス]</div><br>の形式で記入します。<br>インデックスとは、配列の何番目の要素化を指す番号で先頭の要素は0となっています。<br><br>配列全体を出力したいときは<br><div class="code-block">p(配列を代入した変数)</div><br>の形式で使用します。<br><br>また、インデックスを指定して配列の特定の要素を追加、上書きすることもできるようになっています。<br>配列の中に配列を入れることも可能となっており、上の例では、array[4]に[10, 20]を追加しています。<br><br><div class="code-block">配列を代入した変数.length</div><br>の形式で記入することで配列の要素数を調べることもできます。<br><div class="code-block">配列を代入した変数.size</div><br>としても同様の意味となります。	15
201	2024-08-02 22:57:06	2024-08-02 23:03:25	1	17	ハッシュ	{:test=>1, :test2=>2}\\n1\\n4	Ruby	dict = {'test': 1, 'test2': 2}\\n\\np(dict)\\nputs dict[:test]\\n\\ndict2 = {'test'=> 3, 'test2'=> 4}\\nputs dict2['test2']	\N	\N	\N	\N	ハッシュとは他の言語での辞書型のことで、キーに対して値を持たせる機能です。<br><br>ハッシュは<br><div class="code-block">変数 = {キー: 値}</div><br>もしくは<br><div class="code-block">変数 = {キー=&gt; 値}</div><br>の形式で定義することができます。<br>また,区切りでキー、値を増やすこともできます。<br><br>キー: 値の形式で記入しているものに対しては<br><div class="code-block">変数名[:キー]</div><br>キー=&gt;値の形式で記入しているものに対しては<br><div class="code-block">変数名['キー']</div><br>の形式で値を取得することができます。<br><br>ハッシュ全体の値取得時は<br><div class="code-block">p(変数名)</div><br>と記入してください。<br>	16
16	2024-06-24 05:39:43	2024-06-28 16:49:47	1	1	リンクを作成する	<a href="https://www.google.com/" target="_blank">Google</a>	HTML	<a href="https://www.google.com/">Google</a>	\N	\N	\N	\N	上の例ではGoogle文字にGoogleホーム画面へのリンクを貼り付けています。<br>リンクを作成する場合は、<br><div class="code-block">&lt;a href="リンク先のURL"&gt;画面に表示したい文字&lt;/a&gt;</div><br>の方式で記入します。	4
202	2024-08-02 23:08:14	2024-08-02 23:12:44	1	17	繰り返し処理(for文)	1\\n2\\n3\\n4\\nキー=test 値=1\\nキー=test2 値=2	Ruby	list = [1, 2, 3, 4]\\nfor val in list\\n  puts val\\nend\\n\\ndict = {'test': 1, 'test2': 2}\\nfor key, val in dict\\n  puts "キー=#{key} 値=#{val}"\\nend	\N	\N	\N	\N	for文は配列、ハッシュに対して繰り返し処理を行うのに使用します。<br><br><div class="code-block">for 繰り返し時に代入する変数 in 配列<br>   繰り返し時の処理<br>end</div><br>の形式で記入することで、配列の要素を順番に繰り返し時に代入する変数に代入して繰り返し処理を行います。<br><br>ハッシュに対してfor文を使用するときは<br><div class="code-block">for 繰り返し時にキーを代入する変数, 繰り返し時に値を代入する変数 in ハッシュ<br>   繰り返し時の処理<br>end</div><br>の形式で記入します。	17
203	2024-08-02 23:17:46	2024-08-02 23:21:29	1	17	繰り返し処理(eachメソッド)	1\\n2\\n3\\n4\\ntest: 1\\ntest2: 2	Ruby	list = [1, 2, 3, 4]\\nlist.each{|val|\\n  puts  val\\n}\\n\\ndict = {'test': 1, 'test2': 2}\\ndict.each{|key, val|\\n  puts "#{key}: #{val}"\\n}	\N	\N	\N	\N	eachメソッドも、for文と同様に配列、ハッシュに対して繰り返し処理を行うのに使用します。<br><br><div class="code-block">配列.each{|繰り返し時に代入する変数|<br>   繰り返し時の処理<br>}</div><br>の形式で記入することで、配列の要素を順番に繰り返し時に代入する変数に代入して繰り返し処理を行うことができます。<br><br><div class="code-block">ハッシュ.each{|繰り返し時にキーを代入する変数, 繰り返し時に値を代入する変数|<br>   繰り返し時の処理<br>}</div><br>の形式で記入することで、ハッシュの要素を順番に繰り返し時に代入する変数に代入して繰り返し処理を行うことができます。	18
204	2024-08-02 23:30:57	2024-08-02 23:41:32	1	17	メソッド	3	Ruby	def test(val, val2=0)\\n  puts val + val2\\nend\\n\\ntest(1, 2)	\N	\N	\N	\N	メソッドとは、他の言語での関数のことです。<br>他の言語では、クラス内で定義された関数のことをメソッドと呼びますがRubyではすべてメソッドと呼ぶようです。<br><br>メソッドは<br><div class="code-block">def メソッド名(仮引数)<br>   処理<br>end</div><br>の形式で定義し、<br><div class="code-block">メソッド名(引数)</div><br>の形式でメソッドを呼び出します。<br><br>メソッドは定義しただけでは実行されないので実行時に呼び出す必要があります。<br><br>呼び出し時に引数として()内に記入した値がメソッドの仮引数に代入され、処理が行われます。<br>上の例は2つの値の足し算を行うメソッドとなっています。<br><br>また、上の例の2つ目の仮引数のように仮引数=値の形式で記入することで対象の引数が省略されたときのデフォルトの値を設定することができます。	19
206	2024-08-03 07:25:02	2024-08-03 07:51:47	1	17	クラス	1	Ruby	class Test\\n  def initialize(val)\\n    @val = val\\n  end\\n\\n  def testMethod()\\n    puts @val\\n  end\\nend\\n\\ntest = Test.new(1)\\ntest.testMethod()	\N	\N	\N	\N	クラスとは、プロパティ(クラス内での変数)とメソッドをひと固まりにしたものです。<br><br>クラスは<br><div class="code-block">class クラス名<br>   プロパティ、メソッドの定義<br>end</div><br>の形式で定義することができます。<br><br>クラスも、メソッドと同じく、定義しただけでは実行することができず、インスタンスというものを作成する必要があります。<br><br>インスタンスは、<br><div class="code-block">変数 = クラス.new(引数)</div><br>の形式で作成することができます。<br>インスタンス作成時にはインスタンス作成時の引数がinitializeメソッドに渡され実行されるので、このメソッドでプロパティの初期値の設定などを行います。(他の言語でのコンストラクタ)<br>クラス内でのプロパティは@プロパティ名の形式で前に@を付ける必要があります。<br><br>メソッドは、<br><div class="code-block">インスタンスを代入した変数.メソッド名(引数)</div><br>の形式で呼び出すことができます。	21
207	2024-08-03 07:48:59	2024-08-03 07:59:40	1	17	プロパティを読み書き可能にする	1\\n3	Ruby	class Test\\n  attr_accessor :val, :val2\\n  def initialize(val, val2)\\n    @val = val\\n    @val2 = val2\\n  end\\nend\\n\\ntest = Test.new(1, 2)\\nputs test.val\\ntest.val = 3\\nputs test.val	\N	\N	\N	\N	プロパティはデフォルトの状態ではクラス外から読み書きともに行うことができず、更新、出力用のメソッドを作成する必要がありますが、クラス内に<br><div class="code-block">attr_accessor :プロパティ名</div><br>と記入することで、対象のプロパティの読み書きをクラス外から直接行えるようになります。<br>:プロパティ名は,区切りで読み書き可能にするプロパティを複数にすることもできます。<br><br>また、<br><div class="code-block">attr_reader :プロパティ名</div><br>で読み込み専用、<br><div class="code-block">attr_writer :プロパティ名</div><br>で書き込み専用にすることもできます。	22
208	2024-08-03 08:09:31	2024-08-03 08:12:39	1	17	クラス定数	1\\n3	Ruby	class Test\\n  VAL = 1\\n\\n  def initialize(val)\\n    @val = val\\n  end\\n\\n  def testMethod()\\n    puts @val + VAL\\n  end\\nend\\n\\nputs Test::VAL\\ntest = Test.new(2)\\ntest.testMethod()	\N	\N	\N	\N	クラスでは定数も定義できるようになっており、クラス定数はインスタンスを作成しなくても<br><div class="code-block">クラス名::定数名</div><br>の形式で呼び出せるようになっています。	6
209	2024-08-05 00:39:23	2024-08-05 00:42:09	1	17	クラス変数	2\\n3	Ruby	class Test\\n  @@val = 1\\n\\n  def testMethod()\\n    @@val += 1\\n    puts @@val\\n  end\\nend\\n\\ntest = Test.new()\\ntest.testMethod()\\ntest2 = Test.new()\\ntest2.testMethod()	\N	\N	\N	\N	initializeメソッドで定義したプロパティは、インスタンスごとに独立した値となりますが、クラス変数を使用することで、クラス共有の変数を定義することができます。<br><br>クラス変数は、<br><div class="code-block">@@変数名 = 値</div><br>の形式で定義することができます。	23
210	2024-08-05 00:51:07	2024-08-05 01:12:16	1	17	継承	3\\n10	Ruby	class Parent\\n  VAL = 10\\n  @@val = 1\\n  def initialize(val)\\n    @val2 = val\\n  end\\n\\n  def testMethod()\\n    puts @@val + @val2\\n  end\\nend\\n\\nclass Child < Parent\\nend\\n\\ntest = Child.new(2)\\ntest.testMethod()\\nputs Child::VAL	\N	\N	\N	\N	継承とは、別のクラスのプロパティ、メソッドなどを使用できるようにすることです。<br><br>継承されるクラス(上の例のParentクラス)のことを親クラス、継承するクラス(上の例のChildクラス)のことを子クラスと呼びます。<br>クラス定義時に<br><div class="code-block">class クラス名 &lt; 継承するクラス名</div><br>の形式で記入することで継承を行うことができます。<br><br>Rubyでは、複数のクラスを同時に継承する多重継承(親が複数になる状態)は出来ません。<br><br>親クラスで定義されているメソッドと同名のメソッドを子クラスで再定義することでメソッドを上書きすることもでき、この上書きのことをオーバーライドと呼びます。<br><br>オーバーライド後に親のメソッドを呼び出したいときは、<br><div class="code-block">def メソッド名<br>   処理<br>   super(引数)<br>   処理<br>end</div><br>のようにするとsuper(引数)を記入した場所で親の同名のメソッドが実行されます。	24
211	2024-08-05 01:13:41	2024-08-05 01:24:10	1	17	アクセス装飾子	1\\n2	Ruby	class Test\\n  def testMethod()\\n    puts 1\\n    testMethod2()\\n  end\\n\\n  private\\n  def testMethod2()\\n    puts 2\\n  end\\n\\n  def testMethod3()\\n    puts 3\\n  end\\nend\\n\\ntest = Test.new()\\ntest.testMethod()	\N	\N	\N	\N	メソッドの前にアクセス装飾子と呼ばれるものを付けることで、メソッドに対するアクセスを制限することができます。<br>アクセス装飾子はpublic、protected、privateの3種類があります。<br>public どこからでも呼び出せる<br>protected 自クラスもしくは自身の子クラスのメソッドからしか呼び出せない<br>private 自クラスのメソッドからしか呼び出せない<br>となっています。<br><br>アクセス装飾子はデフォルトではpublicとなっており、クラス内でアクセス装飾子を記入すると、新たにアクセス装飾子を記入した場所までのメソッドは対象のアクセス装飾子が適用されます。<br>上の例だとtestMethod2、testMethod3privateとなっています。	25
220	2024-08-09 15:35:58	2024-08-09 15:44:12	5	7	ブランチの操作	\N	\N	\N	\N	\N	\N	\N	現在のブランチを確認する<br><div class="code-block">git branch</div><br><br>全てのブランチを確認する<br><div class="code-block">git branch -a</div><br><br>ブランチを切り替える<br><div class="code-block">git checkout ブランチ名</div><br><br>ブランチを新たに作成して切り替える<br><div class="code-block">git checkout -b ブランチ名</div><br><br>ローカルのブランチを削除する<br><div class="code-block">git blanch -d ブランチ名</div><br><br>ローカルのブランチの強制削除<br><div class="code-block">git branch -D ブランチ名</div><br><br>リポジトリのブランチを削除する<br><div class="code-block">git push origin --delete ブランチ名</div>	2
212	2024-08-05 01:42:21	2024-08-05 01:58:01	1	17	モジュール	1\\n2	Ruby	module TestModule\\n  def testMethod\\n    puts 1\\n  end\\n\\n  def testMethod2\\n    puts 2\\n  end\\n\\n  module_function :testMethod\\n  public :testMethod\\nend\\n\\nclass Test\\n  include TestModule\\nend\\n\\nTestModule.testMethod\\n\\ntest = Test.new\\ntest.testMethod2	\N	\N	\N	\N	モジュールという機能を使用することで、同じ内容のクラスメソッドが複数あるときに何度も定義する必要がなくなります。<br><br><div class="code-block">module モジュール名<br>   メソッドの定義<br>end</div><br>の形式でモジュールを定義することができ、<br><br>クラス内で<br><div class="code-block">include モジュール名</div><br>とすることで、モジュールで定義したメソッドを埋め込むことができます。<br><br>また、モジュールで定義したメソッドは<br>メソッド内に<br><div class="code-block">module_function :メソッド名</div><br>の形式で記入することでクラス外から<br><div class="code-block">モジュール名.メソッド</div><br>の形式で呼び出すことができます。<br><br>module_functionで設定したメソッドは、クラス内で読み込んだ時にprivateとなるので、アクセス装飾子を変更したいときは上の例のように<br><div class="code-block">アクセス装飾子 :メソッド名</div><br>の形式で記入してください。	26
216	2024-08-06 01:39:35	2025-03-22 20:14:20.706842	4	18	コントローラー	\N	\N	\N	\N	\N	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>コントローラーの作成</h2>\n    <p>コントローラーは、コマンドプロンプトでプロジェクトのルートディレクトリで以下のコマンドを実行して作成できます：</p>\n    \n    <div class="code-block">rails generate controller コントローラー名</div>\n    \n    <div class="note">\n        <p><strong>注意：</strong> コマンド中の「controller」のスペルミスに注意してください。正しくは「controller」です。</p>\n    </div>\n    \n    <p>上記のコマンドを実行すると、以下のファイルが自動的に作成されます：</p>\n    <ul>\n        <li>app/controllers/コントローラー名_controller.rb</li>\n        <li>app/views/コントローラー名/ （フォルダ）</li>\n        <li>app/helpers/コントローラー名_helper.rb</li>\n        <li>test/controllers/コントローラー名_controller_test.rb</li>\n    </ul>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>コントローラーファイルの基本構造</h2>\n    <p>コントローラーの操作を行うファイルは以下の場所にあります：</p>\n    <p>app/controllers/コントローラー名_controller.rb</p>\n    \n    <p>このファイルを開くと、以下のような基本構造になっています：</p>\n    \n    <div class="code-block">class コントローラー名Controller < ApplicationController<br>end</div>\n    \n    <p>アクションを追加するには、endの前に処理内容を記入します：</p>\n    \n    <div class="code-block">class コントローラー名Controller < ApplicationController<br>  def メソッド名<br>    render plain: "表示する内容"<br>  end<br>end</div>\n    \n    <p>上記の例では、「render plain:」を使って単純なテキストを表示していますが、通常はビューテンプレートをレンダリングします。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>ルーティングの設定</h2>\n    <p>この時点では、アクセスされたURLごとの設定がされていないため、このページはまだ表示することはできません。</p>\n    \n    <p>ルーティングを設定するには、config/routes.rbファイルを編集します：</p>\n    \n    <div class="code-block">Rails.application.routes.draw do<br>  get 'コントローラー名/メソッド名'<br>end</div>\n    \n    <p>または、特定のパスにルーティングすることもできます：</p>\n    \n    <div class="code-block">Rails.application.routes.draw do<br>  get 'カスタムパス', to: 'コントローラー名#メソッド名'<br>end</div>\n    \n    <p>例えば、PostsコントローラーのindexメソッドをルートURLにマップする場合：</p>\n    \n    <div class="code-block">Rails.application.routes.draw do<br>  root 'posts#index'<br>  get 'posts/index'<br>end</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>アクションとビューの連携</h2>\n    <p>Railsのコントローラーは通常、同じ名前のビューファイルを自動的にレンダリングします。</p>\n    \n    <p>例えば、Postsコントローラーのindexアクションはデフォルトでapp/views/posts/index.html.erbをレンダリングします：</p>\n    \n    <div class="code-block">class PostsController < ApplicationController<br>  def index<br>    @posts = Post.all  # モデルからデータを取得<br>    # 明示的にrenderの指定がない場合、app/views/posts/index.html.erbが使用される<br>  end<br>end</div>\n    \n    <p>別のビューをレンダリングしたい場合は、明示的に指定できます：</p>\n    \n    <div class="code-block">def index<br>  @posts = Post.all<br>  render 'custom_template'  # app/views/posts/custom_template.html.erbをレンダリング<br>end</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>コントローラーでのデータ処理</h2>\n    <p>コントローラーは通常、モデルからデータを取得し、ビューに渡す役割を担います：</p>\n    \n    <div class="code-block">class PostsController < ApplicationController<br>  def index<br>    @posts = Post.all  # すべての投稿を取得<br>  end<br><br>  def show<br>    @post = Post.find(params[:id])  # URLパラメータからIDを取得して特定の投稿を表示<br>  end<br><br>  def new<br>    @post = Post.new  # 新しい投稿用のフォーム表示<br>  end<br><br>  def create<br>    @post = Post.new(post_params)  # フォームから送信されたデータで新規投稿作成<br><br>    if @post.save<br>      redirect_to @post, notice: '投稿が作成されました'<br>    else<br>      render :new<br>    end<br>  end<br><br>  private<br><br>  def post_params<br>    params.require(:post).permit(:title, :content)  # Strong Parameters<br>  end<br>end</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">6</span>コマンドでアクションも同時に生成</h2>\n    <p>コントローラーを生成する際、同時に複数のアクションも作成できます：</p>\n    \n    <div class="code-block">rails generate controller Posts index show new create edit update destroy</div>\n    \n    <p>このコマンドは、Postsコントローラーとアクション用のビューテンプレート、ルーティングを一度に生成します。</p>\n    \n    <div class="note">\n        <p><strong>ヒント：</strong> 上記のアクションはCRUD（Create, Read, Update, Delete）操作に対応しています。RESTfulなコントローラーを作るにはリソースコントローラーも検討してみてください。</p>\n    </div>\n</div>	3
218	2024-08-06 02:31:40	2025-03-22 20:17:34.977128	4	18	ビューを作成する	\N	\N	\N	\N	\N	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>ビューファイルの基本</h2>\n    <p>コントローラー作成時に作成されたapp/views/コントローラー名のフォルダに.html.erb形式のファイルを作成することで、そのHTMLの内容を画面に表示することができます。</p>\n    \n    <p>ルーティングで使用しているコントローラーのメソッドを以下のように処理を何も記入していない状態にします：</p>\n    \n    <div class="code-block">def メソッド名<br>end</div>\n    \n    <p>そして、対応するビューファイルを作成します：</p>\n    <ul>\n        <li>app/views/コントローラー名/コントローラーのメソッド名.html.erb</li>\n    </ul>\n    \n    <p>このビューファイルにHTMLを記入することで、対象のルーティングで設定されたURLにアクセスすると、そのHTMLが表示されるようになります。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>ERBテンプレートについて</h2>\n    <p>.html.erbと普通の.htmlの違いは、.html.erbはERBタグを使用し、ファイル内でRubyのコード（if文、for文など）を実行できる点です。</p>\n    \n    <p>主なERBタグの種類：</p>\n    <ul>\n        <li><code>&lt;%= ... %&gt;</code> - Rubyのコードを実行し、その結果を出力する</li>\n        <li><code>&lt;% ... %&gt;</code> - Rubyのコードを実行するが、結果は出力しない</li>\n    </ul>\n    \n    <p>例：</p>\n    <div class="code-block">&lt;!-- 変数の表示 --&gt;<br>&lt;h1&gt;&lt;%= @title %&gt;&lt;/h1&gt;<br><br>&lt;!-- 条件分岐 --&gt;<br>&lt;% if @user.present? %&gt;<br>  こんにちは、&lt;%= @user.name %&gt;さん<br>&lt;% else %&gt;<br>  ゲストさん、ようこそ<br>&lt;% end %&gt;<br><br>&lt;!-- 繰り返し --&gt;<br>&lt;ul&gt;<br>  &lt;% @items.each do |item| %&gt;<br>    &lt;li&gt;&lt;%= item.name %&gt;: &lt;%= item.price %&gt;円&lt;/li&gt;<br>  &lt;% end %&gt;<br>&lt;/ul&gt;</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>レイアウト</h2>\n    <p>.html.erbファイルに記載するのはbody部のみでよく、デフォルトでは、app/views/layouts/application.html.erbファイルの以下の部分に埋め込まれるようになっています：</p>\n    \n    <div class="code-block">&lt;%= yield %&gt;</div>\n    \n    <p>これにより、ヘッダーやフッターなどの共通部分を一箇所で管理でき、各ビューではコンテンツ部分のみを記述すればよくなります。</p>\n    \n    <p>レイアウトファイルの例：</p>\n    <div class="code-block">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>  &lt;head&gt;<br>    &lt;title&gt;&lt;%= content_for?(:title) ? yield(:title) : "My App" %&gt;&lt;/title&gt;<br>    &lt;%= csrf_meta_tags %&gt;<br>    &lt;%= csp_meta_tag %&gt;<br><br>    &lt;%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track': 'reload' %&gt;<br>    &lt;%= javascript_pack_tag 'application', 'data-turbolinks-track': 'reload' %&gt;<br>  &lt;/head&gt;<br><br>  &lt;body&gt;<br>    &lt;header&gt;<br>      &lt;!-- ヘッダー内容 --&gt;<br>    &lt;/header&gt;<br><br>    &lt;main&gt;<br>      &lt;%= yield %&gt;  &lt;!-- ここに各ビューの内容が埋め込まれる --&gt;<br>    &lt;/main&gt;<br><br>    &lt;footer&gt;<br>      &lt;!-- フッター内容 --&gt;<br>    &lt;/footer&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>スタイルシートの適用</h2>\n    <p>対象のページにCSSを適用したいときは、以下のファイルを作成します：</p>\n    <ul>\n        <li>app/assets/stylesheets/コントローラー名.scss</li>\n    </ul>\n    \n    <p>コントローラー名は末尾のController部分は不要で、すべて小文字で記述します。</p>\n    \n    <p>例えば、HomeControllerに対するスタイルシートは：</p>\n    <ul>\n        <li>app/assets/stylesheets/home.scss</li>\n    </ul>\n    \n    <p>このファイルにCSSを記入することで、そのコントローラーに対応するビューにスタイルを適用できます。</p>\n    \n    <div class="note">\n        <p><strong>注意：</strong> SCSSファイルを追加時にエラーが出た場合は、プロジェクトのルートにあるGemfileを開き、以下を追記してください：</p>\n        <div class="code-block">gem 'sassc-rails'</div>\n        \n        <p>その後、コマンドプロンプトでプロジェクトのルートディレクトリにて以下を実行します：</p>\n        <div class="code-block">bundle install</div>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>パーシャル（部分テンプレート）</h2>\n    <p>共通の部品を再利用するために、パーシャル（部分テンプレート）を使用できます。パーシャルのファイル名はアンダースコア（_）で始まります：</p>\n    \n    <ul>\n        <li>app/views/shared/_header.html.erb</li>\n        <li>app/views/shared/_footer.html.erb</li>\n    </ul>\n    \n    <p>パーシャルを呼び出すには、以下のようにします：</p>\n    <div class="code-block">&lt;%= render 'shared/header' %&gt;</div>\n    \n    <p>変数を渡すこともできます：</p>\n    <div class="code-block">&lt;%= render 'shared/user_info', user: @current_user %&gt;</div>\n    \n    <p>コレクションに対して繰り返し処理を行う場合：</p>\n    <div class="code-block">&lt;%= render partial: 'product', collection: @products %&gt;</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">6</span>ヘルパーメソッド</h2>\n    <p>Railsには、HTML生成を支援するさまざまなヘルパーメソッドが用意されています：</p>\n    \n    <div class="code-block">&lt;!-- リンク --&gt;<br>&lt;%= link_to "Home", root_path %&gt;<br><br>&lt;!-- 画像 --&gt;<br>&lt;%= image_tag "logo.png", alt: "Logo", width: 100 %&gt;<br><br>&lt;!-- フォーム --&gt;<br>&lt;%= form_with model: @article do |form| %&gt;<br>  &lt;div&gt;<br>    &lt;%= form.label :title %&gt;<br>    &lt;%= form.text_field :title %&gt;<br>  &lt;/div&gt;<br><br>  &lt;div&gt;<br>    &lt;%= form.label :content %&gt;<br>    &lt;%= form.text_area :content %&gt;<br>  &lt;/div&gt;<br><br>  &lt;div&gt;<br>    &lt;%= form.submit "Save" %&gt;<br>  &lt;/div&gt;<br>&lt;% end %&gt;</div>\n    \n    <p>独自のヘルパーメソッドは、app/helpers/ディレクトリに定義できます。</p>\n</div>	5
228	2024-08-15 17:57:24	2025-03-22 20:44:45.34506	4	19	データベースを作成する	\N	\N	\N	\N	\N	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>データベースの作成</h2>\n    <p>Ruby on Railsでは、プロジェクトのルートフォルダで以下のコマンドを実行することでデータベースを作成することができます：</p>\n    \n    <div class="code-block">rails db:create</div>\n    \n    <p>このコマンドを実行すると、config/database.ymlの設定に基づいて、開発用（development）とテスト用（test）の2つのデータベースが作成されます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>デフォルトのデータベース</h2>\n    <p>Railsプロジェクトの新規作成時、デフォルトではSQLite3のデータベースが使用されるように設定されています。SQLite3はファイルベースのデータベースで、設定が簡単なため開発用途に適しています。</p>\n    \n    <p>デフォルトのデータベースファイルの場所：</p>\n    <ul>\n        <li>開発用: <code>db/development.sqlite3</code></li>\n        <li>テスト用: <code>db/test.sqlite3</code></li>\n    </ul>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>データベース設定の変更</h2>\n    <p><code>config/database.yml</code>ファイルを編集することで、データベースの種類や設定を変更することができます。</p>\n    \n    <p>SQLite3のデフォルト設定例：</p>\n    \n    <div class="code-block"># config/database.yml<br><br>default: &default<br>  adapter: sqlite3<br>  pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %><br>  timeout: 5000<br><br>development:<br>  <<: *default<br>  database: db/development.sqlite3<br><br>test:<br>  <<: *default<br>  database: db/test.sqlite3<br><br>production:<br>  <<: *default<br>  database: db/production.sqlite3</div>\n    \n    <p>MySQLを使用する場合の設定例：</p>\n    \n    <div class="code-block"># config/database.yml<br><br>default: &default<br>  adapter: mysql2<br>  encoding: utf8mb4<br>  pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %><br>  username: root<br>  password: password<br>  host: localhost<br><br>development:<br>  <<: *default<br>  database: myapp_development<br><br>test:<br>  <<: *default<br>  database: myapp_test<br><br>production:<br>  <<: *default<br>  database: myapp_production<br>  username: myapp<br>  password: <%= ENV['MYAPP_DATABASE_PASSWORD'] %></div>\n    \n    <div class="note">\n        <p><strong>注意：</strong> MySQLなど別のデータベースを使用する場合は、対応するgemのインストールが必要です。例えば、MySQLの場合は<code>mysql2</code> gemをGemfileに追加し、<code>bundle install</code>を実行する必要があります。</p>\n        \n        <div class="code-block"># Gemfile<br>gem 'mysql2'</div>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>データベースの削除</h2>\n    <p>データベースを削除したい場合は、プロジェクトのルートフォルダで以下のコマンドを実行します：</p>\n    \n    <div class="code-block">rails db:drop</div>\n    \n    <p>このコマンドを実行すると、開発用（development）とテスト用（test）の両方のデータベースが削除されます。</p>\n    \n    <div class="note">\n        <p><strong>警告：</strong> このコマンドを実行すると、データベース内のすべてのデータが失われます。実行前に必要に応じてデータのバックアップを取ってください。</p>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>その他のデータベース管理コマンド</h2>\n    <p>Railsには、データベース管理のための便利なコマンドが用意されています：</p>\n    \n    <div class="code-block"># マイグレーションを実行してスキーマを更新<br>rails db:migrate<br><br># データベースをリセット（削除して再作成し、マイグレーションを実行）<br>rails db:reset<br><br># データベースのシードデータを投入<br>rails db:seed<br><br># データベースの状態を確認<br>rails db:version<br><br># データベースをセットアップ（作成、マイグレーション、シードデータ投入）<br>rails db:setup<br><br># テスト環境のデータベースを準備<br>rails db:test:prepare</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">6</span>本番環境での注意点</h2>\n    <p>本番環境（production）では、パフォーマンスやセキュリティの観点から、SQLite3ではなくPostgreSQLやMySQLなどの本格的なデータベースの使用を検討してください。</p>\n    \n    <p>本番環境用の設定では、データベースのパスワードなどの機密情報を環境変数から取得するようにするのが良い習慣です：</p>\n    \n    <div class="code-block"># config/database.yml<br><br>production:<br>  <<: *default<br>  database: myapp_production<br>  username: <%= ENV['DB_USERNAME'] %><br>  password: <%= ENV['DB_PASSWORD'] %><br>  host: <%= ENV['DB_HOST'] %></div>\n    \n    <div class="note">\n        <p><strong>注意：</strong> 本番環境では、データベースの設定ファイルをバージョン管理システム（Git等）に公開しないよう注意してください。機密情報は環境変数や秘密管理ツールを使用して管理することをお勧めします。</p>\n    </div>\n</div>	1
221	2024-08-09 15:47:54	2024-08-09 15:53:40	5	7	ローカルでの変更をリポジトリに反映させる	\N	\N	\N	\N	\N	\N	\N	ローカルでの変更をリポジトリに反映させるには<br><div class="code-block">git add .</div><br>もしくは<br><div class="code-block">git add ファイル名</div><br>　　　　　↓<br><div class="code-block">git commit -m コメント</div><br>　　　　　↓<br><div class="code-block">git push</div><br>の流れになります。<br><br>git add .は現在のディレクトリ以下のすべてのファイルの更新に使用します。<br>特定のファイルのみを更新したいときはgit add ファイル名としてください。<br><br><br><br>	3
222	2024-08-09 15:55:39	2024-08-09 16:10:23	5	7	ローカルのデータを更新する	\N	\N	\N	\N	\N	\N	\N	リモートリポジトリからすべてのブランチのデータを取得する<br><div class="code-block">git fetch</div><br><br>指定したリモートからのデータを取得する<br><div class="code-block">git fetch リモート名</div><br><br>指定したブランチからデータを取得する<br><div class="code-block">git fetch リモート名 ブランチ名</div><br><br>全てのデータをローカルに反映させる<br><div class="code-block">git pull</div><br><br>指定したブランチのデータをローカルに反映させる<br><div class="code-block">git pull リモート名 ブランチ名</div><br><br>強制的にリモートリポジトリと同じにする<br><div class="code-block">git fetch origin<br>git reset --hard origin/main</div>	4
223	2024-08-09 16:11:31	2024-08-09 16:14:11	5	7	特定のファイルの更新を取得しないようにする	\N	\N	\N	\N	\N	\N	\N	特定のファイルの更新を取得しないようにするには、ルートフォルダ直下にある.gitignoreファイルに更新を取得したくないファイル名を追加します。<br><br>ルートからの相対パスで<br><div class="code-block">/ファイル名</div><br>の形式で記入します。	5
225	2024-08-15 17:24:07	2024-08-15 17:26:45	4	18	別のビューを埋め込む	test	index.html.erb	<%= render "header" %>	_header.html.erb	<div>test</div>	\N	\N	view内で<br><div class="code-block">&lt;%= render "読み込むファイル名" %&gt;</div><br>と記入することで別のviewを埋め込むことができます。<br><br>埋め込むファイルは先頭に_を付けたファイル名にし、埋め込むときは拡張子を省いたファイル名のみを記入します。	7
224	2024-08-09 16:20:18	2024-08-09 16:20:18	5	7	特定のファイルを以前の状態に戻す	\N	\N	\N	\N	\N	\N	\N	特定のファイルを以前の状態に戻すには、\\\\\\\\r\\n<div class="code-block">git log --all -- ファイル名</div>\\\\\\\\r\\nと入力し、指定したファイルの更新履歴を確認します。\\\\\\\\r\\nその中で復元したいところのcommitの横にある英数字をコピーします。\\\\\\\\r\\n\\\\\\\\r\\nその後\\\\\\\\r\\n<div class="code-block">git checkout コピーした英数字 -- ファイル名</div>\\\\\\\\r\\nと入力すると指定したファイルを指定した時点の状態に戻すことができます。	6
226	2024-08-15 17:35:32	2024-08-15 17:39:05	4	18	ビュー内での条件分岐	testは1です	index.html.erb	<% test=1 %>\\n\\n<% if test == 0 %>\\n    <div>testは0です</div>\\n<% elsif test == 1 %>\\n    <div>testは1です</div>\\n<% else %>\\n    <div>testは0でも1でもありません</div>\\n<% end %>	\N	\N	\N	\N	上の例ではtestの値に応じて表示される内容が変化するようになっています。<br><br><div class="code-block">&lt;% if 条件 %&gt;<br>    処理内容<br>&lt;% end %&gt;</div><br>のような形式でif文を記入することができます。<br>複数条件あるようなときは上の例のようにelsif、elseも記入することができます。	8
229	2024-08-16 01:22:53	2025-03-22 20:47:06.438697	4	19	モデルの作成、バリデーションの設定	\N	db/migrate/内にできたファイル	class CreateCompanies < ActiveRecord::Migration[7.1]\\n  def change\\n    create_table :companies do |t|\\n      t.text :name, null: false\\n      t.date :founding_date\\n      t.timestamps\\n    end\\n  end\\nend	app/models/company.rb	class Company < ApplicationRecord\\n  validates :name, presence: true\\nend	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>モデルの生成</h2>\n    <p>Railsでモデルを生成するには、コマンドプロンプトでプロジェクトのルートディレクトリに移動し、以下のコマンドを実行します：</p>\n    \n    <div class="code-block">rails generate model モデル名</div>\n    \n    <p>または、より短い形式で：</p>\n    \n    <div class="code-block">rails g model モデル名</div>\n    \n    <p>このコマンドを実行すると、以下のファイルが生成されます：</p>\n    <ul>\n        <li><code>db/migrate/YYYYMMDDHHMMSS_create_モデル名s.rb</code> - データベースのテーブル定義</li>\n        <li><code>app/models/モデル名.rb</code> - モデルクラスの定義</li>\n        <li><code>test/models/モデル名_test.rb</code> - モデルのテストファイル</li>\n        <li><code>test/fixtures/モデル名s.yml</code> - テスト用データ</li>\n    </ul>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>マイグレーションファイルの編集</h2>\n    <p><code>db/migrate</code>フォルダ内に生成されたマイグレーションファイルでは、モデルのフィールド（カラム）を定義します。</p>\n    \n    <div class="code-block">class CreateCompanies < ActiveRecord::Migration[7.0]<br>  def change<br>    create_table :companies do |t|<br>      t.string :name, null: false<br>      t.date :founding_date<br><br>      t.timestamps<br>    end<br>  end<br>end</div>\n    \n    <p>フィールドは以下の形式で定義します：</p>\n    \n    <div class="code-block">t.フィールドの型 :フィールド名</div>\n    \n    <p>フィールドには様々なオプションを指定できます：</p>\n    <ul>\n        <li><code>null: false</code> - NULL値を許可しない（必須項目）</li>\n        <li><code>default: 値</code> - デフォルト値を設定</li>\n        <li><code>limit: 数値</code> - 文字列の最大長など</li>\n        <li><code>precision: 数値</code> - 数値の精度</li>\n        <li><code>scale: 数値</code> - 小数点以下の桁数</li>\n    </ul>\n    \n    <p>主なフィールドの型：</p>\n    <ul>\n        <li><code>string</code> - 短い文字列（通常255文字まで）</li>\n        <li><code>text</code> - 長い文字列</li>\n        <li><code>integer</code> - 整数</li>\n        <li><code>float</code> - 浮動小数点数</li>\n        <li><code>decimal</code> - 精度の高い小数</li>\n        <li><code>datetime</code> - 日時</li>\n        <li><code>date</code> - 日付</li>\n        <li><code>time</code> - 時刻</li>\n        <li><code>boolean</code> - 真偽値</li>\n        <li><code>references</code> - 他のモデルへの参照（外部キー）</li>\n    </ul>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>モデルファイルの編集</h2>\n    <p><code>app/models</code>フォルダ内に生成されたモデルファイルでは、バリデーションやリレーションシップを定義します。</p>\n    \n    <div class="code-block">class Company < ApplicationRecord<br>  # リレーションシップ<br>  has_many :employees<br>  <br>  # バリデーション<br>  validates :name, presence: true<br>end</div>\n    \n    <p>上の例では、Companyモデルをname(文字列)、founding_date(日付)フィールドで作成し、nameフィールドでは空白時にバリデーションを行っている例となっています。</p>\n    \n    <h3>バリデーションの例</h3>\n    <div class="code-block"># 必須チェック<br>validates :name, presence: true<br><br># 長さチェック<br>validates :title, length: { minimum: 5, maximum: 50 }<br><br># 数値チェック<br>validates :age, numericality: { greater_than_or_equal_to: 18 }<br><br># 正規表現チェック<br>validates :postal_code, format: { with: /\\A\\d{3}-\\d{4}\\z/, message: "郵便番号を正しい形式で入力してください" }<br><br># ユニークチェック<br>validates :email, uniqueness: true<br><br># 複数のバリデーション<br>validates :username, presence: true, uniqueness: true, length: { minimum: 3 }</div>\n    \n    <p>正規表現を使ったバリデーションの例：</p>\n    \n    <div class="code-block">validates :postal_code, format: { with: /\\A\\d{3}-\\d{4}\\z/, message: "郵便番号を正しい形式で入力してください" }</div>\n    \n    <p>上記は郵便番号が3桁数字-4桁数字の形式になるようにするバリデーションです。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>マイグレーションの実行</h2>\n    <p>モデルの定義が完了したら、以下のコマンドを実行してデータベースにテーブルを作成します：</p>\n    \n    <div class="code-block">rails db:migrate</div>\n    \n    <p>このコマンドは、まだ実行されていないマイグレーションをすべて実行します。</p>\n    \n    <p>マイグレーションが正常に実行されると、<code>db/schema.rb</code>ファイルが更新され、現在のデータベース構造が反映されます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>マイグレーションの取り消しとリセット</h2>\n    <p>マイグレーションは以前の状態に戻すことができます：</p>\n    \n    <h3>直近のマイグレーションを取り消す</h3>\n    <div class="code-block">rails db:rollback</div>\n    \n    <h3>指定した回数分だけマイグレーションを戻す</h3>\n    <div class="code-block">rails db:rollback STEP=既定の回数</div>\n    \n    <p>例えば、直近の3つのマイグレーションを取り消す場合：</p>\n    <div class="code-block">rails db:rollback STEP=3</div>\n    \n    <h3>すべてのマイグレーションをリセット</h3>\n    <div class="code-block">rails db:migrate:reset</div>\n    \n    <p>このコマンドは、データベースを一度削除し、再作成した後、すべてのマイグレーションを最初から実行します。</p>\n    \n    <div class="note">\n        <p><strong>注意：</strong> <code>rails db:migrate:reset</code>を実行すると、データベース内のすべてのデータが失われます。本番環境では注意して使用してください。</p>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">6</span>コマンドライン引数を使ったモデル生成</h2>\n    <p>モデル生成コマンドに引数を追加することで、フィールドを同時に定義できます：</p>\n    \n    <div class="code-block">rails generate model Company name:string founding_date:date</div>\n    \n    <p>このコマンドを実行すると、nameとfounding_dateフィールドを持つCompanyモデルが生成されます。</p>\n    \n    <p>様々なフィールド型とオプションを指定できます：</p>\n    \n    <div class="code-block">rails g model Product name:string:index price:decimal{8,2} description:text available:boolean</div>\n    \n    <p>上記の例では：</p>\n    <ul>\n        <li><code>name:string:index</code> - インデックス付きの文字列フィールド</li>\n        <li><code>price:decimal{8,2}</code> - 小数点前6桁、小数点後2桁の数値フィールド</li>\n        <li><code>description:text</code> - 長いテキストフィールド</li>\n        <li><code>available:boolean</code> - 真偽値フィールド</li>\n    </ul>\n</div>	2
230	2024-08-16 01:38:17	2025-03-22 20:48:14.46437	4	19	モデルに初期データを入れる	\N	db/seeds.rb	Company.create(name: 'test', founding_date: '2024-8-16')\\nCompany.create(name: 'test2', founding_date: '2024-8-16')	\N	\N	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>シードデータとは</h2>\n    <p>シードデータとは、データベースに初期データを投入するための仕組みです。開発環境やテスト環境でのテストデータや、本番環境で必要な初期データを簡単に設定できます。</p>\n    \n    <p>Railsでは、<code>db/seeds.rb</code>ファイルにシードデータを定義します。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>基本的なシードデータの定義</h2>\n    <p>シードデータを定義するには、<code>db/seeds.rb</code>ファイルに以下の形式で記述します：</p>\n    \n    <div class="code-block">モデル.create(フィールド名: 値)</div>\n    \n    <p>例えば、Companyモデルに初期データを設定する場合：</p>\n    \n    <div class="code-block"># db/seeds.rb<br><br>Company.create(name: "株式会社A", founding_date: Date.new(2010, 4, 1))<br>Company.create(name: "株式会社B", founding_date: Date.new(2015, 7, 15))</div>\n    \n    <p>上の例ではCompanyモデルに2つの初期データを入れている例となります。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>シードデータの実行</h2>\n    <p>定義したシードデータをデータベースに投入するには、プロジェクトのルートディレクトリで以下のコマンドを実行します：</p>\n    \n    <div class="code-block">rails db:seed</div>\n    \n    <p>データベースの作成、マイグレーション、シードデータの投入を一度に行いたい場合は：</p>\n    \n    <div class="code-block">rails db:setup</div>\n    \n    <p>また、データベースをリセットしてシードデータを再投入したい場合は：</p>\n    \n    <div class="code-block">rails db:reset</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>複数のレコードを一度に作成</h2>\n    <p>複数のレコードを一度に作成するには、<code>create</code>メソッドに配列を渡すことができます：</p>\n    \n    <div class="code-block"># db/seeds.rb<br><br>User.create([<br>  { name: "田中太郎", email: "tanaka@example.com", age: 28 },<br>  { name: "佐藤次郎", email: "sato@example.com", age: 35 },<br>  { name: "鈴木花子", email: "suzuki@example.com", age: 24 }<br>])</div>\n    \n    <p>もしくは<code>each</code>を使って繰り返し処理を行うことも可能です：</p>\n    \n    <div class="code-block"># db/seeds.rb<br><br>product_names = ["製品A", "製品B", "製品C", "製品D"]<br><br>product_names.each do |name|<br>  Product.create(<br>    name: name,<br>    price: rand(1000..5000),<br>    description: "#{name}の説明文です。"<br>  )<br>end</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>関連するモデルのシードデータ</h2>\n    <p>関連するモデル間でのシードデータを作成する例：</p>\n    \n    <div class="code-block"># db/seeds.rb<br><br># 会社データの作成<br>company1 = Company.create(name: "株式会社A", founding_date: Date.new(2010, 4, 1))<br>company2 = Company.create(name: "株式会社B", founding_date: Date.new(2015, 7, 15))<br><br># 社員データの作成（会社との関連付け）<br>Employee.create(<br>  name: "山田太郎",<br>  email: "yamada@example.com",<br>  age: 32,<br>  company: company1  # 関連付け<br>)<br><br>Employee.create(<br>  name: "佐藤花子",<br>  email: "sato@example.com",<br>  age: 28,<br>  company: company1  # 関連付け<br>)<br><br>Employee.create(<br>  name: "鈴木一郎",<br>  email: "suzuki@example.com",<br>  age: 45,<br>  company: company2  # 関連付け<br>)</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">6</span>既存データの削除</h2>\n    <p>シードデータを実行する前に、既存のデータを削除したい場合：</p>\n    \n    <div class="code-block"># db/seeds.rb<br><br># 既存データの削除<br>Company.destroy_all<br>Employee.destroy_all<br><br># シードデータの投入<br>company = Company.create(name: "新会社", founding_date: Date.today)<br># ...</div>\n    \n    <p>依存関係がある場合は、削除する順序に注意してください。通常は子モデルから削除します。</p>\n    \n    <div class="note">\n        <p><strong>注意：</strong> <code>destroy_all</code>メソッドは全てのレコードを削除します。本番環境でこれを実行すると重大な問題を引き起こす可能性があります。開発環境でのみ使用するか、対象を限定して使用してください。</p>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">7</span>環境ごとに異なるシードデータ</h2>\n    <p>開発環境とテスト環境で異なるシードデータを使用したい場合は、環境変数を確認することができます：</p>\n    \n    <div class="code-block"># db/seeds.rb<br><br>if Rails.env.development?<br>  # 開発環境用のシードデータ<br>  puts "開発環境用のシードデータを作成します..."<br>  # 多くのテストデータを作成<br>  50.times do |i|<br>    User.create(name: "ユーザー#{i}", email: "user#{i}@example.com")<br>  end<br>elsif Rails.env.production?<br>  # 本番環境用のシードデータ<br>  puts "本番環境用のシードデータを作成します..."<br>  # 必要最小限のデータのみ作成<br>  Admin.create(name: "管理者", email: "admin@example.com", password: ENV['ADMIN_PASSWORD'])<br>end</div>\n    \n    <p>また、環境ごとに別々のシードファイルを作成して、<code>load</code>メソッドで読み込むこともできます：</p>\n    \n    <div class="code-block"># db/seeds.rb<br><br>case Rails.env<br>when "development"<br>  load "#{Rails.root}/db/seeds/development.rb"<br>when "test"<br>  load "#{Rails.root}/db/seeds/test.rb"<br>when "production"<br>  load "#{Rails.root}/db/seeds/production.rb"<br>end</div>\n</div>	3
233	2024-08-16 05:33:26	2024-08-16 05:38:43	1	3	ボタンなどのブラウザでの標準の動作を停止する	\N	HTML	<form id="test">\\n    <button id="submit">送信</button>\\n</form>	Javascript	const submitButton = document.getElementById('submit')\\nsubmitButton.addEventListener('click', function(e){\\n    e.preventDefault()\\n})	\N	\N	上の例では、submitをクリックすると本来はページ移動が発生しますが、その動作を行わないようにしています。<br><br>ブラウザでの標準の動作を停止させるには、addEventListenerの関数内に<br><div class="code-block">引数.preventDefault()</div><br>と記入します。<br>addEventListenerの関数の引数は、ボタンをクリックした動作が代入されています。	23
234	2024-08-16 06:19:22	2024-08-21 05:18:35	1	3	Ajaxでサーバーサイドにデータを送る	\N	Javascript	fetch('/', {\\n    method: 'POST',\\n    headers: {\\n        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content'),\\n        'Accept': 'application/json',\\n        'X-Requested-With': 'XMLHttpRequest'\\n    },\\n    body: {name: 'test'}\\n})\\n.then(response => {\\n    if (response.ok) {\\n        return response.json();\\n    } else {\\n        throw new Error("通信に失敗しました。");\\n    }\\n})\\n.then(data => {\\n    console.log(data);\\n})\\n.catch(error => {\\n    console.error('エラー:', error);\\n});	\N	\N	\N	\N	上の例は、自分のドメインのルートにPOSTメソッドで{name: 'test'}のjson型のデータを送っている例です。<br><br><div class="code-block">fetch('データを送るURL', {<br>    method: 'データを送るメソッド',<br>    headers: {<br>        ヘッダーの内容<br>    },<br>    body: データを送る内容をjson形式で記入<br>})</div><br>のように記入します。<br>サーバーサイドから返ってきたデータに対して処理を行うときは<br><div class="code-block">.then(サーバーサイドから受け取った値を代入する変数 => {<br>    処理<br>})<br>.catch( サーバーサイドからのエラーメッセージを代入する変数 => {<br>   エラー時の処理<br>})</div><br>の形式で記入します。<br>.thenは複数つなげて記入することもできます。<br><br>上の例では、1度目のthenで<br><div class="code-block">.then(response => {<br>    if (response.ok) {<br>        return response.json();<br>    } else {<br>        throw new Error("通信に失敗しました。");<br>    }<br>})</div><br>とし、サーバーサイドから正しくデータが返ってきたときにreturn response.json()でサーバーサイドから受け取った値をjson形式にしています。<br><br>次のthenでは引数をdataにし、コンソールログに出力しています。<br>ここでのdataには前のthenでの戻り値であるresponse.json()が代入されています。<br><br>	24
235	2024-08-16 06:44:06	2025-03-22 20:49:13.261632	4	19	モデル同士の紐づけ	\N	db/migrate/内にできたファイル	class CreateEmployees < ActiveRecord::Migration[7.1]\\n  def change\\n    create_table :employees do |t|\\n      t.text :name, null: false\\n      t.integer :age\\n      t.text :post, null: false\\n      t.text :address, null: false\\n      t.text :phone, null: false\\n      t.references :company, null: false, foreign_key: true\\n      t.timestamps\\n    end\\n  end\\nend	app/models/employee.rb	class Employee < ApplicationRecord\\n  belongs_to :company\\n\\n  validates :name, presence: true\\n  validates :post, presence: true\\n  validates :address, presence: true\\n  validates :phone, presence: true\\nend	app/models/company.rb	class Company < ApplicationRecord\\n  has_many :employee\\n\\n  validates :name, presence: true\\nend	<div class="step">\n    <h2><span class="step-number">1</span>リレーションシップの基本</h2>\n    <p>データベースモデル間の関連付け（リレーションシップ）は、Railsアプリケーションの重要な要素です。主なリレーションシップには「一対多」と「一対一」があります。</p>\n    \n    <p>上の例は、employeeが多、companyが1の「一対多」の関係でリレーションを設定している例です。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>一対多（1:n）のリレーション設定</h2>\n    <p>一対多の関係では、一方のモデル（「1側」）は複数の他方のモデル（「多側」）と関連付けられます。例えば、一つの会社（Company）が複数の従業員（Employee）を持つ場合です。</p>\n    \n    <h3>マイグレーションファイルでの設定</h3>\n    <p>多側のモデル（Employee）のマイグレーションファイルに外部キーを追加します：</p>\n    \n    <div class="code-block"># db/migrate/YYYYMMDDHHMMSS_create_employees.rb<br>class CreateEmployees < ActiveRecord::Migration[7.0]<br>  def change<br>    create_table :employees do |t|<br>      t.string :name<br>      t.string :email<br>      t.integer :age<br>      t.references :company, foreign_key: true  # 外部キー<br><br>      t.timestamps<br>    end<br>  end<br>end</div>\n    \n    <p><code>t.references :company, foreign_key: true</code>の部分で、<code>employees</code>テーブルに<code>company_id</code>という外部キーフィールドが追加されます。</p>\n    \n    <h3>モデルファイルでの設定</h3>\n    <p>多側のモデル（Employee）には<code>belongs_to</code>を設定します：</p>\n    \n    <div class="code-block"># app/models/employee.rb<br>class Employee < ApplicationRecord<br>  belongs_to :company<br>end</div>\n    \n    <p>1側のモデル（Company）には<code>has_many</code>を設定します：</p>\n    \n    <div class="code-block"># app/models/company.rb<br>class Company < ApplicationRecord<br>  has_many :employees<br>end</div>\n    \n    <p><strong>注意：</strong> <code>has_many</code>の後は複数形になることに注意してください。上記の例では<code>:employees</code>となっています。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>一対一（1:1）のリレーション設定</h2>\n    <p>一対一の関係では、あるモデルのインスタンスが別のモデルの単一のインスタンスとのみ関連付けられます。例えば、ユーザー（User）とプロフィール（Profile）の関係などです。</p>\n    \n    <h3>マイグレーションファイルでの設定</h3>\n    <p>外部キーを持つ側のマイグレーションファイルに外部キーを追加します：</p>\n    \n    <div class="code-block"># db/migrate/YYYYMMDDHHMMSS_create_profiles.rb<br>class CreateProfiles < ActiveRecord::Migration[7.0]<br>  def change<br>    create_table :profiles do |t|<br>      t.text :bio<br>      t.string :website<br>      t.references :user, foreign_key: true  # 外部キー<br><br>      t.timestamps<br>    end<br>  end<br>end</div>\n    \n    <h3>モデルファイルでの設定</h3>\n    <p>外部キーを持つ側のモデル（Profile）には<code>belongs_to</code>を設定します：</p>\n    \n    <div class="code-block"># app/models/profile.rb<br>class Profile < ApplicationRecord<br>  belongs_to :user<br>end</div>\n    \n    <p>関連付ける側のモデル（User）には<code>has_one</code>を設定します：</p>\n    \n    <div class="code-block"># app/models/user.rb<br>class User < ApplicationRecord<br>  has_one :profile<br>end</div>\n    \n    <p>一対一の関係では、<code>has_one</code>を使用することに注意してください。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>リレーションシップの使用例</h2>\n    <p>設定したリレーションシップを使用して、関連するデータにアクセスする方法：</p>\n    \n    <h3>一対多の使用例</h3>\n    <div class="code-block"># 会社を取得<br>company = Company.find(1)<br><br># その会社の全従業員を取得<br>employees = company.employees<br><br># 従業員を取得<br>employee = Employee.find(1)<br><br># その従業員の会社を取得<br>company = employee.company</div>\n    \n    <h3>一対一の使用例</h3>\n    <div class="code-block"># ユーザーを取得<br>user = User.find(1)<br><br># そのユーザーのプロフィールを取得<br>profile = user.profile<br><br># プロフィールを取得<br>profile = Profile.find(1)<br><br># そのプロフィールのユーザーを取得<br>user = profile.user</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>関連レコードの作成</h2>\n    <p>リレーションシップを利用して関連レコードを作成する方法：</p>\n    \n    <h3>一対多の関連レコード作成</h3>\n    <div class="code-block"># 既存の会社に従業員を追加<br>company = Company.find(1)<br><br># 方法1<br>employee = company.employees.create(name: "田中太郎", email: "tanaka@example.com")<br><br># 方法2<br>employee = Employee.new(name: "佐藤花子", email: "sato@example.com")<br>employee.company = company<br>employee.save</div>\n    \n    <h3>一対一の関連レコード作成</h3>\n    <div class="code-block"># 既存のユーザーにプロフィールを追加<br>user = User.find(1)<br><br># 方法1<br>profile = user.create_profile(bio: "エンジニアです", website: "https://example.com")<br><br># 方法2<br>profile = Profile.new(bio: "デザイナーです", website: "https://example.org")<br>profile.user = user<br>profile.save</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">6</span>依存関係の設定</h2>\n    <p>関連レコードの削除動作を制御するために、依存関係を設定できます：</p>\n    \n    <div class="code-block"># 会社が削除されたとき、関連する従業員も削除する<br>class Company < ApplicationRecord<br>  has_many :employees, dependent: :destroy<br>end<br><br># ユーザーが削除されたとき、関連するプロフィールも削除する<br>class User < ApplicationRecord<br>  has_one :profile, dependent: :destroy<br>end</div>\n    \n    <p>主な<code>dependent</code>オプション：</p>\n    <ul>\n        <li><code>:destroy</code> - 関連するレコードに対して<code>destroy</code>メソッドを呼び出す</li>\n        <li><code>:delete_all</code> - 関連するレコードをSQLで直接削除（コールバックは実行されない）</li>\n        <li><code>:nullify</code> - 外部キーをnullに設定（関連を解除するだけで削除はしない）</li>\n        <li><code>:restrict_with_exception</code> - 関連レコードが存在する場合に例外を発生させる</li>\n        <li><code>:restrict_with_error</code> - 関連レコードが存在する場合にエラーを追加する</li>\n    </ul>\n</div>	4
232	2024-08-16 05:03:54	2025-03-22 20:28:45.589486	4	18	入力フォームから値を受け取りJSON形式で値を返す	\N	app/controllers/test_controller.rb	class TestController < ApplicationController\\n  def index\\n  end\\n\\n  def post\\n    name = params[:name]\\n    render json:{success: true, message: name}\\n  end\\nend	app/views/test/index.html.erb	<form id="company">\\n    <label for="name">名前</label>\\n    <input type="text" name="name" id="name">\\n    <button id="submit">送信</button>\\n</form>\\n\\n<script>\\n    document.getElementById('submit').addEventListener('click', function(event) {\\n        event.preventDefault();\\n        const formData = new FormData(document.getElementById('company'));\\n\\n        fetch('/', {\\n            method: 'POST',\\n            headers: {\\n                'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content'),\\n                'Accept': 'application/json',\\n                'X-Requested-With': 'XMLHttpRequest'\\n            },\\n            body: formData\\n        })\\n        .then(response => {\\n            if (response.ok) {\\n                return response.json();\\n            } else {\\n                throw new Error("通信に失敗しました。");\\n            }\\n        })\\n        .then(data => {\\n            console.log(data);\\n        })\\n        .catch(error => {\\n            console.error('エラー:', error);\\n        });\\n    });\\n</script>	config/routes.rb	Rails.application.routes.draw do\\n  get "/" => "test#index"\\n  post "/" => "test#post"\\nend	<div class="step">\n    <h2><span class="step-number">1</span>ルーティングの設定</h2>\n    <p>まず、POSTリクエストを処理するルートを設定します。config/routes.rbファイルで以下のように記述します：</p>\n    \n    <div class="code-block">Rails.application.routes.draw do<br>    post "/" => "test#post"<br>end</div>\n    \n    <p>この設定により、ルートURL（/）にPOSTメソッドでリクエストが送信されると、TestControllerのpostメソッドが実行されるようになります。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>コントローラーの実装</h2>\n    <p>次に、TestControllerにpostメソッドを実装します：</p>\n    \n    <div class="code-block">class TestController < ApplicationController<br>    # CSRFトークン検証をスキップする（APIとして使用する場合）<br>    skip_before_action :verify_authenticity_token, only: [:post]<br>    <br>    def post<br>        # フォームからの入力値を取得<br>        name = params[:name]<br>        email = params[:email]<br>        age = params[:age]<br>        <br>        # コンソールにログ出力（デバッグ用）<br>        Rails.logger.info("受信データ: name=#{name}, email=#{email}, age=#{age}")<br>        <br>        # JSON形式でレスポンスを返す<br>        render json: {<br>            status: "success",<br>            data: {<br>                name: name,<br>                email: email,<br>                age: age<br>            },<br>            message: "データが正常に処理されました"<br>        }<br>    end<br>end</div>\n    \n    <p>このコントローラーでは、以下の処理を行っています：</p>\n    <ol>\n        <li>フォームから送信された値を<code>params</code>ハッシュから取得</li>\n        <li>受け取ったデータをログに出力（デバッグ用）</li>\n        <li>JSON形式でクライアントにレスポンスを返す</li>\n    </ol>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>フォームデータの受け取り方</h2>\n    <p>コントローラーで入力フォームからの値を受け取るには、以下の形式で記述します：</p>\n    \n    <div class="code-block">params[:インプットのname属性]</div>\n    \n    <p>例えば、HTMLフォームが以下のようになっている場合：</p>\n    \n    <div class="code-block">&lt;form&gt;<br>    &lt;input type="text" name="user[name]"&gt;<br>    &lt;input type="email" name="user[email]"&gt;<br>    &lt;input type="submit" value="送信"&gt;<br>&lt;/form&gt;</div>\n    \n    <p>コントローラーでは以下のように値を取得できます：</p>\n    \n    <div class="code-block">user_name = params[:user][:name]<br>user_email = params[:user][:email]</div>\n    \n    <p>また、ネストしていないシンプルなフォームの場合：</p>\n    \n    <div class="code-block">&lt;form&gt;<br>    &lt;input type="text" name="name"&gt;<br>    &lt;input type="email" name="email"&gt;<br>    &lt;input type="submit" value="送信"&gt;<br>&lt;/form&gt;</div>\n    \n    <p>コントローラーでは以下のように取得します：</p>\n    \n    <div class="code-block">name = params[:name]<br>email = params[:email]</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>JSON形式でのレスポンス</h2>\n    <p>JSONレスポンスを返すには、以下の形式で記述します：</p>\n    \n    <div class="code-block">render json: {キー: 値}</div>\n    \n    <p>例：</p>\n    \n    <div class="code-block">render json: {<br>    status: "success",<br>    message: "データが保存されました",<br>    data: {<br>        id: @user.id,<br>        name: @user.name<br>    }<br>}</div>\n    \n    <p>ステータスコードも一緒に指定できます：</p>\n    \n    <div class="code-block">render json: { error: "データが見つかりません" }, status: :not_found  # 404</div>\n    \n    <p>一般的なHTTPステータスコード：</p>\n    <ul>\n        <li><code>:ok</code> - 200 (成功)</li>\n        <li><code>:created</code> - 201 (作成成功)</li>\n        <li><code>:bad_request</code> - 400 (不正なリクエスト)</li>\n        <li><code>:unauthorized</code> - 401 (認証エラー)</li>\n        <li><code>:forbidden</code> - 403 (禁止)</li>\n        <li><code>:not_found</code> - 404 (見つからない)</li>\n        <li><code>:unprocessable_entity</code> - 422 (処理できないエンティティ)</li>\n        <li><code>:internal_server_error</code> - 500 (サーバーエラー)</li>\n    </ul>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>エラー処理</h2>\n    <p>バリデーションエラーなどを処理する例：</p>\n    \n    <div class="code-block">def create<br>    @user = User.new(user_params)<br>    <br>    if @user.save<br>        render json: {<br>            status: "success",<br>            message: "ユーザーが正常に作成されました",<br>            data: { id: @user.id, name: @user.name }<br>        }<br>    else<br>        render json: {<br>            status: "error",<br>            message: "ユーザーの作成に失敗しました",<br>            errors: @user.errors.full_messages<br>        }, status: :unprocessable_entity<br>    end<br>end<br><br>private<br><br>def user_params<br>    params.require(:user).permit(:name, :email, :age)<br>end</div>\n    \n    <div class="note">\n        <p><strong>注意：</strong> 実際のアプリケーションでは、Strong Parametersを使用して許可されたパラメータのみを受け入れるようにすることが重要です。</p>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">6</span>Ajax通信との組み合わせ</h2>\n    <p>このページではビューでの内容の説明は省略しますが、Ajaxでのサーバーサイドへのデータ送信の記事はプログラミング基礎のJavascriptを参考にしてください。</p>\n    \n    <p>クライアント側のJavaScriptでの基本的なAjax通信の例：</p>\n    \n    <div class="code-block">// Fetchを使用した例<br>fetch('/', {<br>    method: 'POST',<br>    headers: {<br>        'Content-Type': 'application/json',<br>        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content<br>    },<br>    body: JSON.stringify({<br>        name: 'John Doe',<br>        email: 'john@example.com',<br>        age: 30<br>    })<br>})<br>.then(response => response.json())<br>.then(data => {<br>    console.log('Success:', data);<br>})<br>.catch(error => {<br>    console.error('Error:', error);<br>});</div>\n    \n    <div class="note">\n        <p><strong>注意：</strong> Railsでは、CSRFトークンの検証がデフォルトで有効になっています。Ajax通信を使用する場合は、CSRFトークンをリクエストヘッダーに含める必要があります。</p>\n    </div>\n</div>	11
261	2024-08-21 05:36:25	2025-03-22 20:40:27.380565	4	18	任意のコントローラーすべてで使用できるメソッドなどを定義する	\N	app/controllers/test	class Test < ApplicationController\\n  before_action :set_test\\n\\n  def set_test\\n    @test = "test"\\n  end\\nend	app/controllers/test_controller.rb	class TestController < Test\\n  def index\\n  end\\nend	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>コントローラー継承の基本</h2>\n    <p>Ruby on Railsでは、コントローラーの継承関係を活用して、特定のコントローラーグループでのみ共通の機能や処理を共有することができます。</p>\n    \n    <p>ApplicationControllerを継承させた独自のクラスを作成し、コントローラーにそのクラスを継承させることで、そのクラスを継承するコントローラー間での共通処理を実装できます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>継承階層の作成</h2>\n    <p>まず、ApplicationControllerを継承した基底クラスを作成します：</p>\n    \n    <div class="code-block"># app/controllers/test_controller.rb<br>class TestController < ApplicationController<br>    before_action :set_common_variable<br>    <br>    private<br>    <br>    def set_common_variable<br>        @test_variable = "Test Controller Variable"<br>    end<br>end</div>\n    \n    <p>上の例ではApplicationControllerクラスを継承させたTestControllerクラスを作成し、このクラスを継承する全コントローラー共通の処理を記述しています。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>継承を使った実際の例</h2>\n    <p>次に、作成した基底クラスを継承する実際のコントローラーを作成します：</p>\n    \n    <div class="code-block"># app/controllers/test_posts_controller.rb<br>class TestPostsController < TestController<br>    def index<br>        # @test_variableが利用可能<br>        @posts = Post.all<br>    end<br>    <br>    def show<br>        # @test_variableが利用可能<br>        @post = Post.find(params[:id])<br>    end<br>end<br><br># app/controllers/test_comments_controller.rb<br>class TestCommentsController < TestController<br>    def create<br>        # @test_variableが利用可能<br>        @comment = Comment.new(comment_params)<br>        # 処理内容...        <br>    end<br>end</div>\n    \n    <p>TestPostsControllerとTestCommentsControllerはどちらもTestControllerを継承しているため、TestControllerで定義された共通機能（この例では@test_variable）を利用できます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>実践的な活用例：管理画面機能</h2>\n    <p>実際のアプリケーションでよく使われる例として、管理画面用の基底コントローラーを作成する方法があります：</p>\n    \n    <div class="code-block"># app/controllers/admin_controller.rb<br>class AdminController < ApplicationController<br>    before_action :require_admin<br>    layout 'admin'  # 管理画面用の共通レイアウト<br>    <br>    private<br>    <br>    def require_admin<br>        unless current_user&.admin?<br>            flash[:alert] = "管理者権限が必要です"<br>            redirect_to root_path<br>        end<br>    end<br>    <br>    def admin_activity_log(action)<br>        AdminLog.create(<br>            user: current_user,<br>            action: action,<br>            ip_address: request.remote_ip<br>        )<br>    end<br>end</div>\n    \n    <p>この管理用基底コントローラーを継承した各機能コントローラー：</p>\n    \n    <div class="code-block"># app/controllers/admin/users_controller.rb<br>class Admin::UsersController < AdminController<br>    def index<br>        @users = User.all.order(created_at: :desc)<br>        admin_activity_log("ユーザー一覧を表示")<br>    end<br>    <br>    def edit<br>        @user = User.find(params[:id])<br>        admin_activity_log("ユーザーID:#{@user.id}の編集画面を表示")<br>    end<br>    <br>    # 他のアクション...<br>end<br><br># app/controllers/admin/products_controller.rb<br>class Admin::ProductsController < AdminController<br>    # 同様に管理機能を継承...<br>end</div>\n    \n    <p>この例では、管理画面のすべてのコントローラーが以下の共通機能を持ちます：</p>\n    <ul>\n        <li>管理者であることの認証チェック</li>\n        <li>管理画面用の共通レイアウトの使用</li>\n        <li>管理操作のログ記録機能</li>\n    </ul>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>名前空間とコントローラー継承の組み合わせ</h2>\n    <p>名前空間（namespace）とコントローラー継承を組み合わせることで、関連する機能をより整理して実装できます：</p>\n    \n    <div class="code-block"># config/routes.rb<br>Rails.application.routes.draw do<br>    namespace :api do<br>        namespace :v1 do<br>            resources :posts, :comments<br>        end<br>        <br>        namespace :v2 do<br>            resources :posts, :comments<br>        end<br>    end<br>end<br><br># app/controllers/api/api_controller.rb<br>class Api::ApiController < ApplicationController<br>    skip_before_action :verify_authenticity_token<br>    before_action :authenticate_api_user<br>    <br>    private<br>    <br>    def authenticate_api_user<br>        # APIキー認証などの共通処理<br>    end<br>end<br><br># app/controllers/api/v1/api_v1_controller.rb<br>class Api::V1::ApiV1Controller < Api::ApiController<br>    # APIバージョン1に固有の処理<br>end<br><br># app/controllers/api/v1/posts_controller.rb<br>class Api::V1::PostsController < Api::V1::ApiV1Controller<br>    def index<br>        # APIバージョン1のPOST一覧処理<br>    end<br>end</div>\n    \n    <p>この例では、複数階層の継承を設定しています：</p>\n    <ol>\n        <li>ApplicationController - アプリ全体の共通機能</li>\n        <li>Api::ApiController - API全体の共通機能</li>\n        <li>Api::V1::ApiV1Controller - APIバージョン1の共通機能</li>\n        <li>Api::V1::PostsController - 特定のリソース処理</li>\n    </ol>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">6</span>継承設計のベストプラクティス</h2>\n    <p>コントローラー継承を効果的に活用するためのベストプラクティス：</p>\n    \n    <ol>\n        <li><strong>適切な抽象化レベル：</strong> 共通の機能だけを基底クラスに配置し、具体的な実装は子クラスに任せる</li>\n        <li><strong>単一責任の原則：</strong> 各コントローラークラスは明確に定義された責任を持つべき</li>\n        <li><strong>過度な継承を避ける：</strong> 複雑すぎる継承階層は理解しにくくなるため、必要最小限に</li>\n        <li><strong>共通のメソッド名に注意：</strong> 子クラスでオーバーライドする可能性のあるメソッド名には注意</li>\n        <li><strong>適切な名前空間の使用：</strong> 関連する機能は適切な名前空間でグループ化する</li>\n    </ol>\n    \n    <div class="note">\n        <p><strong>注意：</strong> 継承は強力なツールですが、複雑なアプリケーションでは継承より「コンポジション（構成）」を優先することも検討してください。モジュールを使用して機能を共有する方法も有効です。</p>\n        \n        <div class="code-block"># app/controllers/concerns/authenticatable.rb<br>module Authenticatable<br>    extend ActiveSupport::Concern<br>    <br>    included do<br>        before_action :authenticate_user<br>    end<br>    <br>    private<br>    <br>    def authenticate_user<br>        # 認証処理<br>    end<br>end<br><br># app/controllers/posts_controller.rb<br>class PostsController < ApplicationController<br>    include Authenticatable<br>    # PostsController固有のコード...<br>end</div>\n    </div>\n</div>	19
237	2024-08-16 07:08:07	2025-03-22 20:50:36.537434	4	19	データの追加	\N	app/controllers/test_controller.rb	class TestController < ApplicationController\\n  def index\\n    Company.create(name: 'test', founding_date: '2024-8-16')\\n  end\\nend	\N	\N	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>ORMとは</h2>\n    <p>ORM（Object-Relational Mapping）は、オブジェクト指向プログラミング言語とリレーショナルデータベースの間のデータ変換を行う技術です。Railsでは、ActiveRecordがORMとして機能します。</p>\n    \n    <p>ORMはコントローラーのメソッド内に記入することで、アクセスされたときに動作させることができます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>データの追加方法</h2>\n    <p>Railsのデータベースモデルにデータを追加する方法は主に2つあります：</p>\n    \n    <h3>方法1: createメソッドを使用</h3>\n    <div class="code-block">モデル.create(フィールド名: 値)</div>\n    \n    <p>例：</p>\n    <div class="code-block"># app/controllers/companies_controller.rb<br>def create<br>  Company.create(name: "株式会社Ruby", founding_date: Date.new(2020, 1, 15))<br>  redirect_to companies_path, notice: "会社を追加しました"<br>end</div>\n    \n    <p>上の例ではアクセス時にCompanyモデルにデータを追加しています。</p>\n    \n    <h3>方法2: newとsaveを組み合わせる</h3>\n    <div class="code-block">変数 = モデル.new(フィールド名: 値)<br>変数.save</div>\n    \n    <p>例：</p>\n    <div class="code-block"># app/controllers/companies_controller.rb<br>def create<br>  company = Company.new(name: "株式会社Rails", founding_date: Date.new(2018, 6, 10))<br>  company.save<br>  redirect_to companies_path, notice: "会社を追加しました"<br>end</div>\n    \n    <p>この方法では、saveメソッドを呼び出す前に追加の操作を行うことができます：</p>\n    <div class="code-block">company = Company.new(name: "株式会社Rails")<br>company.founding_date = Date.today  # 追加の値を設定<br>company.save</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>主キー（ID）について</h2>\n    <p>データ追加時には<code>id</code>というフィールドが自動で作成されます。これは重複のない値が連番で振られ、追加されたデータを一意に識別するためのフィールド（主キー）です。</p>\n    \n    <p>例えば、以下のようにして追加されたデータは、自動的にidが1、2、3...と割り当てられます：</p>\n    \n    <div class="code-block">Company.create(name: "会社A")  # id: 1<br>Company.create(name: "会社B")  # id: 2<br>Company.create(name: "会社C")  # id: 3</div>\n    \n    <p>主キーはデータ取得やデータ更新、削除の際に使用されます：</p>\n    <div class="code-block"># idが1の会社を取得<br>company = Company.find(1)<br><br># idが2の会社を更新<br>Company.find(2).update(name: "新しい会社名")<br><br># idが3の会社を削除<br>Company.find(3).destroy</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>バリデーションとエラー処理</h2>\n    <p>データ追加時にバリデーションエラーが発生した場合の処理：</p>\n    \n    <div class="code-block"># app/controllers/companies_controller.rb<br>def create<br>  @company = Company.new(company_params)<br>  <br>  if @company.save<br>    # 保存成功時の処理<br>    redirect_to companies_path, notice: "会社を追加しました"<br>  else<br>    # 保存失敗時の処理<br>    render :new  # 新規作成フォームを再表示<br>  end<br>end<br><br>private<br><br>def company_params<br>  params.require(:company).permit(:name, :founding_date)<br>end</div>\n    \n    <p>newとsaveを分けて使用することで、バリデーションエラーを適切に処理できます。createメソッドを使用する場合も同様の条件分岐が可能です：</p>\n    \n    <div class="code-block">company = Company.create(company_params)<br><br>if company.persisted?<br>  # 保存成功時の処理<br>else<br>  # 保存失敗時の処理<br>end</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>関連するデータの追加</h2>\n    <p>リレーションシップを持つモデル間でのデータ追加：</p>\n    \n    <div class="code-block"># 会社を作成<br>company = Company.create(name: "株式会社Ruby")<br><br># その会社に所属する従業員を作成（方法1）<br>Employee.create(name: "田中太郎", email: "tanaka@example.com", company_id: company.id)<br><br># その会社に所属する従業員を作成（方法2）<br>Employee.create(name: "佐藤花子", email: "sato@example.com", company: company)<br><br># その会社に所属する従業員を作成（方法3）<br>company.employees.create(name: "鈴木一郎", email: "suzuki@example.com")</div>\n    \n    <p>方法3が最も推奨される書き方で、関連付けが明確になります。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">6</span>実践例: フォームからのデータ追加</h2>\n    <p>フォームから送信されたデータをデータベースに追加する一般的な例：</p>\n    \n    <div class="code-block"># app/controllers/companies_controller.rb<br><br>def new<br>  @company = Company.new  # 新規フォーム用のインスタンス<br>end<br><br>def create<br>  # Strong Parametersを使用してセキュアにパラメータを取得<br>  @company = Company.new(company_params)<br>  <br>  if @company.save<br>    redirect_to @company, notice: '会社が正常に作成されました'<br>  else<br>    render :new<br>  end<br>end<br><br>private<br><br>def company_params<br>  params.require(:company).permit(:name, :founding_date, :address, :phone)<br>end</div>\n    \n    <p>対応するビュー（app/views/companies/new.html.erb）：</p>\n    \n    <div class="code-block">&lt;h1&gt;新しい会社&lt;/h1&gt;<br><br>&lt;%= form_with(model: @company, local: true) do |form| %&gt;<br>  &lt;% if @company.errors.any? %&gt;<br>    &lt;div class="error-messages"&gt;<br>      &lt;h2&gt;&lt;%= pluralize(@company.errors.count, "error") %&gt; prohibited this company from being saved:&lt;/h2&gt;<br>      &lt;ul&gt;<br>        &lt;% @company.errors.full_messages.each do |message| %&gt;<br>          &lt;li&gt;&lt;%= message %&gt;&lt;/li&gt;<br>        &lt;% end %&gt;<br>      &lt;/ul&gt;<br>    &lt;/div&gt;<br>  &lt;% end %&gt;<br><br>  &lt;div class="field"&gt;<br>    &lt;%= form.label :name %&gt;<br>    &lt;%= form.text_field :name %&gt;<br>  &lt;/div&gt;<br><br>  &lt;div class="field"&gt;<br>    &lt;%= form.label :founding_date %&gt;<br>    &lt;%= form.date_field :founding_date %&gt;<br>  &lt;/div&gt;<br><br>  &lt;div class="actions"&gt;<br>    &lt;%= form.submit %&gt;<br>  &lt;/div&gt;<br>&lt;% end %&gt;</div>\n</div>	5
240	2024-08-16 13:41:40	2025-03-22 20:57:01.742836	4	19	フィールドの値が一致するデータを取得する(1つだけ)	\N	app/controllers/test_controller.rb	class TestController < ApplicationController\\n  def index\\n    @company = Company.find_by(name: "test")\\n  end\\nend	app/views/test/index.html.erb	<%= @company['name'] %>	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>特定フィールドによるデータ検索</h2>\n    <p>特定のフィールドの値が一致するデータを取得するときは、<code>find_by</code>メソッドを使用します：</p>\n    \n    <div class="code-block">モデル.find_by(フィールド名: 値)</div>\n    \n    <p>例えば、nameフィールドが"test"のCompanyレコードを取得する場合：</p>\n    \n    <div class="code-block"># app/controllers/companies_controller.rb<br>def search<br>  @company = Company.find_by(name: "test")<br>end</div>\n    \n    <p>上の例ではnameフィールドがtestのデータを取得しています。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>find_byの特性と注意点</h2>\n    <p><code>find_by</code>メソッドでは一致するデータが複数あるときは最初の一件のみ取得します。すべての一致するレコードを取得したい場合は、後述の<code>where</code>メソッドを使用する必要があります。</p>\n    \n    <p>また、一致するデータが存在しない場合、<code>find_by</code>は<code>nil</code>を返します（<code>find</code>メソッドが例外を発生させるのと異なります）：</p>\n    \n    <div class="code-block"># app/controllers/companies_controller.rb<br>def search<br>  @company = Company.find_by(name: "存在しない名前")<br>  <br>  if @company.nil?<br>    flash[:alert] = "該当する会社が見つかりません"<br>    redirect_to companies_path<br>  else<br>    # 会社が見つかった場合の処理<br>    render :show<br>  end<br>end</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>複数条件での検索</h2>\n    <p><code>find_by</code>メソッドでは、複数の条件を指定することも可能です：</p>\n    \n    <div class="code-block"># nameが"test"かつfounding_dateが2020年1月1日のデータを検索<br>@company = Company.find_by(name: "test", founding_date: "2020-01-01")</div>\n    \n    <p>これは AND 条件として働き、両方の条件に一致するレコードだけが返されます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>一部一致での検索</h2>\n    <p>文字列の部分一致で検索したい場合は、<code>find_by</code>ではなく<code>where</code>メソッドと<code>LIKE</code>を組み合わせて使用します：</p>\n    \n    <div class="code-block"># "test"を含む名前のレコードを検索<br>@companies = Company.where("name LIKE ?", "%test%")</div>\n    \n    <p>ただし、この方法では複数レコードが返される可能性があるため、<code>@companies</code>を配列として扱う必要があります。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>find_byとwhereの使い分け</h2>\n    <p><code>find_by</code>と<code>where</code>メソッドの違いと使い分け：</p>\n    \n    <div class="code-block"># find_by: 最初の一致レコードのみを返す（単一のオブジェクト）<br>@company = Company.find_by(name: "test")<br>puts @company.name  # 直接アクセス可能<br><br># where: 一致する全レコードを返す（コレクション）<br>@companies = Company.where(name: "test")<br>@companies.each do |company|<br>  puts company.name  # 繰り返し処理が必要<br>end</div>\n    \n    <p>適切な選択基準：</p>\n    <ul>\n        <li><code>find_by</code>: 一意のフィールド（例：email）や、最初の一致だけが必要な場合</li>\n        <li><code>where</code>: 複数の結果を扱う必要がある場合や、追加のクエリチェーン（order, limit など）が必要な場合</li>\n    </ul>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">6</span>find_byでの関連モデル検索</h2>\n    <p>関連モデルのフィールドで検索する場合は、結合（joins）を使用します：</p>\n    \n    <div class="code-block"># 特定の従業員名を持つ最初の会社を検索<br>@company = Company.joins(:employees).find_by("employees.name = ?", "山田太郎")</div>\n    \n    <p>または、関連を使って検索することもできます：</p>\n    \n    <div class="code-block"># 特定の会社名を持つ最初の従業員を検索<br>@company = Company.find_by(name: "テスト株式会社")<br>@employee = @company.employees.find_by(name: "山田太郎")</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">7</span>応用例: 検索フォームの実装</h2>\n    <p>実際のアプリケーションでの検索フォーム実装例：</p>\n    \n    <div class="code-block"># app/controllers/companies_controller.rb<br>def search<br>  @search_term = params[:search]<br>  <br>  if @search_term.present?<br>    @company = Company.find_by(name: @search_term)<br>    <br>    if @company.nil?<br>      # 完全一致で見つからない場合は部分一致で検索<br>      @companies = Company.where("name LIKE ?", "%#{@search_term}%")<br>      <br>      if @companies.any?<br>        flash.now[:notice] = "完全一致する会社は見つかりませんでしたが、類似の会社が見つかりました。"<br>        render :index<br>      else<br>        flash.now[:alert] = "該当する会社が見つかりません。"<br>        render :search<br>      end<br>    else<br>      # 完全一致で見つかった場合<br>      redirect_to company_path(@company)<br>    end<br>  else<br>    flash.now[:alert] = "検索語を入力してください。"<br>    render :search<br>  end<br>end</div>\n    \n    <p>検索フォームのビュー例：</p>\n    \n    <div class="code-block">&lt;!-- app/views/companies/search.html.erb --&gt;<br>&lt;h1&gt;会社検索&lt;/h1&gt;<br><br>&lt;%= form_with url: search_companies_path, method: :get, local: true do |form| %&gt;<br>  &lt;div class="field"&gt;<br>    &lt;%= form.label :search, "会社名" %&gt;<br>    &lt;%= form.text_field :search, value: @search_term %&gt;<br>  &lt;/div&gt;<br><br>  &lt;div class="actions"&gt;<br>    &lt;%= form.submit "検索" %&gt;<br>  &lt;/div&gt;<br>&lt;% end %&gt;</div>\n</div>	8
239	2024-08-16 07:30:31	2025-03-22 20:55:58.557956	4	19	idが一致するデータを取得する	\N	app/controllers/test_controller.rb	class TestController < ApplicationController\\n  def index\\n    @company = Company.find(1)\\n  end\\nend	app/views/test/index.html.erb	<%= @company['name'] %>	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>IDによるデータの取得</h2>\n    <p>特定のIDを持つデータを取得したいときは、<code>find</code>メソッドを使用します：</p>\n    \n    <div class="code-block">モデル.find(id)</div>\n    \n    <p>例えば、IDが1のCompanyレコードを取得する場合：</p>\n    \n    <div class="code-block"># app/controllers/companies_controller.rb<br>def show<br>  @company = Company.find(params[:id])<br>end</div>\n    \n    <p>URLパラメータからIDを取得して、そのIDを持つCompanyレコードを<code>@company</code>変数に代入しています。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>ビューでの単一レコード表示</h2>\n    <p><code>find</code>で取得したデータをビューで表示するときは、データが1件のみになるので繰り返し処理をせずに直接フィールドにアクセスできます：</p>\n    \n    <div class="code-block">&lt;!-- app/views/companies/show.html.erb --&gt;<br>&lt;h1&gt;会社詳細&lt;/h1&gt;<br><br>&lt;p&gt;<br>  &lt;strong&gt;会社名:&lt;/strong&gt;<br>  &lt;%= @company['name'] %&gt;<br>&lt;/p&gt;<br><br>&lt;p&gt;<br>  &lt;strong&gt;設立日:&lt;/strong&gt;<br>  &lt;%= @company['founding_date'] %&gt;<br>&lt;/p&gt;<br><br>&lt;%= link_to '編集', edit_company_path(@company) %&gt; |<br>&lt;%= link_to '戻る', companies_path %&gt;</div>\n    \n    <p>上記のように、<code>@company['フィールド名']</code>の形式で各フィールドの値を取得できます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>ドット表記法の使用</h2>\n    <p>Railsでは、ハッシュ記法（<code>['フィールド名']</code>）だけでなく、ドット表記法（<code>.フィールド名</code>）でもフィールドにアクセスできます：</p>\n    \n    <div class="code-block">&lt;!-- app/views/companies/show.html.erb --&gt;<br>&lt;p&gt;<br>  &lt;strong&gt;会社名:&lt;/strong&gt;<br>  &lt;%= @company.name %&gt;<br>&lt;/p&gt;<br><br>&lt;p&gt;<br>  &lt;strong&gt;設立日:&lt;/strong&gt;<br>  &lt;%= @company.founding_date %&gt;<br>&lt;/p&gt;</div>\n    \n    <p>ドット表記法の方がよりオブジェクト指向的で、Railsでは一般的に使用されています。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>存在しないIDの処理</h2>\n    <p>存在しないIDで<code>find</code>メソッドを呼び出すと、<code>ActiveRecord::RecordNotFound</code>例外が発生します。これを適切に処理するには：</p>\n    \n    <div class="code-block"># app/controllers/companies_controller.rb<br>def show<br>  begin<br>    @company = Company.find(params[:id])<br>  rescue ActiveRecord::RecordNotFound<br>    flash[:alert] = "指定された会社は存在しません"<br>    redirect_to companies_path<br>  end<br>end</div>\n    \n    <p>または、例外が発生しない<code>find_by</code>メソッドを使用する方法もあります：</p>\n    \n    <div class="code-block"># app/controllers/companies_controller.rb<br>def show<br>  @company = Company.find_by(id: params[:id])<br>  <br>  if @company.nil?<br>    flash[:alert] = "指定された会社は存在しません"<br>    redirect_to companies_path<br>  end<br>end</div>\n</div>	7
241	2024-08-16 14:11:06	2025-03-22 20:59:05.05368	4	19	条件に一致するデータを取得する(複数)	\N	app/controllers/test_controller.rb	class TestController < ApplicationController\\n  def index\\n    @persons = Person.where(age: 20)\\n  end\\nend	app/views/test/index.html.erb	<table>\\n    <th>名前</th>\\n    <th>年齢</th>\\n    <% @persons.each do |person| %>\\n        <tr id="<%= person['id'] %>">\\n            <td><%= person['name'] %></td>\\n            <td><%= person['age'] %></td>\\n        </tr>\\n    <% end %>\\n</table>	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>複数データの条件付き取得</h2>\n    <p>条件に一致する複数のデータを取得したいときは、<code>where</code>メソッドを使用します：</p>\n    \n    <div class="code-block">モデル.where(フィールド: 値)</div>\n    \n    <p>例えば、nameフィールドが"test"である全てのPersonレコードを取得する場合：</p>\n    \n    <div class="code-block"># app/controllers/people_controller.rb<br>def index<br>  @persons = Person.where(name: "test")<br>end</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>whereの結果の処理</h2>\n    <p><code>where</code>メソッドで取得したデータは複数のレコードを含むコレクションとなるため、ビューでは<code>each</code>文などを使って繰り返し処理を行う必要があります：</p>\n    \n    <div class="code-block">&lt;!-- app/views/people/index.html.erb --&gt;<br>&lt;table&gt;<br>  &lt;thead&gt;<br>    &lt;tr&gt;<br>      &lt;th&gt;ID&lt;/th&gt;<br>      &lt;th&gt;名前&lt;/th&gt;<br>      &lt;th&gt;年齢&lt;/th&gt;<br>    &lt;/tr&gt;<br>  &lt;/thead&gt;<br>  &lt;tbody&gt;<br>    &lt;% @persons.each do |person| %&gt;<br>      &lt;tr id="&lt;%= person.id %&gt;"&gt;<br>        &lt;td&gt;&lt;%= person.id %&gt;&lt;/td&gt;<br>        &lt;td&gt;&lt;%= person.name %&gt;&lt;/td&gt;<br>        &lt;td&gt;&lt;%= person.age %&gt;&lt;/td&gt;<br>      &lt;/tr&gt;<br>    &lt;% end %&gt;<br>  &lt;/tbody&gt;<br>&lt;/table&gt;</div>\n    \n    <p>上の例ではテーブルの行のidをデータのidにしてそれぞれname属性、age属性を表として表示しています。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>比較演算子を使った条件指定</h2>\n    <p><code>where</code>メソッドでは、等価比較だけでなく、より大きい（&gt;）、より小さい（&lt;）などの比較演算子も使用できます：</p>\n    \n    <div class="code-block"># 年齢が20以上のデータを取得<br>@persons = Person.where("age >= 20")</div>\n    \n    <p>このように、SQL文字列を直接<code>where</code>メソッドに渡すことで、より複雑な条件を指定できます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>変数を使った動的条件</h2>\n    <p>変数の値と比較してデータを取得したい場合は、プレースホルダ（?）を使用します：</p>\n    \n    <div class="code-block">age = 20<br>@persons = Person.where("age >= ?", age)</div>\n    \n    <p>この方法では、<code>age >= ?</code>の<code>?</code>の部分に、<code>where</code>メソッドの第2引数の<code>age</code>の値が代入されて処理が行われます。</p>\n    \n    <p>これはSQL文で変数を安全に使用するための方法で、SQLインジェクション攻撃を防ぐために重要です。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>複数の条件を組み合わせる（AND条件）</h2>\n    <p>複数の条件に全て一致するデータを取得するには、AND演算子を使用します：</p>\n    \n    <div class="code-block">row = 20<br>name = 'test'<br>@persons = Person.where("age >= ? and name = ?", row, name)</div>\n    \n    <p>この例では、ageフィールドが20以上かつnameフィールドが"test"のデータを取得します。<code>where</code>メソッド内では<code>?</code>が複数あるときは第2引数から順番に当てはめられていきます。</p>\n    \n    <p>ハッシュ記法を使用して同様の条件を指定することもできます：</p>\n    \n    <div class="code-block">@persons = Person.where(name: 'test').where("age >= ?", 20)</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">6</span>複数の条件を組み合わせる（OR条件）</h2>\n    <p>複数の条件のうち、どれか一つでも一致するデータを取得するには、OR演算子を使用します：</p>\n    \n    <div class="code-block">row = 20<br>high = 30<br>@persons = Person.where("age <= ? or age >= ?", row, high)</div>\n    \n    <p>この例では、ageフィールドが20以下もしくは30以上のデータを取得します。</p>\n    \n    <p>Rails 5以降では、<code>or</code>メソッドを使って同様の条件を指定することもできます：</p>\n    \n    <div class="code-block">@persons = Person.where("age <= ?", 20).or(Person.where("age >= ?", 30))</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">7</span>whereメソッドの応用例</h2>\n    \n    <h3>LIKE検索（部分一致）</h3>\n    <div class="code-block"># 名前に"田中"を含むデータを検索<br>@persons = Person.where("name LIKE ?", "%田中%")</div>\n    \n    <h3>IN検索（複数の値に一致）</h3>\n    <div class="code-block"># 年齢が20, 25, 30のいずれかに一致<br>@persons = Person.where(age: [20, 25, 30])<br><br># または<br>ages = [20, 25, 30]<br>@persons = Person.where("age IN (?)", ages)</div>\n    \n    <h3>NULL値の検索</h3>\n    <div class="code-block"># emailがnullのデータを検索<br>@persons = Person.where(email: nil)<br><br># emailがnullでないデータを検索<br>@persons = Person.where.not(email: nil)</div>\n    \n    <h3>日付範囲の検索</h3>\n    <div class="code-block"># 特定の日付範囲で作成されたデータを検索<br>start_date = Date.new(2023, 1, 1)<br>end_date = Date.new(2023, 12, 31)<br>@persons = Person.where(created_at: start_date..end_date)</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">8</span>whereの結果の順序付けと制限</h2>\n    <p><code>where</code>メソッドと他のクエリメソッドを組み合わせることで、より高度なデータ取得が可能です：</p>\n    \n    <div class="code-block"># 年齢が20以上のデータを名前の昇順で取得<br>@persons = Person.where("age >= ?", 20).order(:name)<br><br># 年齢が20以上のデータを年齢の降順で取得し、最初の10件のみ返す<br>@persons = Person.where("age >= ?", 20).order(age: :desc).limit(10)<br><br># ページネーション（kaminariを使用）<br>@persons = Person.where("age >= ?", 20).order(:name).page(params[:page]).per(15)</div>\n    \n    <p>Railsのクエリメソッドはチェーン可能なので、複数のメソッドを組み合わせて、必要なデータを効率的に取得できます。</p>\n</div>	9
242	2024-08-16 14:36:57	2025-03-22 21:00:17.849616	4	19	データの更新	\N	app/controllers/test_controller.rb	class TestController < ApplicationController\\n  def index\\n    person = Person.find(1)\\n    person.update(name: 'test2', age: 25)\\n  end\\nend	\N	\N	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>データ更新の基本</h2>\n    <p>Railsでデータを更新する基本的な方法は、まず対象のレコードを取得し、それから<code>update</code>メソッドで更新する方法です：</p>\n    \n    <div class="code-block">データを代入した変数.update(フィールド名: 値)</div>\n    \n    <p>例えば、IDが1のPersonレコードを更新する場合：</p>\n    \n    <div class="code-block"># app/controllers/people_controller.rb<br>def update<br>  person = Person.find(1)<br>  person.update(name: "新しい名前", age: 30)<br>  <br>  redirect_to people_path, notice: "更新が完了しました"<br>end</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>複数レコードの一括更新</h2>\n    <p><code>all</code>や<code>where</code>メソッドで複数のデータを変数に代入している場合は、変数に代入されたすべてのデータが更新されます：</p>\n    \n    <div class="code-block"># 全てのPersonレコードの年齢を10増やす<br>people = Person.all<br>people.update_all("age = age + 10")<br><br># 特定の条件に一致するレコードのみ更新<br>young_people = Person.where("age < ?", 20)<br>young_people.update_all(category: "若年層")</div>\n    \n    <p><code>update_all</code>メソッドはSQLを直接実行し、バリデーションなしで一括更新するため、大量のレコードを効率的に更新できます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>属性を個別に設定する方法</h2>\n    <p>単一のレコードを更新する場合は、個々の属性を設定してから<code>save</code>メソッドを呼び出すこともできます：</p>\n    \n    <div class="code-block">person = Person.find(1)<br>person.name = 'test2'<br>person.age = 25<br>person.save</div>\n    \n    <p>この方法は、更新前に追加のロジックを実行する必要がある場合や、条件によって更新する属性が異なる場合に便利です。</p>\n    \n    <div class="code-block"># 条件によって更新内容を変える例<br>person = Person.find(1)<br><br>if params[:promoted]<br>  person.role = "manager"<br>  person.salary = person.salary * 1.2  # 昇進による昇給<br>else<br>  person.role = "staff"<br>end<br><br>person.save</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>updateとsaveの違い</h2>\n    <p><code>update</code>メソッドと<code>save</code>メソッドの主な違い：</p>\n    \n    <table>\n        <tr>\n            <th>メソッド</th>\n            <th>特徴</th>\n            <th>戻り値</th>\n        </tr>\n        <tr>\n            <td>update</td>\n            <td>属性の設定と保存を一度に行う</td>\n            <td>成功時はtrue、失敗時はfalse</td>\n        </tr>\n        <tr>\n            <td>save</td>\n            <td>事前に属性を個別に設定してから保存</td>\n            <td>成功時はtrue、失敗時はfalse</td>\n        </tr>\n        <tr>\n            <td>update!</td>\n            <td>updateと同様だが、失敗時に例外を発生</td>\n            <td>成功時はtrue、失敗時は例外</td>\n        </tr>\n        <tr>\n            <td>save!</td>\n            <td>saveと同様だが、失敗時に例外を発生</td>\n            <td>成功時はtrue、失敗時は例外</td>\n        </tr>\n    </table>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>バリデーションと更新エラー処理</h2>\n    <p>データ更新時にバリデーションエラーが発生した場合の処理：</p>\n    \n    <div class="code-block"># app/controllers/people_controller.rb<br>def update<br>  @person = Person.find(params[:id])<br>  <br>  if @person.update(person_params)<br>    redirect_to @person, notice: "更新が完了しました"<br>  else<br>    # バリデーションエラーが発生した場合<br>    render :edit<br>  end<br>end<br><br>private<br><br>def person_params<br>  params.require(:person).permit(:name, :age, :email)<br>end</div>\n    \n    <p>エラーメッセージをビューで表示する例：</p>\n    \n    <div class="code-block">&lt;!-- app/views/people/edit.html.erb --&gt;<br>&lt;% if @person.errors.any? %&gt;<br>  &lt;div class="error-messages"&gt;<br>    &lt;h2&gt;&lt;%= pluralize(@person.errors.count, "error") %&gt; prohibited this person from being saved:&lt;/h2&gt;<br>    &lt;ul&gt;<br>      &lt;% @person.errors.full_messages.each do |message| %&gt;<br>        &lt;li&gt;&lt;%= message %&gt;&lt;/li&gt;<br>      &lt;% end %&gt;<br>    &lt;/ul&gt;<br>  &lt;/div&gt;<br>&lt;% end %&gt;</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">6</span>実践例: フォームからの更新</h2>\n    <p>フォームからのデータ更新の一般的な実装例：</p>\n    \n    <div class="code-block"># app/controllers/people_controller.rb<br>def edit<br>  @person = Person.find(params[:id])<br>end<br><br>def update<br>  @person = Person.find(params[:id])<br>  <br>  if @person.update(person_params)<br>    redirect_to people_path, notice: "#{@person.name}の情報を更新しました"<br>  else<br>    render :edit<br>  end<br>end</div>\n    \n    <p>対応するビュー（app/views/people/edit.html.erb）：</p>\n    \n    <div class="code-block">&lt;h1&gt;人物情報の編集&lt;/h1&gt;<br><br>&lt;%= form_with(model: @person, local: true) do |form| %&gt;<br>  &lt;% if @person.errors.any? %&gt;<br>    &lt;!-- エラーメッセージ表示 --&gt;<br>  &lt;% end %&gt;<br><br>  &lt;div class="field"&gt;<br>    &lt;%= form.label :name, "名前" %&gt;<br>    &lt;%= form.text_field :name %&gt;<br>  &lt;/div&gt;<br><br>  &lt;div class="field"&gt;<br>    &lt;%= form.label :age, "年齢" %&gt;<br>    &lt;%= form.number_field :age %&gt;<br>  &lt;/div&gt;<br><br>  &lt;div class="actions"&gt;<br>    &lt;%= form.submit "更新" %&gt;<br>  &lt;/div&gt;<br>&lt;% end %&gt;<br><br>&lt;%= link_to '戻る', people_path %&gt;</div>\n</div>	10
243	2024-08-16 16:10:30	2025-03-22 21:01:39.065963	4	19	データの削除	\N	app/controllers/test_controller.rb	class TestController < ApplicationController\\n  def index\\n    person = Person.find(1)\\n    person.destroy\\n  end\\nend	\N	\N	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>データ削除の基本</h2>\n    <p>Railsでデータを削除する基本的な方法は、まず対象のレコードを取得し、それから<code>destroy</code>または<code>delete</code>メソッドを呼び出す方法です：</p>\n    \n    <div class="code-block">データを代入した変数.destroy</div>\n    \n    <p>または：</p>\n    \n    <div class="code-block">データを代入した変数.delete</div>\n    \n    <p>例えば、IDが1のPersonレコードを削除する場合：</p>\n    \n    <div class="code-block"># app/controllers/people_controller.rb<br>def destroy<br>  person = Person.find(1)<br>  person.destroy<br>  <br>  redirect_to people_path, notice: "削除が完了しました"<br>end</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>destroyとdeleteの違い</h2>\n    <p><code>destroy</code>と<code>delete</code>には重要な違いがあります：</p>\n    \n    <table>\n        <tr>\n            <th>機能</th>\n            <th>destroy</th>\n            <th>delete</th>\n        </tr>\n        <tr>\n            <td>関連レコードの扱い</td>\n            <td>1対多の1側を削除時に紐づいた多側のデータも削除される（dependent: :destroyの設定時）</td>\n            <td>1側のデータを削除時にテーブルと紐づいているフィールドの値がそのままになるので整合性が崩れる</td>\n        </tr>\n        <tr>\n            <td>コールバック</td>\n            <td>before_destroy、after_destroyなどのコールバックが呼び出される</td>\n            <td>コールバックが呼び出されない</td>\n        </tr>\n        <tr>\n            <td>バリデーション</td>\n            <td>削除前のバリデーションが実行される</td>\n            <td>バリデーションなしで直接削除される</td>\n        </tr>\n        <tr>\n            <td>SQL実行</td>\n            <td>インスタンスをロードしてからの操作となる</td>\n            <td>直接SQLを実行するため高速</td>\n        </tr>\n    </table>\n    \n    <p><strong>重要：</strong> 迷ったら<code>destroy</code>を使用するのが安全です。<code>delete</code>は多側のデータの削除でコールバックがないときのみ使用するようにしてください。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>複数レコード削除の注意点</h2>\n    <p>updateメソッドとは異なり、<code>where</code>メソッドなどで複数のデータが入った変数に対して<code>destroy</code>や<code>delete</code>を直接呼び出すとエラーとなります：</p>\n    \n    <div class="code-block"># エラーになる例<br>people = Person.where(age: 20)<br>people.destroy  # エラー！</div>\n    \n    <p>複数レコードを削除するには、専用のメソッドを使用する必要があります：</p>\n    \n    <div class="code-block"># 複数レコードの削除（destroy_allはdestroyと同様の特性）<br>Person.where(age: 20).destroy_all<br><br># 複数レコードの削除（delete_allはdeleteと同様の特性）<br>Person.where(age: 20).delete_all</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>関連レコードの削除設定</h2>\n    <p>モデル定義で<code>dependent</code>オプションを設定することで、1側のレコードが削除されたときの多側のレコードの扱いを指定できます：</p>\n    \n    <div class="code-block"># app/models/company.rb<br>class Company < ApplicationRecord<br>  has_many :employees, dependent: :destroy<br>end</div>\n    \n    <p>主な<code>dependent</code>オプションの種類：</p>\n    <ul>\n        <li><code>:destroy</code> - 関連する子レコードに対して<code>destroy</code>メソッドを呼び出す</li>\n        <li><code>:delete_all</code> - 関連する子レコードをSQLで直接削除（コールバックは実行されない）</li>\n        <li><code>:nullify</code> - 外部キーをnullに設定（関連を解除するだけで削除はしない）</li>\n        <li><code>:restrict_with_exception</code> - 関連レコードが存在する場合に例外を発生させる</li>\n        <li><code>:restrict_with_error</code> - 関連レコードが存在する場合にエラーを追加する</li>\n    </ul>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>削除の実践例</h2>\n    <p>実際のコントローラーにおける削除処理の一般的な実装：</p>\n    \n    <div class="code-block"># app/controllers/people_controller.rb<br>def destroy<br>  @person = Person.find(params[:id])<br>  <br>  begin<br>    @person.destroy<br>    redirect_to people_path, notice: "#{@person.name}を削除しました"<br>  rescue StandardError => e<br>    # 削除に失敗した場合（例：dependent: :restrict_with_exceptionの場合など）<br>    redirect_to people_path, alert: "削除に失敗しました: #{e.message}"<br>  end<br>end</div>\n    \n    <p>対応するビューでの削除リンク：</p>\n    \n    <div class="code-block">&lt;!-- app/views/people/index.html.erb --&gt;<br>&lt;% @people.each do |person| %&gt;<br>  &lt;tr&gt;<br>    &lt;td&gt;&lt;%= person.name %&gt;&lt;/td&gt;<br>    &lt;td&gt;&lt;%= person.age %&gt;&lt;/td&gt;<br>    &lt;td&gt;<br>      &lt;%= link_to '詳細', person_path(person) %&gt;<br>      &lt;%= link_to '編集', edit_person_path(person) %&gt;<br>      &lt;%= link_to '削除', person_path(person), <br>            method: :delete, <br>            data: { confirm: '本当に削除しますか？' } %&gt;<br>    &lt;/td&gt;<br>  &lt;/tr&gt;<br>&lt;% end %&gt;</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">6</span>論理削除（ソフトデリート）</h2>\n    <p>レコードを実際に削除せず、削除フラグを立てて非表示にする方法も一般的です。これを「論理削除」または「ソフトデリート」と呼びます：</p>\n    \n    <div class="code-block"># マイグレーションで削除フラグを追加<br>class AddDeletedAtToPeople < ActiveRecord::Migration[6.1]<br>  def change<br>    add_column :people, :deleted_at, :datetime<br>    add_index :people, :deleted_at<br>  end<br>end<br><br># モデルでの実装<br>class Person < ApplicationRecord<br>  # デフォルトのスコープで削除されていないレコードのみ取得<br>  default_scope { where(deleted_at: nil) }<br>  <br>  # 論理削除用のメソッド<br>  def soft_delete<br>    update(deleted_at: Time.current)<br>  end<br><br>  # 削除済みかどうかを確認するメソッド<br>  def deleted?<br>    deleted_at.present?<br>  end<br>end<br><br># コントローラーでの使用例<br>def destroy<br>  @person = Person.find(params[:id])<br>  @person.soft_delete<br>  redirect_to people_path, notice: "#{@person.name}を削除しました"<br>end</div>\n    \n    <p>論理削除を実装するには、<code>acts_as_paranoid</code>や<code>discard</code>などのgemを使用する方法もあります。</p>\n</div>	11
270	2024-08-21 17:39:10	2025-03-23 06:47:41.800956	4	19	最初もしくは最後のデータのみを取得する	\N	app/controllers/test_controller.rb	class TestController < ApplicationController\n   def index\n      @first = Person.where('age >= 20').first\n      @last = Person.where('age >= 20').last\n   end\nend	\N	\N	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>基本的なレコード取得方法</h2>\n    <p>データベースから最初のデータのみを取得するときは、<code>first</code>メソッドを使用します：</p>\n    \n    <div class="code-block">\n        <pre>モデル.first</pre>\n    </div>\n    \n    <p>最後のデータのみを取得するときは、<code>last</code>メソッドを使用します：</p>\n    \n    <div class="code-block">\n        <pre>モデル.last</pre>\n    </div>\n    \n    <p>例えば、Personモデルの最初と最後のレコードを取得する場合：</p>\n    \n    <div class="code-block">\n        <pre>first_person = Person.first  # Personテーブルの最初のレコード\nlast_person = Person.last   # Personテーブルの最後のレコード</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>条件付きでの最初・最後のレコード取得</h2>\n    <p>特定の条件に一致するレコードの中から最初または最後のレコードを取得する場合は、<code>where</code>メソッドと組み合わせて使用します：</p>\n    \n    <div class="code-block">\n        <pre>Person.where("age >= ?", 20).first  # 20歳以上の人の中で最初のレコード\nPerson.where("age >= ?", 20).last   # 20歳以上の人の中で最後のレコード</pre>\n    </div>\n    \n    <p>上の例ではPersonモデルのageフィールドが20以上の最初と最後の一件を取得しています。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>複数のレコードを取得する場合</h2>\n    <p><code>first</code>と<code>last</code>メソッドは、引数に数値を渡すことで複数のレコードを取得することもできます：</p>\n    \n    <div class="code-block">\n        <pre>Person.first(3)  # 最初の3レコードを配列で返す\nPerson.last(5)   # 最後の5レコードを配列で返す\n\n# 条件と組み合わせる場合\nPerson.where("age >= ?", 20).first(3)  # 20歳以上の人の中で最初の3レコード\nPerson.where("age >= ?", 20).last(5)   # 20歳以上の人の中で最後の5レコード</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>ソート順と組み合わせる</h2>\n    <p><code>first</code>と<code>last</code>メソッドは、デフォルトでは主キー（通常はID）の昇順で並べられたデータに対して適用されます。特定のフィールドでソートしたい場合は、<code>order</code>メソッドと組み合わせて使用します：</p>\n    \n    <div class="code-block">\n        <pre># 年齢順で最初と最後\nyoungest_person = Person.order(:age).first  # 年齢が最も若い人\noldest_person = Person.order(:age).last     # 年齢が最も高い人\n\n# 名前のアルファベット順で最初と最後\nfirst_alphabetically = Person.order(:name).first  # 名前が辞書順で最初の人\nlast_alphabetically = Person.order(:name).last    # 名前が辞書順で最後の人</pre>\n    </div>\n    \n    <div class="note">\n        <p><strong>注意：</strong> <code>order</code>を使用しない場合、<code>first</code>は作成順で最初、<code>last</code>は作成順で最後のレコードを返します（通常はIDの昇順）。</p>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>データが存在しない場合の処理</h2>\n    <p>条件に一致するデータが存在しない場合、<code>first</code>と<code>last</code>は<code>nil</code>を返します。これを利用して存在チェックができます：</p>\n    \n    <div class="code-block">\n        <pre># 20歳以上のデータが存在するか確認\nadult = Person.where("age >= ?", 20).first\nif adult\n  # データが存在する場合の処理\nelse\n  # データが存在しない場合の処理\nend</pre>\n    </div>\n    \n    <p>データが存在しない場合にエラーを発生させたい場合は、<code>first!</code>と<code>last!</code>を使用します：</p>\n    \n    <div class="code-block">\n        <pre># データが存在しない場合はActiveRecord::RecordNotFoundエラーが発生\nPerson.where("age >= ?", 100).first!  # 100歳以上のデータがなければエラー</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">6</span>実践的な例</h2>\n    <p>コントローラーでの実際の使用例：</p>\n    \n    <div class="code-block">\n        <pre>class PeopleController < ApplicationController\n  def show_youngest_and_oldest\n    @youngest_adult = Person.where("age >= ?", 20).order(:age).first\n    @oldest_adult = Person.where("age >= ?", 20).order(:age).last\n    \n    # ビューで表示\n    # 最も若い成人: <%= @youngest_adult.name %> (<%= @youngest_adult.age %>歳)\n    # 最も高齢な成人: <%= @oldest_adult.name %> (<%= @oldest_adult.age %>歳)\n  end\n  \n  def show_latest\n    @latest_person = Person.last\n    # 最新の登録者を表示\n  end\nend</pre>\n    </div>\n</div>\n\n<div class="note">\n    <p><strong>補足：</strong></p>\n    <ul>\n        <li>大量のデータを扱う場合、<code>last</code>はパフォーマンスに影響を与える可能性があります。<code>last</code>は内部的にはデータを逆順にソートして<code>first</code>を適用するため、データ量が多い場合は注意が必要です。</li>\n        <li>特定の条件下での最新レコードを頻繁に取得する場合は、該当フィールドにインデックスを作成することでパフォーマンスが向上します。</li>\n        <li>レコードが存在しない場合の処理を適切に行うことで、アプリケーションの堅牢性が高まります。</li>\n    </ul>\n</div>	21
49	2024-06-27 16:51:32	2024-06-27 16:58:30	1	5	文字列の結合	teststring\\nteststring\\ntest1	PHP	<?php\\n   $a = 'test';\\n\\n   echo '<div>test' . 'string</div>';\\n   echo '<div>' . $a . 'string</div>';\\n   echo '<div>test' . 1 .'</div>';	\N	\N	\N	\N	PHPでは.を使用して文字列の結合を行うことができます。<br>数値との結合時には.の前後に半角スペースを入れないとエラーとなるので気を付けてください。	7
50	2024-06-28 02:48:32	2024-06-28 02:49:48	1	5	文字列内での変数展開	teststring	PHP	<?php\\n   $a='string';\\n\\n   echo "test{$a}";	\N	\N	\N	\N	文字列を囲うのを''(シングルクォート)ではなく""(ダブルクォート)に変更し、{$変数名}の形式で文字列に混ぜることで文字列内で変数を展開することができます。	8
244	2024-08-16 16:32:26	2025-03-22 21:03:00.820462	4	19	データを昇順、降順に並び変える	\N	app/controllers/test_controller.rb	class TestController < ApplicationController\\n  def index\\n    @persons = Person.all.order(age: :asc, name: :asc)\\n  end\\nend	\N	\N	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>データ並べ替えの基本</h2>\n    <p>Railsでデータを並べ替えるには、<code>order</code>メソッドを使用します：</p>\n    \n    <div class="code-block">データ.order(フィールド: :ascもしくはdesc)</div>\n    \n    <p>ここで<code>:asc</code>は昇順（小さい値から大きい値）、<code>:desc</code>は降順（大きい値から小さい値）を意味します。</p>\n    \n    <p>例えば、Personモデルのデータを年齢順に並べ替える場合：</p>\n    \n    <div class="code-block"># 年齢の昇順（若い順）<br>@people = Person.all.order(age: :asc)<br><br># 年齢の降順（年配順）<br>@people = Person.all.order(age: :desc)</div>\n    \n    <p>昇順は<code>order</code>メソッドのデフォルトなので、<code>:asc</code>は省略可能です：</p>\n    \n    <div class="code-block"># 省略形（昇順）<br>@people = Person.all.order(:age)</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>複数フィールドでの並べ替え</h2>\n    <p>複数のフィールドで並べ替えるには、カンマ区切りで条件を追加します。これにより、第一引数のフィールドの値が同じだったときの並べ替えルールを指定できます：</p>\n    \n    <div class="code-block"># ハッシュ形式<br>@people = Person.all.order(age: :asc, name: :asc)</div>\n    \n    <p>上の例ではPersonモデルのデータを全件取得し、ageフィールドの昇順で並び替え、ageフィールドが同じだったときはその中でnameフィールドを昇順で並び変えています。</p>\n    \n    <p>同様の並べ替えを文字列形式で記述することもできます：</p>\n    \n    <div class="code-block"># 文字列形式<br>@people = Person.all.order('age, name')</div>\n    \n    <p>この場合も同じ結果になります。デフォルトは昇順なので、<code>ASC</code>キーワードは省略されています。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>文字列形式での並べ替え指定</h2>\n    <p>文字列形式を使用すると、昇順・降順を明示的に指定できます：</p>\n    \n    <div class="code-block"># 年齢は降順、名前は昇順<br>@people = Person.all.order('age DESC, name ASC')<br><br># 両方とも降順<br>@people = Person.all.order('age DESC, name DESC')</div>\n    \n    <p>ハッシュ形式と文字列形式は混在させることも可能です：</p>\n    \n    <div class="code-block"># 複数のorderメソッドを連鎖<br>@people = Person.all.order(age: :desc).order(:name)</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>条件付き検索と並べ替えの組み合わせ</h2>\n    <p><code>where</code>などの条件付き検索メソッドと<code>order</code>を組み合わせることができます：</p>\n    \n    <div class="code-block"># 20歳以上のユーザーを名前順に取得<br>@people = Person.where("age >= ?", 20).order(:name)<br><br># 特定の部署の従業員を年齢の降順、名前の昇順で取得<br>@employees = Employee.where(department_id: 5).order(age: :desc, name: :asc)</div>\n    \n    <p>Railsのクエリメソッドはチェーン可能なので、複数のメソッドを組み合わせて使用できます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>ランダムな並べ替え</h2>\n    <p>レコードをランダムな順序で取得したい場合、データベースに応じた方法があります：</p>\n    \n    <div class="code-block"># MySQL<br>@people = Person.order('RAND()')<br><br># PostgreSQL<br>@people = Person.order('RANDOM()')<br><br># SQLite<br>@people = Person.order('RANDOM()')</div>\n    \n    <p>注意: ランダムな並べ替えはデータベースパフォーマンスに影響する可能性があります。特に大量のレコードがある場合は注意が必要です。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">6</span>関連テーブルのフィールドでの並べ替え</h2>\n    <p>関連テーブルのフィールドで並べ替えるには、<code>joins</code>や<code>includes</code>を使用します：</p>\n    \n    <div class="code-block"># joinsを使用した例（N+1問題が発生する可能性あり）<br>@employees = Employee.joins(:department).order('departments.name, employees.name')<br><br># includesを使用した例（eager loading）<br>@employees = Employee.includes(:department).order('departments.name, employees.name')</div>\n    \n    <p><code>includes</code>はeager loadingを使用するため、多くの場合パフォーマンスが向上します。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">7</span>動的な並べ替え</h2>\n    <p>ユーザーの選択に基づいて動的に並べ替えを変更する例：</p>\n    \n    <div class="code-block"># app/controllers/people_controller.rb<br>def index<br>  @people = Person.all<br>  <br>  # ソート順のパラメータがあれば適用<br>  if params[:sort].present?<br>    direction = params[:direction] == 'desc' ? 'DESC' : 'ASC'<br>    @people = @people.order("#{params[:sort]} #{direction}")<br>  else<br>    # デフォルトの並び順<br>    @people = @people.order(created_at: :desc)<br>  end<br>end</div>\n    \n    <p>対応するビューの例：</p>\n    \n    <div class="code-block">&lt;!-- app/views/people/index.html.erb --&gt;<br>&lt;table&gt;<br>  &lt;thead&gt;<br>    &lt;tr&gt;<br>      &lt;th&gt;<br>        &lt;%= link_to "名前", people_path(sort: "name", direction: params[:sort] == "name" && params[:direction] != "desc" ? "desc" : "asc") %&gt;<br>      &lt;/th&gt;<br>      &lt;th&gt;<br>        &lt;%= link_to "年齢", people_path(sort: "age", direction: params[:sort] == "age" && params[:direction] != "desc" ? "desc" : "asc") %&gt;<br>      &lt;/th&gt;<br>    &lt;/tr&gt;<br>  &lt;/thead&gt;<br>  &lt;tbody&gt;<br>    &lt;% @people.each do |person| %&gt;<br>      &lt;tr&gt;<br>        &lt;td&gt;&lt;%= person.name %&gt;&lt;/td&gt;<br>        &lt;td&gt;&lt;%= person.age %&gt;&lt;/td&gt;<br>      &lt;/tr&gt;<br>    &lt;% end %&gt;<br>  &lt;/tbody&gt;<br>&lt;/table&gt;</div>\n    \n    <p>この例では、列見出しをクリックすると、その列でソートし、再度クリックすると昇順と降順を切り替えます。</p>\n</div>	12
245	2024-08-16 16:45:33	2025-03-22 21:04:12.04687	4	19	指定した範囲のデータを取得する	\N	app/controllers/test_controller.rb	class TestController < ApplicationController\\n  def index\\n    @persons = Person.all.offset(5).limit(5)\\n  end\\nend	\N	\N	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>データ取得件数の制限（limit）</h2>\n    <p>指定した件数分のデータを取得するには、<code>limit</code>メソッドを使用します：</p>\n    \n    <div class="code-block">データ.limit(件数)</div>\n    \n    <p>例えば、Personモデルから最初の5件のみを取得する場合：</p>\n    \n    <div class="code-block">@people = Person.all.limit(5)</div>\n    \n    <p>これにより、クエリの結果が5件に制限されます。</p>\n    \n    <p>並べ替えと組み合わせることで、特定の順序で制限することも可能です：</p>\n    \n    <div class="code-block"># 年齢の高い順に上位5件を取得<br>@oldest_people = Person.order(age: :desc).limit(5)</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>開始位置の指定（offset）</h2>\n    <p>取得するデータの先頭をずらしたいときは、<code>offset</code>メソッドを使用します：</p>\n    \n    <div class="code-block">データ.offset(先頭にしたい要素番号)</div>\n    \n    <p>例えば、Personモデルの6件目以降のデータのみを取得する場合：</p>\n    \n    <div class="code-block">@people = Person.all.offset(5)</div>\n    \n    <p><code>offset(5)</code>と記入すると6件目以降のデータのみ取得します。要素番号は0から始まるので注意してください。</p>\n    \n    <div class="note">\n        <p><strong>注意：</strong> offsetのパラメーターは、「スキップする件数」を意味します。例えば<code>offset(5)</code>は「最初の5件をスキップして、6件目から取得する」ということです。</p>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>limit と offset の組み合わせ</h2>\n    <p><code>limit</code>と<code>offset</code>を組み合わせることで、特定の範囲のデータを取得できます：</p>\n    \n    <div class="code-block">@people = Person.all.offset(5).limit(5)</div>\n    \n    <p>上の例ではoffsetでスタートを6件目にし、そこから先頭の5件を取得しているので6～10件目のデータを取得しています。</p>\n    \n    <p>他の条件と組み合わせる例：</p>\n    \n    <div class="code-block"># 年齢の高い順に、6位から10位までの人物を取得<br>@people = Person.order(age: :desc).offset(5).limit(5)</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>ページネーションでの活用</h2>\n    <p><code>limit</code>と<code>offset</code>はページネーション（ページ分け）の実装に役立ちます：</p>\n    \n    <div class="code-block"># app/controllers/people_controller.rb<br>def index<br>  @page = params[:page].to_i || 1<br>  @per_page = 10<br>  <br>  # ページ番号に基づいてオフセットを計算<br>  offset_value = (@page - 1) * @per_page<br>  <br>  @people = Person.order(:name)<br>                  .offset(offset_value)<br>                  .limit(@per_page)<br>  <br>  # 総件数を取得（ページネーションの表示に使用）<br>  @total_count = Person.count<br>  @total_pages = (@total_count.to_f / @per_page).ceil<br>end</div>\n    \n    <p>対応するビューの例：</p>\n    \n    <div class="code-block">&lt;!-- app/views/people/index.html.erb --&gt;<br>&lt;!-- ユーザー一覧表示 --&gt;<br>&lt;table&gt;<br>  &lt;!-- テーブルヘッダー --&gt;<br>  &lt;tbody&gt;<br>    &lt;% @people.each do |person| %&gt;<br>      &lt;tr&gt;<br>        &lt;td&gt;&lt;%= person.name %&gt;&lt;/td&gt;<br>        &lt;td&gt;&lt;%= person.age %&gt;&lt;/td&gt;<br>      &lt;/tr&gt;<br>    &lt;% end %&gt;<br>  &lt;/tbody&gt;<br>&lt;/table&gt;<br><br>&lt;!-- ページネーションリンク --&gt;<br>&lt;div class="pagination"&gt;<br>  &lt;% if @page > 1 %&gt;<br>    &lt;%= link_to "前へ", people_path(page: @page - 1) %&gt;<br>  &lt;% end %&gt;<br>  <br>  &lt;% (1..@total_pages).each do |page| %&gt;<br>    &lt;% if page == @page %&gt;<br>      &lt;span class="current"&gt;&lt;%= page %&gt;&lt;/span&gt;<br>    &lt;% else %&gt;<br>      &lt;%= link_to page, people_path(page: page) %&gt;<br>    &lt;% end %&gt;<br>  &lt;% end %&gt;<br>  <br>  &lt;% if @page < @total_pages %&gt;<br>    &lt;%= link_to "次へ", people_path(page: @page + 1) %&gt;<br>  &lt;% end %&gt;<br>&lt;/div&gt;</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>ページネーションgemの利用</h2>\n    <p>手動でページネーションを実装する代わりに、<code>kaminari</code>や<code>will_paginate</code>などのgemを使用するとより簡単にページネーションを実装できます：</p>\n    \n    <div class="code-block"># Gemfile<br>gem 'kaminari'<br><br># app/controllers/people_controller.rb<br>def index<br>  @people = Person.order(:name).page(params[:page]).per(10)<br>end</div>\n    \n    <p>対応するビューの例（kaminariを使用）：</p>\n    \n    <div class="code-block">&lt;!-- app/views/people/index.html.erb --&gt;<br>&lt;!-- ユーザー一覧表示 --&gt;<br>&lt;table&gt;<br>  &lt;!-- テーブルの内容 --&gt;<br>&lt;/table&gt;<br><br>&lt;!-- ページネーションリンク（シンプル） --&gt;<br>&lt;%= paginate @people %&gt;<br><br>&lt;!-- または詳細な情報を表示 --&gt;<br>&lt;div class="pagination-info"&gt;<br>  &lt;%= page_entries_info @people %&gt;<br>&lt;/div&gt;</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">6</span>limitとoffsetの注意点</h2>\n    <p><code>limit</code>と<code>offset</code>を使用する際の注意点：</p>\n    \n    <ol>\n        <li><strong>データベースのパフォーマンス：</strong> 大きなオフセット値は、特に大量のデータがある場合にパフォーマンス問題を引き起こす可能性があります。</li>\n        <li><strong>データの一貫性：</strong> ページ間を移動している間にデータが追加または削除されると、一部のレコードが重複して表示されたり、スキップされたりする可能性があります。</li>\n        <li><strong>ソート順の重要性：</strong> ページネーションを使用する場合は、一貫したソート順が重要です。ユニークな値（IDなど）による二次ソートを追加すると良いでしょう。</li>\n    </ol>\n    \n    <p>大量のデータを扱う場合の代替アプローチ：</p>\n    \n    <div class="code-block"># カーソルベースのページネーション<br>@people = Person.where("id > ?", last_seen_id).order(:id).limit(10)</div>\n    \n    <p>このアプローチは「カーソルベースのページネーション」と呼ばれ、多くの場合、オフセットベースのアプローチよりもパフォーマンスが向上します。</p>\n</div>	13
246	2024-08-16 17:03:41	2025-03-23 06:21:25.183014	4	19	スコープの定義	\N	app/models/person.rb	class Person < ApplicationRecord\\n  scope :adult, -> {all.where('age >= 20').order('age')}\\nend	app/controllers/test_controller.rb	class TestController < ApplicationController\\n  def index\\n    @persons = Person.adult\\n  end\\nend	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>モデルスコープとは</h2>\n    <p>Railsのモデルスコープ（scope）は、よく使うクエリ条件をモデル内でメソッドとして定義し、再利用可能にする機能です。これにより、コードの重複を減らし、可読性を向上させることができます。</p>\n    \n    <p>スコープはモデルクラス内で以下の形式で定義します：</p>\n    \n    <div class="code-block">scope :スコープ名, -> {処理内容}</div>\n    \n    <p>定義時にスコープ名の末尾の,（カンマ）を書き忘れないように注意してください。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>基本的なスコープの定義</h2>\n    <p>スコープの定義例：</p>\n    \n    <div class="code-block"># app/models/person.rb<br>class Person < ApplicationRecord<br>  scope :adult, -> { where("age >= ?", 20) }<br>  scope :teen, -> { where(age: 13..19) }<br>  scope :child, -> { where("age < ?", 13) }<br>  scope :recent, -> { order(created_at: :desc) }<br>end</div>\n    \n    <p>上の例では、<code>adult</code>というスコープを定義し、20歳以上の人物を検索する条件を設定しています。同様に、10代（teen）、子供（child）、最近作成された（recent）レコードを取得するスコープも定義しています。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>スコープの使用方法</h2>\n    <p>定義したスコープは、モデルクラスのメソッドのように使用できます：</p>\n    \n    <div class="code-block"># app/controllers/people_controller.rb<br>def index<br>  # 全ての成人を取得<br>  @adults = Person.adult<br>  <br>  # 最近作成された10代を取得<br>  @recent_teens = Person.teen.recent<br>  <br>  # 子供で名前がAで始まる人を取得<br>  @a_children = Person.child.where("name LIKE 'A%'")<br>end</div>\n    \n    <p>このように、スコープは他のActiveRecordメソッドと同様にチェーン可能です。また、他のスコープと組み合わせることもできます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>引数を受け取るスコープ</h2>\n    <p>スコープは引数を受け取ることもできます：</p>\n    \n    <div class="code-block"># app/models/person.rb<br>class Person < ApplicationRecord<br>  scope :older_than, ->(age) { where("age > ?", age) }<br>  scope :named_like, ->(name) { where("name LIKE ?", "%#{name}%") }<br>end</div>\n    \n    <p>引数を持つスコープの使用例：</p>\n    \n    <div class="code-block"># 25歳より上の人を取得<br>@people = Person.older_than(25)<br><br># 「田中」を名前に含む人を取得<br>@tanaka = Person.named_like('田中')</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>デフォルトスコープ</h2>\n    <p>モデルのすべてのクエリに適用されるデフォルトスコープを設定することもできます：</p>\n    \n    <div class="code-block"># app/models/person.rb<br>class Person < ApplicationRecord<br>  default_scope { order(created_at: :desc) }<br>end</div>\n    \n    <p>この例では、<code>Person.all</code>などのクエリは自動的に作成日の降順で並べられます。</p>\n    \n    <div class="note">\n        <p><strong>注意：</strong> デフォルトスコープは慎重に使用してください。予期しない動作を引き起こす可能性があります。特に他の開発者が関わるプロジェクトでは、明示的なスコープの使用が推奨されます。</p>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">6</span>スコープとクラスメソッドの違い</h2>\n    <p>スコープは実質的にはクラスメソッドと同等ですが、より簡潔に記述できます。以下は同等の機能を持つスコープとクラスメソッドの例です：</p>\n    \n    <div class="code-block"># スコープを使用<br>scope :adult, -> { where("age >= ?", 20) }<br><br># 同等のクラスメソッド<br>def self.adult<br>  where("age >= ?", 20)<br>end</div>\n    \n    <p>スコープの主な利点：</p>\n    <ul>\n        <li>常に ActiveRecord::Relation を返すため、チェーン可能性が保証される</li>\n        <li>簡潔な構文</li>\n        <li>デフォルト値が提供される（レコードが見つからない場合、nilではなく空のコレクションを返す）</li>\n    </ul>\n    \n    <p>一方、複雑なロジックが必要な場合はクラスメソッドが適しています。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">7</span>実践的なスコープの例</h2>\n    <p>実際のアプリケーションでよく使われるスコープの例：</p>\n    \n    <div class="code-block"># app/models/article.rb<br>class Article < ApplicationRecord<br>  belongs_to :user<br>  has_many :comments<br>  <br>  # 公開記事のみ<br>  scope :published, -> { where(published: true) }<br>  <br>  # 特定の期間内の記事<br>  scope :published_between, ->(start_date, end_date) {<br>    where(published_at: start_date..end_date)<br>  }<br>  <br>  # 人気記事（コメント数が多い順）<br>  scope :popular, -> {<br>    left_joins(:comments)<br>      .group(:id)<br>      .order('COUNT(comments.id) DESC')<br>  }<br>  <br>  # 今日公開された記事<br>  scope :published_today, -> {<br>    where('DATE(published_at) = ?', Date.current)<br>  }<br>  <br>  # 検索機能<br>  scope :search, ->(query) {<br>    where('title LIKE ? OR content LIKE ?', "%#{query}%", "%#{query}%")<br>  }<br>end</div>\n    \n    <p>コントローラーでの使用例：</p>\n    \n    <div class="code-block"># app/controllers/articles_controller.rb<br>def index<br>  @articles = Article.published<br>  <br>  # 検索パラメータがあれば適用<br>  if params[:query].present?<br>    @articles = @articles.search(params[:query])<br>  end<br>  <br>  # フィルタリングパラメータがあれば適用<br>  if params[:start_date].present? && params[:end_date].present?<br>    start_date = Date.parse(params[:start_date])<br>    end_date = Date.parse(params[:end_date])<br>    @articles = @articles.published_between(start_date, end_date)<br>  end<br>  <br>  # ソートパラメータに基づいて並べ替え<br>  if params[:sort] == 'popular'<br>    @articles = @articles.popular<br>  else<br>    @articles = @articles.order(published_at: :desc)<br>  end<br>end</div>\n</div>	14
249	2024-08-16 18:07:05	2025-03-23 06:41:06.457768	4	19	トランザクション	\N	app/controllers/test_controller.rb	class TestController < ApplicationController\\n  def index\\n    ActiveRecord::Base.transaction do\\n      company = Company.create(name: 'test')\\n\\n      raise ActiveRecord::Rollback\\n    end\\n  end\\nend	\N	\N	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>トランザクションとは</h2>\n    <p>トランザクションは、複数のデータベース操作をまとめて「全て成功」または「全て失敗」として扱うための仕組みです。一連の処理の途中で問題が発生した場合、それまでに行われた変更をすべて元に戻すことができます。</p>\n    \n    <div class="note">\n        <p><strong>重要：</strong> トランザクションは同一のコントローラー内で複数のモデルの操作などを行うときに使用し、例外などの中に<code>raise ActiveRecord::Rollback</code>を記入しておくことで不都合が起きた時に<code>ActiveRecord::Base.transaction do</code>内のすべてのデータベースの変更を取り消すことができます。</p>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>基本的な使い方</h2>\n    <p>トランザクションの基本的な構文は以下の通りです：</p>\n    \n    <div class="code-block">\n        <pre>ActiveRecord::Base.transaction do\n    # データベースの操作\n    # 問題が発生したらロールバック\n    raise ActiveRecord::Rollback\nend</pre>\n    </div>\n    \n    <p>上記の例では、<code>raise ActiveRecord::Rollback</code>の部分が動作するとデータベースのデータが<code>ActiveRecord::Base.transaction do</code>の前の状態に戻ります。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>実践的な例</h2>\n    <p>注文処理で、商品の在庫を減らしつつ注文データを作成する例：</p>\n    \n    <div class="code-block">\n        <pre>def create_order\n  ActiveRecord::Base.transaction do\n    # 商品の在庫を減らす\n    @product = Product.find(params[:product_id])\n    if @product.stock >= params[:quantity].to_i\n      @product.stock -= params[:quantity].to_i\n      @product.save!\n      \n      # 注文データを作成\n      @order = Order.new(\n        user_id: current_user.id,\n        product_id: @product.id,\n        quantity: params[:quantity].to_i\n      )\n      \n      # 注文データが保存できなければロールバック\n      unless @order.save\n        raise ActiveRecord::Rollback\n      end\n      \n      # 支払い処理\n      payment_result = process_payment(params[:payment_info])\n      \n      # 支払いが失敗したらロールバック\n      unless payment_result\n        raise ActiveRecord::Rollback\n      end\n    else\n      # 在庫不足の場合もロールバック\n      raise ActiveRecord::Rollback\n    end\n  end\nend</pre>\n    </div>\n    \n    <p>この例では、商品在庫の確認・更新、注文データの作成、支払い処理のどの段階でも問題が発生したら、<code>raise ActiveRecord::Rollback</code>によってすべての変更がなかったことになります。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>条件付きロールバック</h2>\n    <p>条件に応じてロールバックを行う例：</p>\n    \n    <div class="code-block">\n        <pre>ActiveRecord::Base.transaction do\n  # 会社情報を更新\n  @company = Company.find(params[:id])\n  @company.update!(name: params[:name])\n  \n  # 関連する全社員の部署情報も更新\n  @company.employees.each do |employee|\n    # 条件に合わない社員がいればロールバック\n    if employee.department == "経理" && params[:allow_accounting_change] != "1"\n      flash[:alert] = "経理部門の社員情報は変更できません"\n      raise ActiveRecord::Rollback\n    end\n    \n    employee.update!(department: params[:new_department])\n  end\n  \n  # ここまで到達すればトランザクション完了（コミット）\n  flash[:notice] = "会社情報と社員情報を更新しました"\nend</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>エラーハンドリングとの組み合わせ</h2>\n    <p>トランザクションとエラーハンドリングを組み合わせた例：</p>\n    \n    <div class="code-block">\n        <pre>begin\n  ActiveRecord::Base.transaction do\n    # 1つ目のモデルを作成\n    @user = User.create!(user_params)\n    \n    # 2つ目のモデルを作成\n    @profile = @user.build_profile(profile_params)\n    @profile.save!\n    \n    # 外部APIを呼び出し\n    api_response = external_signup_api(@user)\n    \n    # API呼び出しが失敗したらロールバック\n    if api_response[:status] != "success"\n      raise "API Error: #{api_response[:message]}"\n    end\n  end\n  \n  # トランザクション成功時の処理\n  redirect_to user_path(@user), notice: "ユーザー登録が完了しました"\n  \nrescue ActiveRecord::RecordInvalid => e\n  # バリデーションエラー時の処理\n  flash.now[:alert] = "登録に失敗しました: #{e.message}"\n  render :new\n  \nrescue StandardError => e\n  # その他のエラー時の処理\n  logger.error "ユーザー登録エラー: #{e.message}"\n  flash.now[:alert] = "システムエラーが発生しました"\n  render :new\nend</pre>\n    </div>\n</div>\n\n<div class="note">\n    <p><strong>補足：</strong> トランザクションは、アトミック（不可分）な操作が必要な場面で使用します。例えば、銀行での送金処理（引き落としと入金が必ず両方成功するか両方失敗する）や、複数のテーブルに関連するデータを一貫して作成・更新する場合などに有効です。</p>\n</div>	17
254	2024-08-20 20:31:34	2024-08-20 20:35:39	1	17	||= 演算子	test	ruby	test ||= 'test'\\ntest ||= 'test2'\\n\\nputs test	\N	\N	\N	\N	||=演算子を使用することで、対象の変数が未定義、nil、falseのどれかの時のみ値を代入することができます。<br><br>上の例では1行目ではtestが未定義なので'test'が代入されますが、2行目の時点ではすでにtestが代入されているため代入が行われません。	27
256	2024-08-20 20:38:00	2024-08-20 20:40:18	1	17	if演算子	2	ruby	t = 1\\ntest=2 if t==1\\n\\nputs test	\N	\N	\N	\N	if演算子を使用することで、条件に一致しているときのみ処理を行うことができます。<br><br><div class="code-block">処理 if 条件</div><br>の形式で記入してください。<br><br>上の例では変数に値を代入していますが、関数を記入すると関数を実行することもできます。	28
251	2024-08-20 17:20:26	2025-03-22 20:32:16.99383	4	18	指定したビューを表示させる	\N	app/controllers/test_controller.rb	class TestController < ApplicationController\\n  def index\\n    render "index2"\\n  end\\nend	\N	\N	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>ビュー表示の基本</h2>\n    <p>Railsでは、コントローラーのアクション名に対応するビューが自動的に表示されます。例えば、TestControllerのindexアクションであれば、app/views/test/index.html.erbが表示されます。</p>\n    \n    <p>ただし、この規則を上書きして、異なるビューを表示させることもできます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>別のビューを表示する</h2>\n    <p>デフォルトではメソッド名のビューが表示されますが、メソッド内に以下の形式で記述することで指定したビューを表示させることができます：</p>\n    \n    <div class="code-block">render "ビュー名"</div>\n    \n    <p>例えば、TestControllerのindexアクション内で：</p>\n    \n    <div class="code-block">def index<br>    @posts = Post.all<br>    render "dashboard"<br>end</div>\n    \n    <p>この場合、app/views/test/dashboard.html.erbが表示されます。</p>\n    \n    <p>拡張子（.html.erb）は省略して指定します。同じフォルダ内の別のビューを指定する場合は、ビュー名だけで十分です。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>別のフォルダのビューを表示する</h2>\n    <p>また、クラス名とは別のフォルダのビューを表示させることもできます。その場合は以下の形式で記述します：</p>\n    \n    <div class="code-block">render "viewsからみたパス/ビュー名"</div>\n    \n    <p>例えば：</p>\n    \n    <div class="code-block">def index<br>    @user = current_user<br>    render "test2/test2"<br>end</div>\n    \n    <p>この例では、TestControllerのindexアクションでapp/views/test2/test2.html.erbが表示されます。</p>\n    \n    <p>このように、他のコントローラーに対応するビューディレクトリ内のテンプレートを表示することができます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>オプションを使ったレンダリング</h2>\n    <p>renderメソッドには様々なオプションを指定できます：</p>\n    \n    <div class="code-block">def show<br>    @product = Product.find(params[:id])<br>    <br>    # レイアウトを指定<br>    render "product_details", layout: "special"<br>    <br>    # ステータスを指定<br>    # render "not_found", status: :not_found<br>    <br>    # コンテンツタイプを指定<br>    # render "product.json", content_type: "application/json"<br>end</div>\n    \n    <p>複数のオプションを組み合わせることも可能です：</p>\n    \n    <div class="code-block">render "shared/error", status: :unprocessable_entity, layout: "minimal"</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>ハッシュ形式での記述</h2>\n    <p>renderメソッドはハッシュ形式でも記述できます：</p>\n    \n    <div class="code-block"># テンプレート名を指定<br>render template: "test2/test2"<br><br># アクション名を指定<br>render action: "show"<br><br># パーシャルを指定<br>render partial: "form", locals: { product: @product }</div>\n    \n    <p>推奨されるのは、現在のコントローラーと関連しないビューを表示する場合は明示的にパスを指定する方法です：</p>\n    \n    <div class="code-block">render "path/to/view"</div>\n    \n    <p>ただし、可読性のためには、関連するビューは適切なフォルダ構造に配置し、論理的にアクセスできるようにすることが望ましいです。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">6</span>JSON、テキスト、その他の形式でのレンダリング</h2>\n    <p>HTMLテンプレート以外にも、様々な形式でレンダリングできます：</p>\n    \n    <div class="code-block"># JSONとしてレンダリング<br>render json: @product<br><br># プレーンテキストとしてレンダリング<br>render plain: "Hello, World!"<br><br># インラインHTMLとしてレンダリング<br>render html: "&lt;strong&gt;Not Found&lt;/strong&gt;".html_safe<br><br># XMLとしてレンダリング<br>render xml: @product<br><br># JavaScriptとしてレンダリング<br>render js: "alert('Hello Rails');"</div>\n    \n    <div class="note">\n        <p><strong>注意：</strong> インラインHTMLを使用する場合は、XSS（クロスサイトスクリプティング）攻撃を防ぐために、信頼できる内容のみを使用し、必要に応じて<code>html_safe</code>を使用してください。</p>\n    </div>\n</div>	13
252	2024-08-20 17:30:39	2025-03-22 20:34:14.103324	4	18	コールバック	\N	app/controllers/test_controller.rb	class TestController < ApplicationController\\n  before_action :test\\n  def index\\n  end\\n\\n  def test\\n    @test = 'test'\\n  end\\nend	\N	\N	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>コールバックとは</h2>\n    <p>コールバックとは、特定のタイミングでメソッドを動作させる機能のことです。Rails のコントローラーにおいて、アクションの実行前、実行後、または前後に処理を挟み込むことができます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>コールバックの種類</h2>\n    <p>コントローラーで使用できる主なコールバックには以下の種類があります：</p>\n    \n    <table>\n        <tr>\n            <th>コールバック名</th>\n            <th>実行タイミング</th>\n            <th>主な用途</th>\n        </tr>\n        <tr>\n            <td>before_action</td>\n            <td>メソッドの実行前</td>\n            <td>認証、特定のパラメーターの設定など</td>\n        </tr>\n        <tr>\n            <td>after_action</td>\n            <td>メソッドの実行後</td>\n            <td>ログの記録など</td>\n        </tr>\n        <tr>\n            <td>around_action</td>\n            <td>メソッドの実行前と実行後</td>\n            <td>トランザクション処理など</td>\n        </tr>\n        <tr>\n            <td>skip_before_action</td>\n            <td>-</td>\n            <td>指定したメソッドでbefore_actionを使用しない</td>\n        </tr>\n        <tr>\n            <td>skip_after_action</td>\n            <td>-</td>\n            <td>指定したメソッドでafter_actionを使用しない</td>\n        </tr>\n        <tr>\n            <td>prepend_before_action</td>\n            <td>before_actionの前</td>\n            <td>既存のbefore_actionよりも先に実行したい処理</td>\n        </tr>\n        <tr>\n            <td>prepend_after_action</td>\n            <td>after_actionの前</td>\n            <td>既存のafter_actionよりも先に実行したい処理</td>\n        </tr>\n    </table>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>コールバックの基本的な記述方法</h2>\n    <p>コールバックはコントローラーのクラス内で以下の形式で記述します：</p>\n    \n    <div class="code-block">class ExampleController < ApplicationController<br>    before_action :メソッド名<br>    <br>    def index<br>        # indexアクションの処理<br>    end<br>    <br>    private<br>    <br>    def メソッド名<br>        # before_actionで実行される処理<br>    end<br>end</div>\n    \n    <p>実際の例：</p>\n    \n    <div class="code-block">class PostsController < ApplicationController<br>    before_action :set_post, only: [:show, :edit, :update, :destroy]<br>    <br>    def index<br>        @posts = Post.all<br>    end<br>    <br>    def show<br>        # @postはbefore_actionで既に設定されている<br>    end<br>    <br>    private<br>    <br>    def set_post<br>        @post = Post.find(params[:id])<br>    end<br>end</div>\n    \n    <p>上の例では、show, edit, update, destroyアクションの前にset_postメソッドを実行して@postを定義しています。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>コールバックの適用範囲の制限</h2>\n    <p>特定のアクションにのみコールバックを適用したい場合は、<code>only</code>または<code>except</code>オプションを使用します：</p>\n    \n    <div class="code-block"># 特定のアクションにのみ適用<br>before_action :authenticate_user, only: [:new, :create, :edit, :update, :destroy]<br><br># 特定のアクションを除外<br>before_action :set_common_variables, except: [:index, :show]</div>\n    \n    <p><code>only</code>および<code>except</code>は配列で複数のアクションを指定でき、カンマ区切りで記述します。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>コールバックのスキップ</h2>\n    <p><code>skip_before_action</code>や<code>skip_after_action</code>を使用すると、特定のアクションで既に定義されているコールバックをスキップできます：</p>\n    \n    <div class="code-block">class ApplicationController < ActionController::Base<br>    before_action :authenticate_user<br>end<br><br>class PublicController < ApplicationController<br>    skip_before_action :authenticate_user, only: [:index, :about]<br>    <br>    def index<br>        # 認証なしでアクセス可能<br>    end<br>    <br>    def about<br>        # 認証なしでアクセス可能<br>    end<br>    <br>    def contact<br>        # 認証が必要（スキップされていない）<br>    end<br>end</div>\n    \n    <p>上の例では、ApplicationControllerで定義されている<code>authenticate_user</code>コールバックを、PublicControllerの<code>index</code>と<code>about</code>アクションでスキップしています。</p>\n    \n    <p>別の例：</p>\n    \n    <div class="code-block">class AdminController < ApplicationController<br>    before_action :test2<br>    skip_before_action :test2, only: [:test]<br>    <br>    def test<br>        # test2メソッドは実行されない<br>    end<br>    <br>    def dashboard<br>        # test2メソッドが実行される<br>    end<br>    <br>    private<br>    <br>    def test2<br>        # 何らかの処理<br>    end<br>end</div>\n    \n    <p>この例では、testアクションではbefore_actionで指定しているtest2メソッドが実行されなくなります。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">6</span>コールバックの実行順序の制御</h2>\n    <p><code>prepend_before_action</code>や<code>prepend_after_action</code>を使用すると、既存のコールバックよりも先に実行されるコールバックを定義できます：</p>\n    \n    <div class="code-block">class ApplicationController < ActionController::Base<br>    before_action :first_callback<br>    before_action :second_callback<br>end<br><br>class SpecialController < ApplicationController<br>    prepend_before_action :special_callback<br>    <br>    # 実行順序: special_callback, first_callback, second_callback<br>end</div>\n    \n    <p>通常、コールバックは定義された順序で実行されますが、<code>prepend_</code>プレフィックスを付けることで、既存のコールバックより先に実行されるようになります。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">7</span>around_actionの使用例</h2>\n    <p><code>around_action</code>は、アクションの前後で処理を行いたい場合に使用します：</p>\n    \n    <div class="code-block">class ReportsController < ApplicationController<br>    around_action :time_report, only: :generate<br>    <br>    def generate<br>        # レポート生成処理<br>        @report = Report.generate(params[:type])<br>    end<br>    <br>    private<br>    <br>    def time_report<br>        start_time = Time.current<br>        <br>        # アクションを実行<br>        yield<br>        <br>        end_time = Time.current<br>        duration = end_time - start_time<br>        <br>        # 処理時間をログに記録<br>        Rails.logger.info "Report generation took #{duration} seconds"<br>    end<br>end</div>\n    \n    <p><code>around_action</code>内では<code>yield</code>を使用して、アクションの本体を実行します。<code>yield</code>の前後にコードを配置することで、アクションの実行前後に処理を行うことができます。</p>\n</div>	14
253	2024-08-20 18:14:43	2025-03-22 20:35:36.543185	4	18	リダイレクト	\N	config/routes.rb	Rails.application.routes.draw do\\n  get "/" => "test#index"\\n  get "test" => "test2#index"\\nend	app/controllers/test_controller.rb	class TestController < ApplicationController\\n  def index\\n    redirect_to "/test"\\n  end\\nend	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>リダイレクトの基本</h2>\n    <p>Railsでは、リダイレクトを行うことで、他のURLのメソッドに処理を渡すことができます。一般的な形式は以下の通りです：</p>\n    \n    <div class="code-block">redirect_to "config/routes.rbで定義している転送したいパス"</div>\n    \n    <p>この形式で記述することで、config/routes.rbのget "転送したいパス"で指定しているメソッドを実行することができます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>リダイレクトの具体例</h2>\n    <p>例えば、次のようなコントローラーとルーティングがあるとします：</p>\n    \n    <div class="code-block"># app/controllers/test_controller.rb<br>class TestController < ApplicationController<br>    def index<br>        redirect_to "/test"<br>    end<br>end<br><br># app/controllers/test2_controller.rb<br>class Test2Controller < ApplicationController<br>    def index<br>        @message = "Test2Controllerのindexアクションです"<br>    end<br>end<br><br># config/routes.rb<br>Rails.application.routes.draw do<br>    get "/", to: "test#index"<br>    get "/test", to: "test2#index"<br>end</div>\n    \n    <p>上の例では、ルートURL（/）にアクセスするとTestControllerのindexメソッドが実行され、そこからリダイレクトされて、config/routesでget "/test"で定義されているTest2Controllerのindexメソッドが実行されるようになっています。</p>\n    \n    <p>つまり、「/」にアクセスすると、自動的に「/test」にリダイレクトされ、Test2Controllerのindexアクションが実行されます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>パスヘルパーを使ったリダイレクト</h2>\n    <p>文字列でパスを直接指定する代わりに、パスヘルパーを使うことをお勧めします：</p>\n    \n    <div class="code-block"># config/routes.rb<br>Rails.application.routes.draw do<br>    get "/", to: "test#index"<br>    get "/test", to: "test2#index", as: "test2_index"<br>end<br><br># app/controllers/test_controller.rb<br>class TestController < ApplicationController<br>    def index<br>        redirect_to test2_index_path<br>    end<br>end</div>\n    \n    <p>パスヘルパーを使うと、URLが変更された場合でもコードを修正する必要がなくなります。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>リソースベースのリダイレクト</h2>\n    <p>リソースベースのルーティングを使用している場合は、モデルオブジェクトを直接指定できます：</p>\n    \n    <div class="code-block"># config/routes.rb<br>Rails.application.routes.draw do<br>    resources :posts<br>end<br><br># app/controllers/posts_controller.rb<br>class PostsController < ApplicationController<br>    def create<br>        @post = Post.new(post_params)<br>        <br>        if @post.save<br>            redirect_to @post  # /posts/:id にリダイレクト<br>        else<br>            render :new<br>        end<br>    end<br>end</div>\n    \n    <p>この例では、@postオブジェクトが保存された後、自動的に該当する投稿の詳細ページにリダイレクトされます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>ステータスコードとフラッシュメッセージ</h2>\n    <p>リダイレクト時に、HTTPステータスコードやフラッシュメッセージを指定することもできます：</p>\n    \n    <div class="code-block"># 標準的なリダイレクト（302 Found）<br>redirect_to posts_path<br><br># ステータスコードを指定（301 Moved Permanently）<br>redirect_to posts_path, status: :moved_permanently<br><br># フラッシュメッセージを指定<br>redirect_to posts_path, notice: "投稿が正常に作成されました"<br><br># エラーメッセージを指定<br>redirect_to posts_path, alert: "エラーが発生しました"<br><br># 複数のオプションを組み合わせる<br>redirect_to posts_path, status: :see_other, notice: "投稿が削除されました"</div>\n    \n    <p>フラッシュメッセージは、リダイレクト先のビューで以下のように表示できます：</p>\n    \n    <div class="code-block">&lt;% if notice %&gt;<br>    &lt;div class="alert alert-success"&gt;&lt;%= notice %&gt;&lt;/div&gt;<br>&lt;% end %&gt;<br><br>&lt;% if alert %&gt;<br>    &lt;div class="alert alert-danger"&gt;&lt;%= alert %&gt;&lt;/div&gt;<br>&lt;% end %&gt;</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">6</span>外部URLへのリダイレクト</h2>\n    <p>他のウェブサイトにリダイレクトすることも可能です：</p>\n    \n    <div class="code-block">redirect_to "https://www.example.com"</div>\n    \n    <p>ただし、セキュリティ上の理由から、信頼できるドメインのみにリダイレクトするように注意してください。</p>\n    \n    <div class="note">\n        <p><strong>注意：</strong> ユーザー入力から直接URLを構築してリダイレクトすると、オープンリダイレクト脆弱性の原因となる可能性があります。</p>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">7</span>条件付きリダイレクト</h2>\n    <p>条件に基づいて異なるURLにリダイレクトすることもできます：</p>\n    \n    <div class="code-block">def show<br>    @post = Post.find_by(id: params[:id])<br>    <br>    if @post.nil?<br>        redirect_to posts_path, alert: "投稿が見つかりません"<br>    elsif !@post.visible? && !current_user.admin?<br>        redirect_to posts_path, alert: "このコンテンツを閲覧する権限がありません"<br>    end<br>    <br>    # @postが存在し、表示可能な場合はshowビューを表示<br>end</div>\n    \n    <p>この例では、投稿が存在しない場合や、ユーザーが表示権限を持っていない場合に投稿一覧ページにリダイレクトします。</p>\n</div>	15
257	2024-08-20 20:52:15	2025-03-22 20:36:43.831832	4	18	ヘルパーメソッド	\N	app/controllers/test_controller.rb	class TestController < ApplicationController\\n  helper_method :helper\\n\\n  def helper\\n    "helper"\\n  end\\n\\n  def index\\n    @test = helper\\n  end\\nend	\N	\N	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>ヘルパーメソッドとは</h2>\n    <p>Railsのヘルパーメソッドは、コントローラーで定義したメソッドをビュー（テンプレート）からも利用できるようにする機能です。これにより、コントローラーとビューの間で共通の機能や値を共有することができます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>ヘルパーメソッドの定義方法</h2>\n    <p>コントローラークラス内で、以下の形式を使ってヘルパーメソッドを定義します：</p>\n    \n    <div class="code-block">class ApplicationController < ActionController::Base<br>    helper_method :メソッド名<br>    <br>    private<br>    <br>    def メソッド名<br>        # メソッドの処理内容<br>    end<br>end</div>\n    \n    <p>具体的な例：</p>\n    \n    <div class="code-block">class ApplicationController < ActionController::Base<br>    helper_method :current_user, :logged_in?<br>    <br>    private<br>    <br>    def current_user<br>        @current_user ||= User.find_by(id: session[:user_id]) if session[:user_id]<br>    end<br>    <br>    def logged_in?<br>        !!current_user<br>    end<br>end</div>\n    \n    <p>上記の例では、<code>current_user</code>と<code>logged_in?</code>メソッドをヘルパーメソッドとして定義しています。これらのメソッドは、すべてのコントローラーとビューから利用できます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>ヘルパーメソッドの戻り値</h2>\n    <p>ヘルパーメソッドでは最終行が戻り値となります。つまり、メソッド内で最後に評価された式の値が返されます。</p>\n    \n    <div class="code-block">class TestController < ApplicationController<br>    helper_method :test_helper<br>    <br>    def index<br>        @test = test_helper<br>        # @testには"helper"が代入される<br>    end<br>    <br>    private<br>    <br>    def test_helper<br>        # 何らかの処理<br>        "helper"  # この値が戻り値となる<br>    end<br>end</div>\n    \n    <p>上の例では、<code>test_helper</code>メソッドの最終行で文字列"helper"を返しているため、<code>@test</code>変数には"helper"が代入されます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>ビューでのヘルパーメソッドの使用</h2>\n    <p>ヘルパーメソッドはビュー内で直接呼び出すことができます：</p>\n    \n    <div class="code-block">&lt;!-- app/views/layouts/application.html.erb --&gt;<br>&lt;header&gt;<br>    &lt;% if logged_in? %&gt;<br>        ようこそ、&lt;%= current_user.name %&gt;さん<br>        &lt;%= link_to 'ログアウト', logout_path, method: :delete %&gt;<br>    &lt;% else %&gt;<br>        &lt;%= link_to 'ログイン', login_path %&gt;<br>        &lt;%= link_to '新規登録', signup_path %&gt;<br>    &lt;% end %&gt;<br>&lt;/header&gt;</div>\n    \n    <p>この例では、<code>logged_in?</code>メソッドを使用してユーザーがログインしているかどうかを確認し、<code>current_user</code>メソッドを使用してログインユーザーの情報を表示しています。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>ヘルパーメソッドの使用例</h2>\n    <p>以下は、ヘルパーメソッドの一般的な使用例です：</p>\n    \n    <h3>ユーザー認証情報の共有</h3>\n    <div class="code-block">class ApplicationController < ActionController::Base<br>    helper_method :current_user, :logged_in?<br>    <br>    private<br>    <br>    def current_user<br>        @current_user ||= User.find_by(id: session[:user_id]) if session[:user_id]<br>    end<br>    <br>    def logged_in?<br>        !!current_user<br>    end<br>end</div>\n    \n    <h3>権限チェック</h3>\n    <div class="code-block">class ApplicationController < ActionController::Base<br>    helper_method :admin?<br>    <br>    private<br>    <br>    def admin?<br>        current_user && current_user.admin?<br>    end<br>end</div>\n    \n    <h3>表示用のフォーマット</h3>\n    <div class="code-block">class ApplicationController < ActionController::Base<br>    helper_method :format_date<br>    <br>    private<br>    <br>    def format_date(date)<br>        date.strftime('%Y年%m月%d日') if date.present?<br>    end<br>end</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">6</span>ヘルパーメソッドとヘルパーモジュールの違い</h2>\n    <p>Railsには、<code>helper_method</code>以外にも<code>app/helpers</code>ディレクトリに定義するヘルパーモジュールがあります。両者の違いは以下の通りです：</p>\n    \n    <table>\n        <tr>\n            <th>helper_method</th>\n            <th>ヘルパーモジュール</th>\n        </tr>\n        <tr>\n            <td>コントローラー内に定義</td>\n            <td>app/helpersディレクトリ内に定義</td>\n        </tr>\n        <tr>\n            <td>コントローラーとビューの両方で使用可能</td>\n            <td>基本的にビューでのみ使用可能</td>\n        </tr>\n        <tr>\n            <td>コントローラーの状態や機能に依存するメソッドに適している</td>\n            <td>純粋にビュー表示のためのヘルパーメソッドに適している</td>\n        </tr>\n    </table>\n    \n    <p>ヘルパーモジュールの例：</p>\n    \n    <div class="code-block"># app/helpers/application_helper.rb<br>module ApplicationHelper<br>    def page_title(title = "")<br>        base_title = "My Rails App"<br>        title.empty? ? base_title : "#{title} | #{base_title}"<br>    end<br>end</div>\n    \n    <p>ビューでの使用：</p>\n    \n    <div class="code-block">&lt;!-- app/views/layouts/application.html.erb --&gt;<br>&lt;head&gt;<br>    &lt;title&gt;&lt;%= page_title(@title) %&gt;&lt;/title&gt;<br>&lt;/head&gt;</div>\n</div>	16
259	2024-08-20 21:32:27	2025-03-22 20:37:44.273929	4	18	セッション	\N	app/controllers/test_controller.rb	class TestController < ApplicationController\\n  def index\\n    session[:test] = 'test'\\n  end\\nend	\N	\N	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>セッションとは</h2>\n    <p>セッションは、ブラウザを閉じるまでの間、ユーザーの情報を保持するための仕組みです。Railsでは、セッションを使用することでプロジェクト内で値を共有することができます。</p>\n    \n    <p>HTTP通信は基本的にステートレス（状態を持たない）ですが、セッションを使うことで一時的にユーザーの状態を保持できます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>セッションの基本的な使い方</h2>\n    <p>Railsでは、セッションは以下の形式で記述します：</p>\n    \n    <div class="code-block">session[:シンボル]</div>\n    \n    <p>セッションへの値の保存：</p>\n    \n    <div class="code-block">session[:user_id] = @user.id</div>\n    \n    <p>セッションからの値の取得：</p>\n    \n    <div class="code-block">user_id = session[:user_id]</div>\n    \n    <p>セッションからの値の削除：</p>\n    \n    <div class="code-block">session.delete(:user_id)</div>\n    \n    <p>セッションの完全なクリア：</p>\n    \n    <div class="code-block">reset_session</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>ログイン機能での使用例</h2>\n    <p>セッションは、ユーザーのログイン状態を管理するのによく使用されます：</p>\n    \n    <div class="code-block"># app/controllers/sessions_controller.rb<br>class SessionsController < ApplicationController<br>    def create<br>        user = User.find_by(email: params[:email])<br>        <br>        if user && user.authenticate(params[:password])<br>            # ログイン成功時にユーザーIDをセッションに保存<br>            session[:user_id] = user.id<br>            redirect_to root_path, notice: "ログインしました"<br>        else<br>            flash.now[:alert] = "メールアドレスまたはパスワードが無効です"<br>            render :new<br>        end<br>    end<br>    <br>    def destroy<br>        # ログアウト時にセッションからユーザーIDを削除<br>        session.delete(:user_id)<br>        redirect_to root_path, notice: "ログアウトしました"<br>    end<br>end</div>\n    \n    <p>セッションに保存されたユーザーIDを使用して、現在のユーザーを取得するヘルパーメソッド：</p>\n    \n    <div class="code-block"># app/controllers/application_controller.rb<br>class ApplicationController < ActionController::Base<br>    helper_method :current_user, :logged_in?<br>    <br>    private<br>    <br>    def current_user<br>        @current_user ||= User.find_by(id: session[:user_id]) if session[:user_id]<br>    end<br>    <br>    def logged_in?<br>        !!current_user<br>    end<br>end</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>その他のセッション使用例</h2>\n    <p>セッションは、ログイン情報以外にも様々な用途で使用できます：</p>\n    \n    <h3>買い物かごの管理</h3>\n    <div class="code-block"># app/controllers/cart_controller.rb<br>class CartController < ApplicationController<br>    def add_item<br>        # セッションに買い物かごを初期化（存在しない場合）<br>        session[:cart] ||= []<br>        <br>        # 商品IDと数量を買い物かごに追加<br>        session[:cart] << {<br>            product_id: params[:product_id],<br>            quantity: params[:quantity].to_i<br>        }<br>        <br>        redirect_to cart_path, notice: "商品がカートに追加されました"<br>    end<br>    <br>    def show<br>        # セッションから買い物かごのアイテムを取得<br>        @cart_items = session[:cart] || []<br>        <br>        # カート内の商品の詳細情報を取得<br>        @products = Product.where(id: @cart_items.map { |item| item[:product_id] })<br>    end<br>    <br>    def clear<br>        # 買い物かごをクリア<br>        session.delete(:cart)<br>        redirect_to cart_path, notice: "カートが空になりました"<br>    end<br>end</div>\n    \n    <h3>言語設定の保存</h3>\n    <div class="code-block"># app/controllers/language_controller.rb<br>class LanguageController < ApplicationController<br>    def change<br>        # 選択した言語をセッションに保存<br>        session[:locale] = params[:locale]<br>        redirect_back(fallback_location: root_path)<br>    end<br>end<br><br># app/controllers/application_controller.rb<br>class ApplicationController < ActionController::Base<br>    before_action :set_locale<br>    <br>    private<br>    <br>    def set_locale<br>        I18n.locale = session[:locale] || I18n.default_locale<br>    end<br>end</div>\n    \n    <h3>フォーム入力の一時保存</h3>\n    <div class="code-block"># app/controllers/registration_controller.rb<br>class RegistrationController < ApplicationController<br>    def step1<br>        # フォームの初期値としてセッション値を使用<br>        @user = User.new(session[:user_params] || {})<br>    end<br>    <br>    def step1_save<br>        # ステップ1の入力内容をセッションに保存<br>        session[:user_params] = params.require(:user).permit(:email, :name).to_h<br>        redirect_to registration_step2_path<br>    end<br>    <br>    def step2<br>        # 前のステップの内容をセッションから取得<br>        @user = User.new(session[:user_params] || {})<br>    end<br>    <br>    def create<br>        # 全ステップの入力内容をまとめる<br>        user_params = session[:user_params] || {}<br>        user_params.merge!(params.require(:user).permit(:password, :password_confirmation))<br>        <br>        @user = User.new(user_params)<br>        <br>        if @user.save<br>            # ユーザー作成成功、セッション情報をクリア<br>            session.delete(:user_params)<br>            redirect_to root_path, notice: "登録が完了しました"<br>        else<br>            render :step2<br>        end<br>    end<br>end</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>セッションの有効期限と保存場所</h2>\n    <p>Railsのセッションは、デフォルトではブラウザのクッキーに保存されます。セッションの設定は<code>config/initializers/session_store.rb</code>または<code>config/application.rb</code>で行います：</p>\n    \n    <div class="code-block"># config/initializers/session_store.rb<br>Rails.application.config.session_store :cookie_store, key: '_my_app_session', expire_after: 30.days</div>\n    \n    <p>主なセッションストアのオプション：</p>\n    <ul>\n        <li><strong>:cookie_store</strong> - クッキーにセッションデータを保存（デフォルト）</li>\n        <li><strong>:active_record_store</strong> - データベースにセッションデータを保存</li>\n        <li><strong>:cache_store</strong> - Railsのキャッシュにセッションデータを保存</li>\n        <li><strong>:redis_store</strong> - Redisにセッションデータを保存</li>\n    </ul>\n    \n    <p>データベースを使用する場合は、<code>activerecord-session_store</code> gemをインストールし、セッションテーブルを作成する必要があります：</p>\n    \n    <div class="code-block"># Gemfile<br>gem 'activerecord-session_store'<br><br># セッションテーブルの作成<br>rails generate active_record:session_migration<br>rails db:migrate</div>\n    \n    <div class="note">\n        <p><strong>注意：</strong> セッションにはユーザーIDなどの識別情報のみを保存し、大量のデータやセキュアな情報は保存しないようにしましょう。特に:cookie_storeを使用している場合は、セッションデータはクライアント側のクッキーに保存されるため、セキュリティ上のリスクがあります。</p>\n    </div>\n</div>	17
260	2024-08-21 05:23:20	2025-03-22 20:39:14.701331	4	18	全てのコントローラーで使用できるメソッドなどを定義する	\N	app/controllers/application_controller	class ApplicationController < ActionController::Base\\n  before_action :set_test\\n\\n  def set_test\\n    @test = "test"\\n  end\\nend	\N	\N	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>ApplicationControllerの役割</h2>\n    <p>Ruby on Railsでは、<code>rails generate controller コントローラー名</code>コマンドで作成したコントローラーはすべて<code>ApplicationController</code>クラスを継承しています。</p>\n    \n    <p>この特性を利用して、<code>ApplicationController</code>クラスにメソッドを定義することで、アプリケーション全体で使用できる共通機能を提供できます。</p>\n    \n    <div class="code-block"># app/controllers/application_controller.rb<br>class ApplicationController < ActionController::Base<br>    # すべてのコントローラーで共有される機能をここに定義<br>end</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>共通メソッドの定義</h2>\n    <p><code>ApplicationController</code>内で共通メソッドを定義し、<code>before_action</code>を使用することで、すべてのコントローラーで利用可能な変数や機能を設定できます。</p>\n    \n    <div class="code-block"># app/controllers/application_controller.rb<br>class ApplicationController < ActionController::Base<br>    before_action :set_test<br>    <br>    private<br>    <br>    def set_test<br>        @test = "共通の値"<br>    end<br>end</div>\n    \n    <p>上の例では<code>ApplicationController</code>クラスに<code>set_test</code>メソッドを定義し、その中で<code>@test</code>変数を定義しています。<code>before_action</code>を使用してメソッドが動作する前に<code>set_test</code>を呼び出すことで、すべてのコントローラーとビューで<code>@test</code>変数を使用できるようになります。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>実用的な例: 現在のユーザー情報</h2>\n    <p>最も一般的な用途の一つは、ログイン中のユーザー情報をすべてのコントローラーとビューで利用できるようにすることです：</p>\n    \n    <div class="code-block"># app/controllers/application_controller.rb<br>class ApplicationController < ActionController::Base<br>    before_action :set_current_user<br>    helper_method :current_user, :logged_in?<br>    <br>    private<br>    <br>    def set_current_user<br>        @current_user = User.find_by(id: session[:user_id]) if session[:user_id]<br>    end<br>    <br>    def current_user<br>        @current_user<br>    end<br>    <br>    def logged_in?<br>        !!current_user<br>    end<br>end</div>\n    \n    <p>この例では、<code>set_current_user</code>メソッドがすべてのアクションの前に実行され、セッションに保存されたユーザーIDを使用して現在のユーザーを設定します。また、<code>helper_method</code>を使用して<code>current_user</code>と<code>logged_in?</code>メソッドをビューからも利用できるようにしています。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>認証と認可</h2>\n    <p>認証（ログイン）と認可（アクセス権限）の処理も<code>ApplicationController</code>に定義することが一般的です：</p>\n    \n    <div class="code-block"># app/controllers/application_controller.rb<br>class ApplicationController < ActionController::Base<br>    before_action :require_login<br>    <br>    private<br>    <br>    def require_login<br>        unless logged_in?<br>            flash[:alert] = "ログインが必要です"<br>            redirect_to login_path<br>        end<br>    end<br>    <br>    def admin_only<br>        unless current_user&.admin?<br>            flash[:alert] = "管理者権限が必要です"<br>            redirect_to root_path<br>        end<br>    end<br>end</div>\n    \n    <p>この例では、<code>require_login</code>メソッドをデフォルトですべてのアクションに適用しています。ログインが不要なコントローラーでは、このアクションをスキップする必要があります：</p>\n    \n    <div class="code-block"># app/controllers/home_controller.rb<br>class HomeController < ApplicationController<br>    skip_before_action :require_login, only: [:index, :about]<br>    <br>    def index<br>        # ログインなしでアクセス可能<br>    end<br>    <br>    def about<br>        # ログインなしでアクセス可能<br>    end<br>end</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>国際化（i18n）の設定</h2>\n    <p>ユーザーの言語設定を管理するためのメソッドも<code>ApplicationController</code>に定義できます：</p>\n    \n    <div class="code-block"># app/controllers/application_controller.rb<br>class ApplicationController < ActionController::Base<br>    before_action :set_locale<br>    <br>    private<br>    <br>    def set_locale<br>        I18n.locale = params[:locale] || session[:locale] || I18n.default_locale<br>        session[:locale] = I18n.locale<br>    end<br>    <br>    def default_url_options<br>        { locale: I18n.locale }<br>    end<br>end</div>\n    \n    <p>この例では、URLパラメータやセッション、デフォルト設定からユーザーの言語設定を決定し、すべてのリクエストで適用しています。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">6</span>パラメータの処理</h2>\n    <p>共通のパラメータ処理や変換ロジックも<code>ApplicationController</code>に定義できます：</p>\n    \n    <div class="code-block"># app/controllers/application_controller.rb<br>class ApplicationController < ActionController::Base<br>    before_action :prepare_pagination_params<br>    <br>    private<br>    <br>    def prepare_pagination_params<br>        @page = (params[:page] || 1).to_i<br>        @per_page = (params[:per_page] || 10).to_i<br>        @per_page = 10 if @per_page &lt; 1 || @per_page &gt; 100  # 範囲の制限<br>    end<br>end</div>\n    \n    <p>この例では、ページネーションに関連するパラメータを処理し、デフォルト値や範囲の制限を適用しています。</p>\n</div>\n\n<div class="note">\n    <p><strong>ベストプラクティス：</strong> ApplicationControllerは多くのクラスから継承されるため、ここに定義する機能はアプリケーション全体で本当に必要なものだけに限定しましょう。特定のコントローラーグループだけで共有したい機能は、中間コントローラーを作成して継承階層を設計するとよいでしょう。</p>\n    \n    <div class="code-block"># 管理機能用の基底コントローラー<br>class AdminController < ApplicationController<br>    before_action :admin_only<br>    <br>    # 管理画面共通の機能...<br>end<br><br># 実際の管理機能コントローラー<br>class Admin::UsersController < AdminController<br>    # AdminControllerとApplicationControllerの両方から機能を継承<br>end</div>\n</div>	18
116	2024-06-29 17:20:19	2024-06-29 17:23:17	1	4	繰り返し処理(for文)	1\\n2\\n3	Python	test = [1, 2, 3]\\n\\nfor value in test:\\n    print(value)	\N	\N	\N	\N	for文は、リストや辞書などの繰り返し処理に使用される文です。<br><div class="code-block">for 代入する変数 in 使用する変数等:<br>   繰り返し時の処理</div><br>の形式で記入します。<br><br>繰り返しのたびに使用する変数などの値が順番に代入する変数に代入されて処理が行われます。	11
267	2024-08-21 16:47:59	2024-08-21 16:53:19	1	3	モジュール	\N	main.js	import { test_const, test_func } from "./test_file";\\n\\nconsole.log(test_const);\\ntest_func();	test_file.js	export const test_const = "const";\\n\\nexport function test_func() {\\n    console.log('func');\\n}	\N	\N	モジュールとは、関数、定数など定義しているファイルとなります。<br>モジュールで定義した関数などの前にexportを記入することで、モジュールを読み込んだファイルで使用することができるようになります。<br><br>読み込み側では、<br><div class="code-block">import { 読み込む関数など } from "パス(拡張子不要)";</div><br>の形式で記入してください。<br><br>上の例ではmain.jsで同じフォルダにあるtest_file.jsを読み込み、定数test_constと関数test_funcを使用しています。<br>	25
262	2024-08-21 06:22:37	2025-03-22 20:41:45.662104	4	18	リダイレクト先に変数を渡す	\N	app/controllers/test_controller.rb	class TestController < ApplicationController\\n  def index\\n    flash[:test] = "test"\\n    redirect_to "/test"\\n  end\\nend	\N	\N	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>フラッシュメッセージとは</h2>\n    <p>Railsのフラッシュ（flash）は、リダイレクト先のページに一時的なメッセージを渡すための仕組みです。通常、成功や失敗のメッセージなどをユーザーに表示する際に使用されます。</p>\n    \n    <p>フラッシュメッセージの特徴は、1度のリダイレクトまでのみ値を保持することです。次のリクエストでは自動的に消去されます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>フラッシュの基本的な使い方</h2>\n    <p>フラッシュは以下の形式で定義します：</p>\n    \n    <div class="code-block">flash[:シンボル名] = "メッセージ内容"</div>\n    \n    <p>一般的な使用例：</p>\n    \n    <div class="code-block"># app/controllers/posts_controller.rb<br>def create<br>    @post = Post.new(post_params)<br>    <br>    if @post.save<br>        flash[:success] = "投稿が正常に作成されました"<br>        redirect_to @post<br>    else<br>        flash[:error] = "投稿の作成に失敗しました"<br>        render :new<br>    end<br>end</div>\n    \n    <p>上記の例では、投稿が成功した場合にフラッシュメッセージを設定し、投稿詳細ページにリダイレクトしています。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>リダイレクト時のフラッシュ設定</h2>\n    <p>フラッシュメッセージは<code>redirect_to</code>メソッドのオプションとしても指定できます：</p>\n    \n    <div class="code-block">redirect_to "リダイレクトするパス", シンボル名: "メッセージ内容"</div>\n    \n    <p>例：</p>\n    \n    <div class="code-block">redirect_to @post, notice: "投稿が正常に作成されました"<br><br># 上記は以下と同等<br># flash[:notice] = "投稿が正常に作成されました"<br># redirect_to @post</div>\n    \n    <p>Railsでは特に<code>:notice</code>（成功メッセージ）と<code>:alert</code>（警告メッセージ）の2つのシンボルが標準的に使われますが、任意のシンボルも使用できます。</p>\n    \n    <div class="code-block">redirect_to root_path, success: "操作が成功しました"<br>redirect_to login_path, error: "ログインが必要です"<br>redirect_to posts_path, warning: "変更が保存されていません"</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>フラッシュの寿命と保持</h2>\n    <p>通常、フラッシュの内容は次のリクエストで消えますが、寿命を調整する方法があります：</p>\n    \n    <h3>flash.now[:シンボル名]</h3>\n    <p>現在のリクエスト内でのみフラッシュを保持し、リダイレクトでは消去させたい場合に使用します：</p>\n    \n    <div class="code-block">def create<br>    @post = Post.new(post_params)<br>    <br>    if @post.save<br>        redirect_to @post, notice: "投稿が作成されました"<br>    else<br>        flash.now[:error] = "投稿の作成に失敗しました"  # renderで表示される（リダイレクトしない）<br>        render :new<br>    end<br>end</div>\n    \n    <p><code>flash.now</code>は、<code>render</code>を使用する場合に特に有用です。リダイレクトしないため、通常のフラッシュを使うと次のリクエストまでメッセージが残ってしまいます。</p>\n    \n    <h3>flash.keep</h3>\n    <p>もう一つ先のリダイレクト先まで値を保持したいときは以下を使用します：</p>\n    \n    <div class="code-block"># app/controllers/first_controller.rb<br>def index<br>    flash[:message] = "これは最初のメッセージです"<br>    redirect_to second_path<br>end<br><br># app/controllers/second_controller.rb<br>def index<br>    # 通常はここでフラッシュが表示され消える<br>    # 次のリダイレクト先でも残したい場合<br>    flash.keep  # すべてのフラッシュを保持<br>    # または特定のフラッシュのみ保持<br>    # flash.keep(:message)<br>    <br>    redirect_to third_path<br>end<br><br># app/controllers/third_controller.rb<br>def index<br>    # ここでもflash[:message]が利用可能<br>end</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>ビューでのフラッシュ表示</h2>\n    <p>ビューでフラッシュメッセージを表示するには以下の形式を使用します：</p>\n    \n    <div class="code-block">&lt;%= flash[:シンボル名] %&gt;</div>\n    \n    <p>一般的な実装例：</p>\n    \n    <div class="code-block">&lt;!-- app/views/layouts/application.html.erb --&gt;<br>&lt;% flash.each do |type, message| %&gt;<br>    &lt;div class="alert alert-&lt;%= type %&gt;"&gt;<br>        &lt;%= message %&gt;<br>    &lt;/div&gt;<br>&lt;% end %&gt;</div>\n    \n    <p>Bootstrap CSSフレームワークを使用している場合の例：</p>\n    \n    <div class="code-block">&lt;% flash_class = {<br>    success: "alert-success",<br>    error: "alert-danger",<br>    alert: "alert-warning",<br>    notice: "alert-info"<br>} %&gt;<br><br>&lt;% flash.each do |type, message| %&gt;<br>    &lt;div class="alert &lt;%= flash_class[type.to_sym] %&gt; alert-dismissible fade show" role="alert"&gt;<br>        &lt;%= message %&gt;<br>        &lt;button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"&gt;&lt;/button&gt;<br>    &lt;/div&gt;<br>&lt;% end %&gt;</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">6</span>フラッシュの高度な使用法</h2>\n    <p>フラッシュには文字列だけでなく、ハッシュやオブジェクトも格納できます：</p>\n    \n    <div class="code-block">flash[:user_data] = {<br>    name: "山田太郎",<br>    id: user.id,<br>    last_login: Time.current<br>}</div>\n    \n    <p>ビューでのアクセス：</p>\n    \n    <div class="code-block">&lt;% if flash[:user_data] %&gt;<br>    &lt;p&gt;ようこそ、&lt;%= flash[:user_data][:name] %&gt;さん&lt;/p&gt;<br>    &lt;p&gt;前回のログイン: &lt;%= flash[:user_data][:last_login].strftime("%Y年%m月%d日 %H:%M") %&gt;&lt;/p&gt;<br>&lt;% end %&gt;</div>\n    \n    <div class="note">\n        <p><strong>ベストプラクティス：</strong> フラッシュには必要最小限のデータだけを格納しましょう。大量のデータやセンシティブな情報はセッションやデータベースに保存する方が適切です。</p>\n    </div>\n</div>	20
265	2024-08-21 16:32:22	2025-03-22 20:42:59.983447	4	18	ビューでJavascriptファイルを読み込む	\N	app/javascript/controllers/main.js	import { test } from "controllers/test";\\n\\nconsole.log(test);	app/javascript/controllers/test.js	export test = "test";	app/views/test/index.html.erb	<%= javascript_import_module_tag "controllers/main" %>	<div class="step">\n    <h2><span class="step-number">1</span>JavaScriptファイルの配置場所</h2>\n    <p>Ruby on Railsでは、JavaScriptファイルは<code>app/javascript/controllers</code>フォルダ内に配置します。</p>\n    \n    <p>例えば、新しいJavaScriptモジュールを作成する場合：</p>\n    <ul>\n        <li><code>app/javascript/controllers/hello_controller.js</code></li>\n        <li><code>app/javascript/controllers/form_controller.js</code></li>\n        <li><code>app/javascript/controllers/chart_controller.js</code></li>\n    </ul>\n    \n    <p>サブフォルダも作成できます：</p>\n    <ul>\n        <li><code>app/javascript/controllers/admin/dashboard_controller.js</code></li>\n    </ul>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>JavaScriptファイルの読み込み方法</h2>\n    <p>ビューから特定のJavaScriptファイルを読み込むには、<code>javascript_import_module_tag</code>ヘルパーを使用します：</p>\n    \n    <div class="code-block">&lt;%= javascript_import_module_tag "app/javascript/をルートとしてみた時のパス" %&gt;</div>\n    \n    <p>具体的な例：</p>\n    \n    <div class="code-block">&lt;!-- app/views/posts/show.html.erb --&gt;<br>&lt;%= javascript_import_module_tag "controllers/chart_controller" %&gt;</div>\n    \n    <p>サブフォルダ内のファイルを読み込む場合：</p>\n    \n    <div class="code-block">&lt;%= javascript_import_module_tag "controllers/admin/dashboard_controller" %&gt;</div>\n    \n    <div class="note">\n        <p><strong>注意：</strong> パスは<code>app/javascript/</code>をルートとして指定します。拡張子（.js）は省略します。</p>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>JavaScriptファイル内でのインポート</h2>\n    <p>読み込んだJavaScriptファイル内で他のモジュールやライブラリをインポートする場合も、<code>app/javascript/</code>をルートとしたパスを使用します：</p>\n    \n    <div class="code-block">// app/javascript/controllers/chart_controller.js<br><br>// 他のコントローラーをインポート<br>import { Controller } from "controllers/application_controller"<br><br>// ユーティリティをインポート<br>import { formatDate } from "utils/date_formatter"<br><br>export default class ChartController extends Controller {<br>  // コントローラーのコード<br>}</div>\n    \n    <p>外部ライブラリをインポートする例：</p>\n    \n    <div class="code-block">// app/javascript/controllers/chart_controller.js<br><br>// インストールされたnpmパッケージをインポート<br>import Chart from "chart.js/auto"<br><br>export default class ChartController {<br>  initialize() {<br>    const ctx = document.getElementById('myChart').getContext('2d');<br>    const chart = new Chart(ctx, {<br>      // チャートの設定<br>    });<br>  }<br>}</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>レイアウトでの読み込み</h2>\n    <p>アプリケーション全体で使用するJavaScriptファイルは、レイアウトファイルで読み込むと便利です：</p>\n    \n    <div class="code-block">&lt;!-- app/views/layouts/application.html.erb --&gt;<br>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>  &lt;head&gt;<br>    &lt;title&gt;&lt;%= content_for?(:title) ? yield(:title) : "アプリケーション名" %&gt;&lt;/title&gt;<br>    &lt;%= csrf_meta_tags %&gt;<br>    &lt;%= csp_meta_tag %&gt;<br>    <br>    &lt;%= stylesheet_link_tag "application", "data-turbo-track": "reload" %&gt;<br>    &lt;%= javascript_importmap_tags %&gt;<br>    &lt;%= javascript_import_module_tag "controllers/application_controller" %&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>    &lt;%= yield %&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>ページ特有のJavaScriptの読み込み</h2>\n    <p>特定のページでのみ必要なJavaScriptを読み込む方法：</p>\n    \n    <div class="code-block">&lt;!-- app/views/posts/show.html.erb --&gt;<br>&lt;% content_for :page_specific_js do %&gt;<br>  &lt;%= javascript_import_module_tag "controllers/posts/show_controller" %&gt;<br>&lt;% end %&gt;<br><br>&lt;h1&gt;&lt;%= @post.title %&gt;&lt;/h1&gt;<br>&lt;div id="post-content"&gt;<br>  &lt;%= @post.content %&gt;<br>&lt;/div&gt;</div>\n    \n    <p>そして、レイアウトファイルで：</p>\n    \n    <div class="code-block">&lt;!-- app/views/layouts/application.html.erb --&gt;<br>&lt;head&gt;<br>  &lt;!-- 他のhead要素... --&gt;<br>  &lt;%= yield :page_specific_js if content_for?(:page_specific_js) %&gt;<br>&lt;/head&gt;</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">6</span>Stimulusフレームワークとの連携</h2>\n    <p>Railsは特にStimulusフレームワークとの連携が強化されています。Stimulusコントローラーを使用する例：</p>\n    \n    <div class="code-block">// app/javascript/controllers/hello_controller.js<br>import { Controller } from "@hotwired/stimulus"<br><br>export default class extends Controller {<br>  static targets = [ "name", "output" ]<br><br>  greet() {<br>    this.outputTarget.textContent = `Hello, ${this.nameTarget.value}!`<br>  }<br>}</div>\n    \n    <p>HTMLでの使用例：</p>\n    \n    <div class="code-block">&lt;div data-controller="hello"&gt;<br>  &lt;input data-hello-target="name" type="text"&gt;<br>  &lt;button data-action="click->hello#greet"&gt;挨拶する&lt;/button&gt;<br>  &lt;span data-hello-target="output"&gt;&lt;/span&gt;<br>&lt;/div&gt;</div>\n    \n    <p>このようなStimulusコントローラーは通常、自動的に読み込まれるため、<code>javascript_import_module_tag</code>を使用せずに済みます。</p>\n</div>	21
268	2024-08-21 17:16:25	2025-03-22 20:45:53.446134	6	19	特定のフィールドのデータのみ取得する	\N	app/controllers/test_controller.rb	class TestController < ApplicationController\\n  def index\\n    @test = Person.pluck(:name, :age)\\n  end\\nend	app/views/test/index.html.erb	<table>\\n  <thead>\\n    <th>名前</th>\\n    <th>年齢</th>\\n  </thead>\\n\\n  <tr>\\n    <% @test.each do |name, age| %>\\n      <td><%= name %></td>\\n      <td><%= age %></td>\\n    <% end %>\\n  </tr>\\n</table>	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>pluckメソッドの基本</h2>\n    <p>ActiveRecordの<code>pluck</code>メソッドは、データベースから特定のフィールド（カラム）のみを取得するための便利な方法です。これにより、必要なデータだけを効率的に取得できます。</p>\n    \n    <p>基本的な使用方法：</p>\n    \n    <div class="code-block">モデル.pluck(フィールド)</div>\n    \n    <p>例えば、Personモデルから名前だけを取得する場合：</p>\n    \n    <div class="code-block"># コントローラー内<br>def index<br>    @names = Person.pluck(:name)<br>    # => ["田中", "佐藤", "鈴木", ...]<br>end</div>\n    \n    <p>取得した結果は、指定したフィールドの値を含む配列として返されます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>複数フィールドの取得</h2>\n    <p>複数のフィールドを取得する場合は、カンマ区切りで指定します：</p>\n    \n    <div class="code-block"># コントローラー内<br>def index<br>    @test = Person.pluck(:name, :age)<br>    # => [["田中", 28], ["佐藤", 35], ["鈴木", 42], ...]<br>end</div>\n    \n    <p>上の例では、Personモデルのname、ageフィールドのデータのみを取得しています。複数のフィールドを指定すると、結果は二次元配列となり、各要素は指定したフィールドの値の配列になります。</p>\n    \n    <p>ビューでの使用例：</p>\n    \n    <div class="code-block">&lt;!-- app/views/people/index.html.erb --&gt;<br>&lt;h1&gt;ユーザー一覧&lt;/h1&gt;<br><br>&lt;table&gt;<br>    &lt;tr&gt;<br>        &lt;th&gt;名前&lt;/th&gt;<br>        &lt;th&gt;年齢&lt;/th&gt;<br>    &lt;/tr&gt;<br>    <br>    &lt;% @test.each do |name, age| %&gt;<br>        &lt;tr&gt;<br>            &lt;td&gt;&lt;%= name %&gt;&lt;/td&gt;<br>            &lt;td&gt;&lt;%= age %&gt;&lt;/td&gt;<br>        &lt;/tr&gt;<br>    &lt;% end %&gt;<br>&lt;/table&gt;</div>\n    \n    <p>この例では、name、ageの2つのフィールドのデータを取得しているため、<code>&lt;% @test.each do |name, age| %&gt;</code>としてそれぞれ変数に代入しています。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>条件付きのデータ取得</h2>\n    <p>フィルタリングなどをしたデータの特定のフィールドを取得したいときは、<code>where</code>メソッドなどと組み合わせて使用します：</p>\n    \n    <div class="code-block">モデル.where(条件).pluck(フィールド)</div>\n    \n    <p>例：</p>\n    \n    <div class="code-block"># 20歳以上の人の名前と年齢を取得<br>@adults = Person.where("age >= ?", 20).pluck(:name, :age)<br><br># 特定の部署に所属する人の名前とメールアドレスを取得<br>@sales_team = Person.where(department: 'Sales').pluck(:name, :email)<br><br># 作成日順に並べて最初の10人の名前とIDを取得<br>@recent_users = Person.order(created_at: :desc).limit(10).pluck(:id, :name)</div>\n    \n    <p><code>where</code>以外にも、<code>order</code>、<code>limit</code>、<code>joins</code>など、多くのActiveRecordメソッドと組み合わせることができます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>pluckのパフォーマンス上の利点</h2>\n    <p><code>pluck</code>メソッドの主な利点は、必要なフィールドだけをデータベースから取得することによるパフォーマンスの向上です：</p>\n    \n    <div class="code-block"># すべてのフィールドを取得し、Rubyでnameだけを抽出（非効率）<br>names = Person.all.map(&:name)<br><br># nameフィールドだけをデータベースから取得（効率的）<br>names = Person.pluck(:name)</div>\n    \n    <p>特に大量のレコードや、テーブルに多くのカラムがある場合、<code>pluck</code>を使用することで転送されるデータ量が減り、メモリ使用量も削減されます。</p>\n    \n    <div class="note">\n        <p><strong>注意：</strong> <code>pluck</code>は直接SQLクエリを発行するため、ActiveRecordモデルのインスタンスは生成されません。そのため、モデルのメソッドは使用できません。純粋にデータの取得だけが目的の場合に最適です。</p>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>関連するテーブルからのpluck</h2>\n    <p>関連モデルからフィールドを取得する場合、<code>joins</code>や<code>includes</code>メソッドと組み合わせて使用します：</p>\n    \n    <div class="code-block"># ユーザーとその投稿のタイトルを取得<br>@post_titles = User.joins(:posts).pluck('users.name', 'posts.title')<br><br># 特定カテゴリの記事のタイトルを取得<br>@article_titles = Category.find(1).articles.pluck(:title)<br><br># has_manyの関連を活用<br>@employee_names = Company.find(5).employees.pluck(:name)</div>\n    \n    <p>関連テーブルから取得する場合は、テーブル名.カラム名の形式でフィールドを指定することもできます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">6</span>ベストプラクティスと注意点</h2>\n    <p><code>pluck</code>メソッドを効果的に使用するためのヒント：</p>\n    \n    <ol>\n        <li><strong>必要なデータだけを取得する：</strong> 使用するフィールドだけを取得することでパフォーマンスが向上します。</li>\n        <li><strong>大量のデータを扱う場合は<code>find_each</code>と組み合わせる：</strong> 大量のレコードを処理する場合はバッチ処理を検討してください。</li>\n        <li><strong>モデルのインスタンスが必要な場合は<code>select</code>を使用する：</strong> モデルのメソッドにアクセスする必要がある場合は<code>pluck</code>ではなく<code>select</code>を使いましょう。</li>\n    </ol>\n    \n    <div class="code-block"># 単純なデータ取得にはpluck<br>emails = User.pluck(:email)<br><br># モデルのメソッドも使いたい場合はselect<br>active_users = User.select(:id, :name, :email).where(active: true)<br>active_users.each do |user|<br>    user.send_notification # モデルのメソッドが使える<br>end</div>\n    \n    <div class="note">\n        <p><strong>パフォーマンスのヒント：</strong> SQLクエリの実行回数を減らすため、連鎖したメソッド呼び出しの最後に<code>pluck</code>を配置するようにしましょう。</p>\n    </div>\n</div>	1
264	2024-08-21 07:24:45	2025-03-23 06:43:51.722952	4	19	ユーザー認証	\N	app/controllers/login_controller.rb	class LoginController < ApplicationController\\n  def index\\n  end\\n\\n  def post\\n    user = User.find_by(username: params[:username])\\n    if user&.authenticate(params[:password])\\n        session[:username] = user.username\\n        redirect_to test_path , notice: "ログインしました"\\n    else\\n        flash.now[:notice] = "ユーザー名またはパスワードが正しくありません"\\n        render :index, status: :unprocessable_entity\\n    end\\n  end\\n\\n  def delete\\n    session.delete(:username)\\n    redirect_to login_path, notice: "ログアウトしました"\\n  end\\nend	app/controllers/test_controller.rb	class TestController < ApplicationController\\n  before_action :authenticate_user\\n\\n  def authenticate_user\\n    @current_user ||= User.find_by(username: session[:username]) if session[:username]\\n    redirect_to login_path, alert: "ログインが必要です" unless @current_user\\n  end\\n\\n  def index\\n  end\\nend	config/routes.rb	Rails.application.routes.draw do\\n  get 'login', to: 'login#index'\\n  post 'login', to: 'login#post'\\n  delete 'login', to: vie'login#delete'\\n\\n  get "test" => 'test#index'\\nend	<div class="step">\n    <h2><span class="step-number">1</span>認証システムの概要</h2>\n    <p>この例では、ログインしていない状態ではログインページにリダイレクトされるようにする認証システムを実装しています。</p>\n\n    <div class="note">\n        <p><strong>重要：</strong> ユーザー認証の流れは大きく分けて、ログイン処理（セッションの作成）、ログイン状態の維持（セッションの確認）、ログアウト処理（セッションの削除）の3つになります。</p>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>コントローラーの実装</h2>\n    <p>ログイン処理を行うLoginControllerを実装します：</p>\n    \n    <div class="code-block">\n        <pre>class LoginController < ApplicationController\n  def index\n    # ログインフォームを表示\n  end\n\n  def post\n    # ユーザー名でユーザーを検索\n    user = User.find_by(username: params[:username])\n    \n    # ユーザーが存在し、パスワードが正しいか確認\n    if user&.authenticate(params[:password])\n      # セッションにユーザー名を保存\n      session[:username] = user.username\n      redirect_to root_path, notice: "ログインしました"\n    else\n      # 認証失敗時\n      flash.now[:alert] = "ユーザー名またはパスワードが正しくありません"\n      render :index, status: :unprocessable_entity\n    end\n  end\n  \n  def delete\n    # セッションからユーザー名を削除してログアウト\n    session.delete(:username)\n    redirect_to login_path, notice: "ログアウトしました"\n  end\nend</pre>\n    </div>\n    \n    <p><code>if user&.authenticate(params[:password])</code>の部分でuserのデータの存在確認、ビューから送られてきたパスワードが正しいかの確認を行っています。<code>.authenticate(引数)</code>は引数をハッシュ化し、モデルの<code>password_digest</code>フィールドと照合を行っています。</p>\n    \n    <p><code>render :index, status: :unprocessable_entity</code>の<code>status: :unprocessable_entity</code>はHTTPステータスコード422（バリデーションエラーなどの理由でリソースの状態が正しくない）を返すという意味です。</p>\n    \n    <p><code>session.delete(:username)</code>として<code>session[:username]</code>を削除することでログアウト状態にしています。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>認証フィルターの実装</h2>\n    <p>ログイン状態を確認するフィルターを実装し、保護されたコントローラーに適用します：</p>\n    \n    <div class="code-block">\n        <pre>class TestController < ApplicationController\n  # コントローラーのアクションが実行される前に認証を確認\n  before_action :authenticate_user\n  \n  def index\n    # ログイン済みユーザーだけがアクセスできるアクション\n  end\n  \n  private\n  \n  # 現在のユーザーを取得・キャッシュするヘルパーメソッド\n  def current_user\n    @current_user ||= User.find_by(username: session[:username]) if session[:username]\n  end\n  \n  # ログインしていない場合はログインページにリダイレクト\n  def authenticate_user\n    redirect_to login_path, alert: "ログインが必要です" unless current_user\n  end\nend</pre>\n    </div>\n    \n    <p><code>before_action :authenticate_user</code>でメソッドの実行前に<code>authenticate_user</code>メソッドを実行し、ログイン状態の確認を行うようにしています。</p>\n    \n    <p><code>@current_user ||= User.find_by(username: session[:username]) if session[:username]</code>における<code>@current_user ||=</code>は<code>@current_user</code>が未定義、nil、false時にはその後ろの部分を代入するようにしています。このようにすることでセッションのキャッシュを再利用することができます。</p>\n    \n    <p><code>if session[:username]</code>は<code>session[:username]</code>が定義済みでnil、false以外が代入されているときに<code>@current_user ||= User.find_by(username: session[:username])</code>を実行するという意味になります。</p>\n    \n    <p><code>redirect_to login_path, alert: "ログインが必要です" unless current_user</code>の<code>unless current_user</code>は<code>current_user</code>が未定義、nil、false時にはその前の<code>redirect_to login_path, alert: "ログインが必要です"</code>を実行するという内容になっています。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>ルーティング設定</h2>\n    <p>認証システムのためのルーティングを設定します：</p>\n    \n    <div class="code-block">\n        <pre>Rails.application.routes.draw do\n  # ログインフォーム表示\n  get '/login', to: 'login#index', as: 'login'\n  \n  # ログイン処理\n  post '/login', to: 'login#post'\n  \n  # ログアウト処理\n  delete '/logout', to: 'login#delete', as: 'logout'\n  \n  # 保護されたリソース\n  resources :tests, only: [:index]\n  \n  # ルートページ\n  root 'home#index'\nend</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>ビューの実装</h2>\n    <p>ログインフォームの例（app/views/login/index.html.erb）：</p>\n    \n    <div class="code-block">\n        <pre>&lt;h1&gt;ログイン&lt;/h1&gt;\n\n&lt;% if flash[:alert] %&gt;\n  &lt;div class="alert"&gt;\n    &lt;%= flash[:alert] %&gt;\n  &lt;/div&gt;\n&lt;% end %&gt;\n\n&lt;%= form_with url: login_path, method: :post do |form| %&gt;\n  &lt;div class="field"&gt;\n    &lt;%= form.label :username, 'ユーザー名' %&gt;\n    &lt;%= form.text_field :username, required: true %&gt;\n  &lt;/div&gt;\n  \n  &lt;div class="field"&gt;\n    &lt;%= form.label :password, 'パスワード' %&gt;\n    &lt;%= form.password_field :password, required: true %&gt;\n  &lt;/div&gt;\n  \n  &lt;div class="actions"&gt;\n    &lt;%= form.submit 'ログイン' %&gt;\n  &lt;/div&gt;\n&lt;% end %&gt;</pre>\n    </div>\n    \n    <p>ナビゲーションバーにログイン状態を表示する例（app/views/layouts/_navbar.html.erb）：</p>\n    \n    <div class="code-block">\n        <pre>&lt;nav&gt;\n  &lt;%= link_to 'ホーム', root_path %&gt;\n  \n  &lt;% if session[:username] %&gt;\n    &lt;span&gt;ようこそ、&lt;%= session[:username] %&gt;さん&lt;/span&gt;\n    &lt;%= button_to 'ログアウト', logout_path, method: :delete %&gt;\n  &lt;% else %&gt;\n    &lt;%= link_to 'ログイン', login_path %&gt;\n  &lt;% end %&gt;\n&lt;/nav&gt;</pre>\n    </div>\n</div>\n\n<div class="note">\n    <p><strong>補足：</strong></p>\n    <ul>\n        <li>本格的な認証システムを構築する場合は、<code>devise</code>や<code>sorcery</code>などのgemを使用することも検討してください。</li>\n        <li>本例ではusernameをセッションに保存していますが、実際にはユーザーIDを保存する方が一般的です。</li>\n        <li>セキュリティを高めるために、<code>has_secure_password</code>に加えて、パスワードの複雑さや長さのバリデーションを追加することを検討してください。</li>\n        <li>重要なアクションに対しては、CSRF（クロスサイトリクエストフォージェリ）対策として、フォーム内に<code>authenticity_token</code>が自動的に含まれるようになっています。</li>\n    </ul>\n</div>	19
276	2024-08-22 07:03:11	2024-08-22 07:09:47	1	1	テーブル	<table>\\n  <thead>\\n    <tr><th>名前</th>\\n    <th>年齢</th>\\n  </tr></thead><thead>\\n\\n  </thead><tbody>\\n    <tr>\\n      <td>test</td>\\n      <td>20</td>\\n    </tr><tr>\\n\\n    </tr><tr>\\n      <td>test2</td>\\n      <td>30</td>\\n    </tr>\\n  </tbody>\\n</table>	test.html	<table>\\n  <thead>\\n    <th>名前</th>\\n    <th>年齢</th>\\n  <thead>\\n\\n  <tbody>\\n    <tr>\\n      <td>test</td>\\n      <td>20</td>\\n    <tr>\\n\\n    <tr>\\n      <td>test2</td>\\n      <td>30</td>\\n    </tr>\\n  </tbody>\\n</table>	\N	\N	\N	\N	テーブルとは表のことです。<br><br>&lt;thead&gt;部は、見出しを記入する部分となっています。<br>見出しの項目は<br><div class="code-block">&lt;th&gt;見出し&lt;th&gt;</div><br>の形式で記入します。<br><br>&lt;tbody&gt;部は、各行のデータを記入する部分となっています。<br>&lt;tr&gt;行のデータ&lt;/tr&gt;までが1行となっており、<br>&lt;td&gt;から&lt;/td&gt;<br>が1つのセルとなっています。	6
278	2024-08-22 07:22:53	2024-08-22 07:27:37	1	1	テーブルのセルを横に結合する	<table>\\n  <thead>\\n      <tr><th>名前</th>\\n      <th>test</th>\\n      <th>test</th>\\n  </tr></thead>\\n\\n  <tbody>\\n    <tr>\\n      <td>test</td>\\n      <td colspan="2" style="text-align: center">test</td>\\n    </tr>\\n  </tbody>\\n</table>	test.html	<table>\\n  <thead>\\n      <th>名前</th>\\n      <th>test</th>\\n      <th>test</th>\\n  </thead>\\n\\n  <tbody>\\n    <tr>\\n      <td>test</td>\\n      <td colspan=2>test</td>\\n    </tr>\\n  </tbody>\\n</table>	\N	\N	\N	\N	セルを横に結合するには、<br><div class="code-block">&lt;td colspan=結合するセル数&gt;セルの内容&lt;td&gt;</div><br>の形式で記入します。	8
280	2024-08-22 15:20:18	2024-08-22 15:27:55	4	19	紐づいたモデルのデータをフィルタリングして取得する	\N	app/controllers/test_controller.rb	class TestController < ApplicationController\\n  def index\\n    @companys = Company.includes(:employees).where(id: 1,employees: { id: 1..10, name: 'test' })\\n  end\\nend	\N	\N	\N	\N	紐づいたデータをフィルタリングしてから取得するには、<br><div class="code-block">モデル.includes(:紐づけるモデル).where(紐づけるモデル: {条件})</div><br>の形式で記入します。<br><br>上の例では、idが1のCompanyモデルとそれに紐づいていてidが1～10でnameがtestのEmployeeモデルのデータを取得しています。<br>1..10は1から10という意味になります。<br><br>実用時は、<br><div class="code-block">employees_filter = { id: 1..1, name: 'test' }<br>@companys = Company.includes(:employees).where(id: 7,employees: employees_filter)</div><br>のように紐づいたモデルのフィルタリングを変数に入れておいた方が見やすくなると思います。	27
271	2024-08-21 17:47:11	2025-03-23 06:49:07.579698	4	19	グルーピングを行う	\N	app/controllers/test_controller.rb	class TestController < ApplicationController\\n  def index\\n    @test = Person.group(:age).count\\n  end\\nend	app/views/test/index.html.erb	<table>\\n  <thead>\\n    <th>年齢</th>\\n    <th>人数</th>\\n  </thead>\\n\\n  <% @test.each do |val| %>\\n    <tr>\\n      <td><%= val[0] %></td>\\n      <td><%= val[1] %></td>\\n    </tr>\\n  <% end %>\\n</table>	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>グループ化の基本</h2>\n    <p>フィールドの値ごとにデータをグルーピングするには、<code>group</code>メソッドを使用します：</p>\n    \n    <div class="code-block">\n        <pre>モデル.group(フィールド)</pre>\n    </div>\n    \n    <p>例えば、Personモデルを年齢でグループ化する場合：</p>\n    \n    <div class="code-block">\n        <pre>Person.group(:age)</pre>\n    </div>\n    \n    <p>これにより、年齢ごとにグループ化されたPersonモデルのデータが取得できます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>グループ化と集計の組み合わせ</h2>\n    <p>グループ化したデータの件数を数えるには、<code>count</code>メソッドと組み合わせます：</p>\n    \n    <div class="code-block">\n        <pre>Person.group(:age).count</pre>\n    </div>\n    \n    <p>上の例では、Personモデルを年齢ごとにグルーピングし、それぞれの件数を数えています。これにより、年齢ごとの人数を示すハッシュが返されます：</p>\n    \n    <div class="code-block">\n        <pre># 戻り値の例\n{20=>5, 25=>8, 30=>12, 35=>7, 40=>3}</pre>\n    </div>\n    \n    <p>このハッシュでは、キーが年齢、値がその年齢の人数を表しています。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>複数フィールドでのグループ化</h2>\n    <p>複数のフィールドでグループ化することも可能です：</p>\n    \n    <div class="code-block">\n        <pre>Person.group(:age, :gender).count</pre>\n    </div>\n    \n    <p>これにより、年齢と性別の組み合わせごとの人数が取得できます：</p>\n    \n    <div class="code-block">\n        <pre># 戻り値の例\n{[20, "男性"]=>3, [20, "女性"]=>2, [25, "男性"]=>4, [25, "女性"]=>4, ...}</pre>\n    </div>\n    \n    <p>複数フィールドでグループ化する場合、キーは配列になります。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>条件付きグループ化</h2>\n    <p><code>where</code>メソッドを使って、特定の条件に一致するデータだけをグループ化することができます：</p>\n    \n    <div class="code-block">\n        <pre>Person.where("age >= ?", 20).group(:gender).count</pre>\n    </div>\n    \n    <p>この例では、20歳以上の人を性別ごとにグループ化して、それぞれの人数を数えています。</p>\n    \n    <div class="code-block">\n        <pre># 戻り値の例\n{"男性"=>35, "女性"=>28}</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>他の集計関数との組み合わせ</h2>\n    <p><code>count</code>以外にも、<code>sum</code>、<code>average</code>、<code>minimum</code>、<code>maximum</code>などの集計関数と組み合わせることができます：</p>\n    \n    <div class="code-block">\n        <pre># 年齢層ごとの給料合計\nPerson.group(:age_group).sum(:salary)\n\n# 部署ごとの平均年齢\nPerson.group(:department).average(:age)\n\n# 性別ごとの最高年齢\nPerson.group(:gender).maximum(:age)\n\n# 性別ごとの最低年齢\nPerson.group(:gender).minimum(:age)</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">6</span>グループ化結果の活用例</h2>\n    <p>コントローラーでグループ化したデータを取得し、ビューで表示する例：</p>\n    \n    <div class="code-block">\n        <pre>class StatisticsController < ApplicationController\n  def index\n    # 年齢ごとの人数を取得\n    @age_stats = Person.group(:age).count\n    \n    # 部署ごとの平均給料を取得\n    @salary_stats = Person.group(:department).average(:salary)\n    \n    # 年齢層と性別ごとの人数を取得\n    @detailed_stats = Person.group(:age_group, :gender).count\n  end\nend</pre>\n    </div>\n    \n    <p>ビュー（ERB）でのグループ化データの表示例：</p>\n    \n    <div class="code-block">\n        <pre>&lt;h2&gt;年齢別人数統計&lt;/h2&gt;\n&lt;table&gt;\n  &lt;tr&gt;\n    &lt;th&gt;年齢&lt;/th&gt;\n    &lt;th&gt;人数&lt;/th&gt;\n  &lt;/tr&gt;\n  &lt;% @age_stats.each do |age, count| %&gt;\n    &lt;tr&gt;\n      &lt;td&gt;&lt;%= age %&gt;歳&lt;/td&gt;\n      &lt;td&gt;&lt;%= count %&gt;人&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;% end %&gt;\n&lt;/table&gt;\n\n&lt;h2&gt;部署別平均給料&lt;/h2&gt;\n&lt;table&gt;\n  &lt;tr&gt;\n    &lt;th&gt;部署&lt;/th&gt;\n    &lt;th&gt;平均給料&lt;/th&gt;\n  &lt;/tr&gt;\n  &lt;% @salary_stats.each do |department, avg_salary| %&gt;\n    &lt;tr&gt;\n      &lt;td&gt;&lt;%= department %&gt;&lt;/td&gt;\n      &lt;td&gt;&lt;%= number_to_currency(avg_salary) %&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;% end %&gt;\n&lt;/table&gt;</pre>\n    </div>\n</div>\n\n<div class="note">\n    <p><strong>補足：</strong></p>\n    <ul>\n        <li>グループ化は、データの分析や統計情報の作成に非常に便利です。</li>\n        <li>複雑なグループ化や集計が必要な場合は、SQLの<code>GROUP BY</code>句を直接使うこともできます。</li>\n        <li>大量のデータをグループ化する場合は、インデックスの追加を検討してください。</li>\n        <li>グループ化と<code>joins</code>や<code>includes</code>を組み合わせることで、関連テーブルを含めた分析も可能です。</li>\n    </ul>\n</div>	22
272	2024-08-21 17:54:26	2025-03-23 06:50:13.934369	4	19	データが存在するか確認する	\N	app/controllers/test_controller.rb	class TestController < ApplicationController\\n  def index\\n    @test = Person.where('age >= 20').exists?\\n  end\\nend	\N	\N	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>exists?メソッドの基本</h2>\n    <p>データが存在するかどうかを確認するには、<code>exists?</code>メソッドを使用します：</p>\n    \n    <div class="code-block">\n        <pre>モデル.exists?</pre>\n    </div>\n    \n    <p>このメソッドは、データがある場合は<code>true</code>、ない場合は<code>false</code>を返します。</p>\n    \n    <div class="code-block">\n        <pre>Person.exists?  # => テーブルにデータがあればtrue、なければfalse</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>条件付きのデータ存在確認</h2>\n    <p>特定の条件に一致するデータが存在するかを確認する場合は、<code>where</code>と組み合わせるか、<code>exists?</code>に条件を直接指定します：</p>\n    \n    <div class="code-block">\n        <pre># 方法1: whereと組み合わせる\nPerson.where("age >= ?", 20).exists?\n\n# 方法2: exists?に直接条件を指定\nPerson.exists?("age >= ?", 20)</pre>\n    </div>\n    \n    <p>上の例では、Personモデルのageフィールドが20以上のデータが存在するか確認しています。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>特定のIDやフィールド値での存在確認</h2>\n    <p>特定のIDを持つレコードが存在するかを確認する場合：</p>\n    \n    <div class="code-block">\n        <pre># IDが5のレコードが存在するか\nPerson.exists?(5)\nPerson.exists?(id: 5)  # 同じ意味</pre>\n    </div>\n    \n    <p>特定のフィールド値を持つレコードが存在するかを確認する場合：</p>\n    \n    <div class="code-block">\n        <pre># nameが"山田太郎"のレコードが存在するか\nPerson.exists?(name: "山田太郎")\n\n# emailが特定の値のレコードが存在するか\nPerson.exists?(email: "example@test.com")</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>複数条件での存在確認</h2>\n    <p>複数の条件を組み合わせて存在確認を行う場合：</p>\n    \n    <div class="code-block">\n        <pre># 30歳以上の男性が存在するか\nPerson.exists?(age: 30..100, gender: "男性")\n\n# 特定の部署の管理職が存在するか\nPerson.exists?(department: "営業部", position: "マネージャー")</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>関連付けを使った存在確認</h2>\n    <p>関連するモデルのデータが存在するかを確認する場合：</p>\n    \n    <div class="code-block">\n        <pre># ユーザーが投稿を持っているか確認\nuser = User.find(1)\nuser.posts.exists?\n\n# 特定のカテゴリの記事が存在するか確認\ncategory = Category.find_by(name: "Rails")\ncategory.articles.exists?\n\n# 条件付きで関連データの存在を確認\nuser.posts.exists?(published: true)  # 公開済みの投稿があるか</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">6</span>実践的な使用例</h2>\n    <p>コントローラーでの<code>exists?</code>メソッドの活用例：</p>\n    \n    <div class="code-block">\n        <pre>class UsersController < ApplicationController\n  def show\n    unless User.exists?(params[:id])\n      flash[:alert] = "指定されたユーザーは存在しません"\n      redirect_to users_path\n      return\n    end\n    \n    @user = User.find(params[:id])\n  end\n  \n  def admin_dashboard\n    # 管理者が存在しない場合は初期セットアップへ\n    unless User.exists?(role: "admin")\n      redirect_to setup_admin_path\n      return\n    end\n    \n    # ダッシュボードの処理\n  end\nend</pre>\n    </div>\n    \n    <p>条件分岐での活用例：</p>\n    \n    <div class="code-block">\n        <pre># 特定の条件のデータが存在するかで処理を分ける\nif Person.exists?(age: 65..nil)\n  # 65歳以上の人がいる場合の処理\n  @has_seniors = true\nelse\n  # 65歳以上の人がいない場合の処理\n  @has_seniors = false\nend</pre>\n    </div>\n</div>\n\n<div class="note">\n    <p><strong>補足：</strong></p>\n    <ul>\n        <li><code>exists?</code>メソッドは、データの内容を取得するのではなく、存在の有無だけを確認するため、大規模なデータセットでは<code>any?</code>や<code>present?</code>よりも効率的です。</li>\n        <li>内部的には<code>EXISTS</code>というSQLクエリが実行され、最初のレコードが見つかった時点で処理が終了します。</li>\n        <li>条件チェックが複雑な場合は、<code>where</code>と組み合わせて使用することでより柔軟な条件指定が可能です。</li>\n    </ul>\n</div>	23
273	2024-08-21 18:05:40	2025-03-23 06:51:10.637919	4	19	モデルのデータをまとめて削除する	\N	app/controllers/test_controller.rb	class TestController < ApplicationController\\n  def index\\n    Employee.where('id <= 10').delete_all\\n    @test = Employee.count\\n  end\\nend	\N	\N	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>delete_allメソッドの基本</h2>\n    <p>モデルのデータをまとめて削除するには、<code>delete_all</code>メソッドを使用します：</p>\n    \n    <div class="code-block">\n        <pre>モデル.delete_all</pre>\n    </div>\n    \n    <p>このメソッドを実行すると、該当するモデルのすべてのレコードが一度に削除されます。</p>\n    \n    <div class="code-block">\n        <pre>Employee.delete_all  # Employeeテーブルの全レコードを削除</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>条件付きデータ削除</h2>\n    <p>特定の条件に一致するデータだけを削除したい場合は、<code>where</code>メソッドと組み合わせて使用します：</p>\n    \n    <div class="code-block">\n        <pre>Employee.where("id <= ?", 20).delete_all</pre>\n    </div>\n    \n    <p>上の例では、Employeeモデルのidが20以下のデータを削除しています。</p>\n    \n    <p>他の条件指定の例：</p>\n    \n    <div class="code-block">\n        <pre># 退職済みの従業員を削除\nEmployee.where(status: "退職").delete_all\n\n# 特定の部署の従業員を削除\nEmployee.where(department: "営業部").delete_all\n\n# 1年以上更新されていないレコードを削除\nEmployee.where("updated_at < ?", 1.year.ago).delete_all</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>delete_allとdestroy_allの違い</h2>\n    <p>Railsには似たような機能を持つ<code>destroy_all</code>メソッドもありますが、重要な違いがあります：</p>\n    \n    <div class="note">\n        <p><strong>delete_all:</strong></p>\n        <ul>\n            <li>SQLの<code>DELETE</code>文を直接実行するため高速</li>\n            <li>モデルのコールバックは実行されない</li>\n            <li>関連するレコードは自動削除されない（<code>dependent: :destroy</code>は無視される）</li>\n        </ul>\n        \n        <p><strong>destroy_all:</strong></p>\n        <ul>\n            <li>各レコードに対して<code>destroy</code>メソッドを呼び出すため遅い</li>\n            <li>モデルのコールバックが実行される</li>\n            <li>関連するレコードも適切に処理される（<code>dependent: :destroy</code>が機能する）</li>\n        </ul>\n    </div>\n    \n    <p>適切なメソッドの選択：</p>\n    <ul>\n        <li>単純にデータを削除するだけなら<code>delete_all</code>が高速</li>\n        <li>関連するレコードも削除したい場合や、コールバックが必要な場合は<code>destroy_all</code>を使用</li>\n    </ul>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>delete_allの戻り値</h2>\n    <p><code>delete_all</code>メソッドは、削除されたレコードの数を整数で返します：</p>\n    \n    <div class="code-block">\n        <pre>deleted_count = Employee.where(department: "営業部").delete_all\nputs "#{deleted_count}件のレコードが削除されました"</pre>\n    </div>\n    \n    <p>この戻り値を使用して、削除処理の結果をユーザーに通知したり、ログに記録したりすることができます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>実践的な使用例</h2>\n    <p>コントローラーでの実際の使用例：</p>\n    \n    <div class="code-block">\n        <pre>class EmployeesController < ApplicationController\n  def bulk_delete\n    if params[:department].present?\n      # 特定の部署の従業員を削除\n      count = Employee.where(department: params[:department]).delete_all\n      flash[:notice] = "#{count}人の#{params[:department]}の従業員を削除しました"\n    elsif params[:before_date].present?\n      # 特定の日付より前に登録された従業員を削除\n      date = Date.parse(params[:before_date])\n      count = Employee.where("created_at < ?", date).delete_all\n      flash[:notice] = "#{date.strftime('%Y年%m月%d日')}より前に登録された#{count}人の従業員を削除しました"\n    else\n      flash[:alert] = "削除条件が指定されていません"\n    end\n    \n    redirect_to employees_path\n  end\n  \n  def clear_inactive\n    # 90日以上ログインしていないユーザーを削除\n    count = Employee.where("last_login_at < ?", 90.days.ago).delete_all\n    \n    respond_to do |format|\n      format.html {\n        flash[:notice] = "#{count}人の非アクティブユーザーを削除しました"\n        redirect_to admin_dashboard_path\n      }\n      format.json {\n        render json: { deleted_count: count, status: "success" }\n      }\n    end\n  end\nend</pre>\n    </div>\n</div>\n\n<div class="note">\n    <p><strong>注意事項:</strong></p>\n    <ul>\n        <li><code>delete_all</code>は元に戻せない操作なので、実行前にバックアップを取ることをお勧めします。</li>\n        <li>本番環境で大量のデータを削除する場合は、データベースのパフォーマンスに影響する可能性があるため、オフピーク時に実行することを検討してください。</li>\n        <li>関連データの整合性を保つため、外部キー制約がある場合は特に注意が必要です。</li>\n        <li>大規模なデータ削除はトランザクション内で行うとより安全です。</li>\n    </ul>\n</div>	24
274	2024-08-21 20:12:29	2025-03-23 06:52:26.11845	4	19	データの追加(紐づいているモデルあり)	\N	app/controllers/test_controller.rb	class TestController < ApplicationController\\n  def index\\n    Employee.create(name: 'test', company_id: 1)\\n  end\\nend	app/models/company.rb	class Company < ApplicationRecord\\n  has_many :employees\\nend	app/models/employee.rb	class Employee < ApplicationRecord\\n  belongs_to :company\\nend	<div class="step">\n    <h2><span class="step-number">1</span>関連モデルを持つデータの作成</h2>\n    <p>紐づいているモデルのフィールドがあるモデルのデータを追加するには、外部キーを使用して以下のように記述します：</p>\n    \n    <div class="code-block">\n        <pre>モデル.create(モデルと紐づけているフィールド_id: 紐づけるモデルのid)</pre>\n    </div>\n    \n    <p>例えば、Employeeモデル（多側）とCompanyモデル（1側）が関連付けられている場合：</p>\n    \n    <div class="code-block">\n        <pre>Employee.create(name: "山田太郎", company_id: 1)</pre>\n    </div>\n    \n    <p>上の例では、作成するEmployeeモデルとCompanyモデルのidが1のデータを紐づけています。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>関連オブジェクトを直接指定する方法</h2>\n    <p>外部キーの代わりに、関連オブジェクト自体を直接指定することもできます：</p>\n    \n    <div class="code-block">\n        <pre>company = Company.find(1)\nEmployee.create(name: "山田太郎", company: company)</pre>\n    </div>\n    \n    <p>このように記述しても、前の例と同じ内容となります。Railsが自動的に<code>company</code>から<code>company_id</code>を取得して設定します。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>build/newメソッドを使う方法</h2>\n    <p>関連付けを利用して新しいオブジェクトを作成する方法もあります：</p>\n    \n    <div class="code-block">\n        <pre>company = Company.find(1)\n\n# 方法1: buildメソッドを使用\nemployee = company.employees.build(name: "佐藤花子")\nemployee.save\n\n# 方法2: createメソッドを使用（buildとsaveを一度に行う）\nemployee = company.employees.create(name: "鈴木一郎")</pre>\n    </div>\n    \n    <p>この方法では、関連するCompanyが自動的に設定されるため、<code>company_id</code>を明示的に指定する必要がありません。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>ネストした属性を使う方法</h2>\n    <p>新しい関連オブジェクトを同時に作成する場合、<code>accepts_nested_attributes_for</code>を使用できます：</p>\n    \n    <div class="code-block">\n        <pre># モデル定義\nclass Company < ApplicationRecord\n  has_many :employees\n  accepts_nested_attributes_for :employees\nend\n\n# 使用例\nCompany.create(\n  name: "株式会社Rails",\n  employees_attributes: [\n    { name: "田中太郎" },\n    { name: "佐藤花子" }\n  ]\n)</pre>\n    </div>\n    \n    <p>この方法では、Companyと複数のEmployeeを一度に作成できます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>関連付けを使った実践例</h2>\n    <p>コントローラーでの実際の使用例：</p>\n    \n    <div class="code-block">\n        <pre>class EmployeesController < ApplicationController\n  def create\n    @company = Company.find(params[:company_id])\n    \n    # 方法1: 外部キーを使用\n    @employee = Employee.new(employee_params)\n    @employee.company_id = @company.id\n    \n    # または 方法2: オブジェクトを直接指定\n    # @employee = Employee.new(employee_params)\n    # @employee.company = @company\n    \n    # または 方法3: 関連付けを利用\n    # @employee = @company.employees.build(employee_params)\n    \n    if @employee.save\n      redirect_to company_employees_path(@company), notice: "社員を登録しました"\n    else\n      render :new\n    end\n  end\n  \n  private\n  \n  def employee_params\n    params.require(:employee).permit(:name, :email, :position)\n  end\nend</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">6</span>フォームでの実装例</h2>\n    <p>フォームで関連モデルを選択する例：</p>\n    \n    <div class="code-block">\n        <pre>&lt;%= form_with model: @employee do |form| %&gt;\n  &lt;div class="field"&gt;\n    &lt;%= form.label :name, "名前" %&gt;\n    &lt;%= form.text_field :name %&gt;\n  &lt;/div&gt;\n  \n  &lt;div class="field"&gt;\n    &lt;%= form.label :company_id, "所属会社" %&gt;\n    &lt;%= form.collection_select :company_id, Company.all, :id, :name %&gt;\n  &lt;/div&gt;\n  \n  &lt;div class="actions"&gt;\n    &lt;%= form.submit "登録" %&gt;\n  &lt;/div&gt;\n&lt;% end %&gt;</pre>\n    </div>\n    \n    <p>この例では、ドロップダウンリストから関連するCompanyを選択できます。</p>\n</div>\n\n<div class="note">\n    <p><strong>補足：</strong></p>\n    <ul>\n        <li>関連モデルを作成する際は、モデル間の関連付け（<code>belongs_to</code>/<code>has_many</code>）が正しく設定されていることを確認してください。</li>\n        <li>Rails 5以降では、<code>belongs_to</code>関連は標準で必須（<code>null: false</code>）となっているため、関連オブジェクトが設定されていないと保存できません。</li>\n        <li>任意の関連にするには、モデルに<code>optional: true</code>オプションを追加します（例：<code>belongs_to :company, optional: true</code>）。</li>\n        <li>大量のデータを一度に作成する場合は、バッチ処理やトランザクションの使用を検討してください。</li>\n    </ul>\n</div>	25
277	2024-08-22 07:16:51	2024-08-22 07:16:51	1	1	テーブルのセルを縦に結合する	<table>\\n  <thead>\\n      <th>名前</th>\\n      <th>好物</th>\\n  </thead>\\n\\n  <tbody>\\n    <tr>\\n      <td rowspan=2>test</td>\\n      <td>ハンバーグ</td>\\n    </tr>\\n    <tr>\\n      <td>唐揚げ</td>\\n    </tr>\\n  </tbody>\\n</table>	test.html	<table>\\\\\\\\r\\n  <thead>\\\\\\\\r\\n      <th>名前</th>\\\\\\\\r\\n      <th>好物</th>\\\\\\\\r\\n  </thead>\\\\\\\\r\\n\\\\\\\\r\\n  <tbody>\\\\\\\\r\\n    <tr>\\\\\\\\r\\n      <td rowspan=2>test</td>\\\\\\\\r\\n      <td>ハンバーグ</td>\\\\\\\\r\\n    </tr>\\\\\\\\r\\n    <tr>\\\\\\\\r\\n      <td>唐揚げ</td>\\\\\\\\r\\n    </tr>\\\\\\\\r\\n  </tbody>\\\\\\\\r\\n</table>	\N	\N	\N	\N	テーブルのセルを縦に結合するには、\\n<td rowspan=行数>セルのデータ</td>\\nの形式で記入します。\\n\\n上の例では、testの行をrowspan=2として2行分として表示しています。	7
85	2024-06-28 09:16:11	2024-06-28 09:20:06	1	5	null合体演算子	1	PHP	<?php\\n\\\\\\\\t$a??$a=1;\\n\\\\\\\\techo $a;	\N	\N	\N	\N	上の例では、$aが未定義もしくはnullの場合は$aに1を代入しています。<br>$aがすでに代入されている場合は1が代入されずに元の値のままとなります。<br><br>この??のことをnull合体演算子といいます。	39
205	2024-08-02 23:45:43	2024-08-02 23:48:33	1	17	可変長引数	1\\n[2, 3]	Ruby	def test(val, *val2)\\n  puts val\\n  p(val2)\\nend\\n\\ntest(1, 2, 3)	\N	\N	\N	\N	仮引数の前に*を付けることで複数の引数を配列として受け取ることができます。<br><br>上の例では、valには1が代入され、それ以降の引数はval2にリスト形式で代入されています。	20
269	2024-08-21 17:33:38	2025-03-23 06:45:28.749381	4	19	データの件数を数える	\N	app/controllers/test_controller.rb	class TestController < ApplicationController\\\\\\\\r\\n  def index\\\\\\\\r\\n    @test = Person.where('age >= 20').count\\\\\\\\r\\n  end\\\\\\\\r\\nend	\N	\N	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>基本的なカウント方法</h2>\n    <p>データの件数を数えるには、<code>count</code>メソッドを使用します：</p>\n    \n    <div class="code-block">\n        <pre>モデル.count</pre>\n    </div>\n    \n    <p>例えば、Userモデルの全レコード数を取得する場合：</p>\n    \n    <div class="code-block">\n        <pre>User.count  # => 例：25（ユーザーの総数）</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>条件付きカウント</h2>\n    <p>特定の条件に一致するレコード数を数える場合は、<code>where</code>メソッドと組み合わせて使用します：</p>\n    \n    <div class="code-block">\n        <pre>User.where(age: 20..30).count  # => 20〜30歳のユーザー数\nUser.where("age >= ?", 20).count  # => 20歳以上のユーザー数\nUser.where(active: true).count  # => アクティブなユーザー数</pre>\n    </div>\n    \n    <p>上の例では、ageフィールドが20以上のデータの件数を数えています。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>関連付けデータのカウント</h2>\n    <p>関連付けられたモデルのレコード数を数える場合も同様に<code>count</code>メソッドが使えます：</p>\n    \n    <div class="code-block">\n        <pre># あるユーザーの投稿数\nuser = User.find(1)\nuser.posts.count  # => このユーザーの投稿数\n\n# 全ユーザーの総投稿数\nPost.count  # => 全投稿数</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>グループ化してカウント</h2>\n    <p><code>group</code>メソッドを使用して、特定のフィールドでグループ化した件数を取得できます：</p>\n    \n    <div class="code-block">\n        <pre># 年齢ごとのユーザー数を取得\nUser.group(:age).count\n# => {20=>5, 21=>3, 22=>7, ...}\n\n# 都道府県ごとのユーザー数を取得\nUser.group(:prefecture).count\n# => {"東京"=>120, "大阪"=>85, "北海道"=>42, ...}</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>countメソッドの最適化</h2>\n    <p>大量のデータを扱う場合、パフォーマンスを考慮したカウント方法があります：</p>\n    \n    <div class="code-block">\n        <pre># size メソッド：すでにロードされているコレクションにはキャッシュを使用\nusers = User.where(active: true)\nusers.size  # => キャッシュされたカウント\n\n# exists? メソッド：レコードの存在だけを確認（高速）\nUser.where(email: "test@example.com").exists?  # => true/false</pre>\n    </div>\n    \n    <div class="note">\n        <p><strong>注意：</strong> <code>count</code>メソッドは毎回SQLの<code>COUNT(*)</code>クエリを発行します。すでにメモリにロードされたコレクションに対しては<code>size</code>や<code>length</code>メソッドの方が効率的な場合があります。</p>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">6</span>実践的な例</h2>\n    <p>コントローラーでカウント結果を表示する例：</p>\n    \n    <div class="code-block">\n        <pre>class UsersController < ApplicationController\n  def statistics\n    @total_users = User.count\n    @active_users = User.where(active: true).count\n    @adult_users = User.where("age >= ?", 20).count\n    @prefecture_stats = User.group(:prefecture).count\n    \n    # ビューで表示\n    # <%= @total_users %> 人のユーザーが登録しています\n  end\nend</pre>\n    </div>\n</div>\n\n<div class="note">\n    <p><strong>補足：</strong></p>\n    <ul>\n        <li><code>count</code>はSQLの<code>COUNT</code>関数を使用するため、データベースサーバーでカウント処理が行われます。</li>\n        <li>関連付けのカウントを頻繁に行う場合は、<code>counter_cache</code>を使用するとパフォーマンスが向上します。</li>\n        <li>複数テーブルを結合した複雑なカウントには<code>joins</code>と<code>count</code>を組み合わせることができます。</li>\n    </ul>\n</div>	20
281	2024-08-22 15:45:44	2025-03-23 06:55:35.886682	4	19	どれかの条件に一致した紐づいたモデルのデータを取得する	\N	app/controllers/test_controller.rb	class TestController < ApplicationController\\n  def index\\n    @companys = Company.includes(:employees)\\n      .where(employees: { id: 1..10 })\\n      .or(Company.includes(:employees).where(employees: { name: 'test' }))\\n  end\\nend	\N	\N	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>OR条件を使ったデータ取得</h2>\n    <p>どれかの条件に一致した紐づいたモデルのデータを取得するには、<code>or</code>メソッドを使います：</p>\n    \n    <div class="code-block">\n        <pre>モデル.includes(:取得したいモデル).where(条件).or(もう一つのORM)</pre>\n    </div>\n    \n    <p>この<code>or</code>メソッドを使うことで、SQLの<code>OR</code>句に相当する条件を指定できます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>基本的な使い方</h2>\n    <p>例えば、CompanyモデルとEmployeeモデルの関連データで、特定の条件に一致するEmployeeを取得する場合：</p>\n    \n    <div class="code-block">\n        <pre>Company.includes(:employees)\n       .where(employees: { id: 1..10 })\n       .or(Company.includes(:employees).where(employees: { name: "test" }))</pre>\n    </div>\n    \n    <p>上の例では、Companyモデルを全てと、それぞれに紐づいたidが1～10もしくはnameがtestのEmployeeモデルを取得しています。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>より簡潔な書き方</h2>\n    <p>上記の例はやや冗長ですが、<code>or</code>の両側で同じモデルや<code>includes</code>を使っている場合、以下のように書くこともできます：</p>\n    \n    <div class="code-block">\n        <pre>Company.includes(:employees)\n       .where(employees: { id: 1..10 })\n       .or(Company.where(employees: { name: "test" }))</pre>\n    </div>\n    \n    <p>さらに簡潔にするには：</p>\n    \n    <div class="code-block">\n        <pre>id_condition = Company.where(employees: { id: 1..10 })\nname_condition = Company.where(employees: { name: "test" })\n\nCompany.includes(:employees).merge(id_condition.or(name_condition))</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>複数のOR条件を組み合わせる</h2>\n    <p>3つ以上の条件を<code>OR</code>で連結する場合：</p>\n    \n    <div class="code-block">\n        <pre># 3つの条件のいずれかに一致するEmployeeを持つCompanyを取得\ncondition1 = Company.where(employees: { id: 1..10 })\ncondition2 = Company.where(employees: { name: "test" })\ncondition3 = Company.where(employees: { department: "営業部" })\n\nCompany.includes(:employees)\n       .merge(condition1.or(condition2).or(condition3))</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>OR条件とAND条件の組み合わせ</h2>\n    <p><code>or</code>メソッドと<code>where</code>を組み合わせて、複雑な条件を表現できます：</p>\n    \n    <div class="code-block">\n        <pre># (IDが1〜10のEmployee OR 名前がtestのEmployee) AND 在籍中のステータスを持つEmployeeを取得\nid_or_name_condition = Company.where(employees: { id: 1..10 })\n                              .or(Company.where(employees: { name: "test" }))\nactive_condition = Company.where(employees: { status: "在籍中" })\n\nCompany.includes(:employees)\n       .merge(id_or_name_condition)\n       .merge(active_condition)</pre>\n    </div>\n    \n    <p>これは以下のSQLに相当します：<br>\n    <code>WHERE (employees.id BETWEEN 1 AND 10 OR employees.name = 'test') AND employees.status = '在籍中'</code></p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">6</span>実践的な使用例</h2>\n    <p>コントローラーでの実際の使用例：</p>\n    \n    <div class="code-block">\n        <pre>class CompaniesController < ApplicationController\n  def index\n    @companies = Company.includes(:employees)\n    \n    # 検索パラメータが存在する場合、条件を追加\n    if params[:search].present?\n      # 名前またはメールアドレスで検索\n      name_condition = Company.where("employees.name LIKE ?", "%#{params[:search]}%")\n      email_condition = Company.where("employees.email LIKE ?", "%#{params[:search]}%")\n      \n      @companies = @companies.joins(:employees)\n                            .merge(name_condition.or(email_condition))\n                            .distinct\n    end\n    \n    # 部署フィルターがある場合\n    if params[:department].present?\n      @companies = @companies.where(employees: { department: params[:department] })\n    end\n    \n    # ページネーション\n    @companies = @companies.page(params[:page]).per(20)\n  end\nend</pre>\n    </div>\n    \n    <p>ビューでの例（app/views/companies/index.html.erb）：</p>\n    \n    <div class="code-block">\n        <pre>&lt;h1&gt;会社一覧&lt;/h1&gt;\n\n&lt;%= form_with url: companies_path, method: :get, local: true do |form| %&gt;\n  &lt;div class="search-form"&gt;\n    &lt;%= form.text_field :search, placeholder: "社員名またはメールで検索", value: params[:search] %&gt;\n    &lt;%= form.select :department, \n                    ["営業部", "技術部", "人事部", "経理部"], \n                    { include_blank: "部署で絞り込み" },\n                    { selected: params[:department] } %&gt;\n    &lt;%= form.submit "検索" %&gt;\n  &lt;/div&gt;\n&lt;% end %&gt;\n\n&lt;div class="companies"&gt;\n  &lt;% @companies.each do |company| %&gt;\n    &lt;div class="company-card"&gt;\n      &lt;h2&gt;&lt;%= company.name %&gt;&lt;/h2&gt;\n      &lt;p&gt;従業員数: &lt;%= company.employees.count %&gt;人&lt;/p&gt;\n      \n      &lt;h3&gt;従業員一覧&lt;/h3&gt;\n      &lt;ul&gt;\n        &lt;% company.employees.each do |employee| %&gt;\n          &lt;li&gt;\n            &lt;%= employee.name %&gt; \n            (&lt;%= employee.department %&gt;)\n            - &lt;%= employee.email %&gt;\n          &lt;/li&gt;\n        &lt;% end %&gt;\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  &lt;% end %&gt;\n&lt;/div&gt;\n\n&lt;%= paginate @companies %&gt;</pre>\n    </div>\n</div>\n\n<div class="note">\n    <p><strong>注意点：</strong></p>\n    <ul>\n        <li><code>or</code>メソッドを使う場合、両側のクエリのカラム数とデータ型が一致している必要があります。</li>\n        <li>複雑な<code>OR</code>条件を使用する場合は、生成されるSQLを確認し、パフォーマンスに注意しましょう。</li>\n        <li>大量のデータを扱う場合は、適切なインデックスを設定することでパフォーマンスを向上させることができます。</li>\n        <li><code>distinct</code>メソッドを使用すると、重複したレコードを除外できます。</li>\n        <li>Rails 5以降で<code>or</code>メソッドが導入されました。それ以前のバージョンでは別の方法が必要です。</li>\n    </ul>\n</div>	28
282	2024-08-22 16:47:45	2025-03-23 06:57:19.592349	4	19	合計値を取得する	\N	app/controllers/test_controller.rb	class TestController < ApplicationController\\n  def index\\n    @sum_sales = Sale.all.sum(:amount)\\n  end\\nend	\N	\N	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>sumメソッドの基本</h2>\n    <p>フィールドの合計値を取得するには、<code>sum</code>メソッドを使用します：</p>\n    \n    <div class="code-block">\n        <pre>モデル.sum(:フィールド)</pre>\n    </div>\n    \n    <p>このメソッドは指定したフィールドの合計値を計算して返します。</p>\n    \n    <div class="code-block">\n        <pre>Sale.sum(:amount)</pre>\n    </div>\n    \n    <p>上の例はSaleモデルのamountフィールドの合計を取得しています。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>条件付きの合計計算</h2>\n    <p><code>where</code>メソッドと組み合わせて、条件に一致するレコードの合計を計算できます：</p>\n    \n    <div class="code-block">\n        <pre># 今月の売上合計\nSale.where("created_at >= ?", Time.current.beginning_of_month).sum(:amount)\n\n# 特定の商品カテゴリーの売上合計\nSale.where(product_category: "電化製品").sum(:amount)\n\n# 特定の顧客の購入合計金額\nSale.where(customer_id: 5).sum(:amount)</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>グループ化した合計計算</h2>\n    <p><code>group</code>メソッドと組み合わせて、グループごとの合計を計算できます：</p>\n    \n    <div class="code-block">\n        <pre># 商品カテゴリーごとの売上合計\ncategory_totals = Sale.group(:product_category).sum(:amount)\n# => {"電化製品"=>250000, "家具"=>180000, "食品"=>45000}\n\n# 月ごとの売上合計\nmonthly_totals = Sale.group("DATE_FORMAT(created_at, '%Y-%m')").sum(:amount)\n# => {"2023-01"=>120000, "2023-02"=>180000, "2023-03"=>210000}</pre>\n    </div>\n    \n    <p>返り値はハッシュ形式で、キーがグループ化した値、値が合計値となります。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>関連モデルのフィールド合計</h2>\n    <p>関連するモデルのフィールド合計を取得する場合は、<code>joins</code>または<code>includes</code>と組み合わせて使います：</p>\n    \n    <div class="code-block">\n        <pre># 各顧客ごとの購入合計金額\ncustomer_totals = Customer.joins(:sales).group("customers.id").sum("sales.amount")\n\n# 特定の期間における各商品カテゴリーの売上合計\nProduct.joins(:sales)\n       .where("sales.created_at >= ?", 1.month.ago)\n       .group("products.category")\n       .sum("sales.amount")</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>計算式と組み合わせる</h2>\n    <p>単純なフィールド名だけでなく、計算式と組み合わせることもできます：</p>\n    \n    <div class="code-block">\n        <pre># 税込み合計金額を計算\nSale.sum("amount * 1.1")  # 10%の税を加算\n\n# 割引後の合計金額を計算\nSale.sum("amount * (1 - discount_rate)")\n\n# 複数フィールドの計算結果の合計\nOrder.sum("price * quantity")</pre>\n    </div>\n    \n    <p>これらの例では、SQL内で計算が行われてから合計が計算されます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">6</span>実践的な使用例</h2>\n    <p>コントローラーでの実際の使用例：</p>\n    \n    <div class="code-block">\n        <pre>class SalesController < ApplicationController\n  def dashboard\n    # 総売上\n    @total_sales = Sale.sum(:amount)\n    \n    # 今月の売上\n    @monthly_sales = Sale.where("created_at >= ?", Time.current.beginning_of_month).sum(:amount)\n    \n    # 前月の売上（前月比較用）\n    @previous_month_sales = Sale.where(created_at: 1.month.ago.beginning_of_month..1.month.ago.end_of_month)\n                                .sum(:amount)\n    \n    # カテゴリー別売上\n    @category_sales = Sale.group(:product_category).sum(:amount)\n    \n    # 営業担当者別売上\n    @salesperson_sales = Sale.joins(:salesperson)\n                             .group("salespeople.name")\n                             .sum(:amount)\n    \n    # 顧客上位5名の売上合計\n    @top_customers = Customer.joins(:sales)\n                             .group("customers.id")\n                             .select("customers.name, SUM(sales.amount) as total_amount")\n                             .order("total_amount DESC")\n                             .limit(5)\n  end\nend</pre>\n    </div>\n    \n    <p>ビューでの表示例（app/views/sales/dashboard.html.erb）：</p>\n    \n    <div class="code-block">\n        <pre>&lt;h1&gt;売上ダッシュボード&lt;/h1&gt;\n\n&lt;div class="summary-cards"&gt;\n  &lt;div class="card"&gt;\n    &lt;h2&gt;総売上&lt;/h2&gt;\n    &lt;p class="amount"&gt;&lt;%= number_to_currency(@total_sales) %&gt;&lt;/p&gt;\n  &lt;/div&gt;\n  \n  &lt;div class="card"&gt;\n    &lt;h2&gt;今月の売上&lt;/h2&gt;\n    &lt;p class="amount"&gt;&lt;%= number_to_currency(@monthly_sales) %&gt;&lt;/p&gt;\n    &lt;% if @previous_month_sales > 0 %&gt;\n      &lt;p class="comparison"&gt;\n        前月比: \n        &lt;% change_percent = (@monthly_sales - @previous_month_sales) / @previous_month_sales * 100 %&gt;\n        &lt;span class="&lt;%= change_percent >= 0 ? 'positive' : 'negative' %&gt;"&gt;\n          &lt;%= number_to_percentage(change_percent, precision: 1) %&gt;\n        &lt;/span&gt;\n      &lt;/p&gt;\n    &lt;% end %&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n&lt;h2&gt;カテゴリー別売上&lt;/h2&gt;\n&lt;table&gt;\n  &lt;tr&gt;\n    &lt;th&gt;カテゴリー&lt;/th&gt;\n    &lt;th&gt;売上金額&lt;/th&gt;\n    &lt;th&gt;構成比&lt;/th&gt;\n  &lt;/tr&gt;\n  &lt;% @category_sales.each do |category, amount| %&gt;\n    &lt;tr&gt;\n      &lt;td&gt;&lt;%= category %&gt;&lt;/td&gt;\n      &lt;td&gt;&lt;%= number_to_currency(amount) %&gt;&lt;/td&gt;\n      &lt;td&gt;&lt;%= number_to_percentage(amount / @total_sales * 100, precision: 1) %&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;% end %&gt;\n&lt;/table&gt;</pre>\n    </div>\n</div>\n\n<div class="note">\n    <p><strong>補足：</strong></p>\n    <ul>\n        <li><code>sum</code>メソッドは数値フィールドでのみ使用できます。</li>\n        <li>対象レコードが存在しない場合、<code>sum</code>は<code>0</code>を返します（<code>nil</code>ではない）。</li>\n        <li>大量のデータに対する集計は、データベースレベルで処理されるため効率的です。</li>\n        <li>計算式を使用する場合、データベースエンジンがサポートしている関数やオペレーターのみ使用できます。</li>\n        <li>複雑な集計には、<code>sum</code>以外にも<code>average</code>、<code>minimum</code>、<code>maximum</code>、<code>count</code>などの集計メソッドがあります。</li>\n    </ul>\n</div>	29
285	2024-08-22 17:39:43	2025-03-23 07:04:15.582649	4	19	紐づいた別のモデルのフィールドを結合する	\N	app/controllers/test_controller.rb	class TestController < ApplicationController\\n  def index\\n    @employees = Employee.joins(:sales).select('name, sales.amount')\\n  end\\nend	\N	\N	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>joinsメソッドの基本</h2>\n    <p>別のモデルのデータを埋め込んで取得するには、<code>joins</code>メソッドを使用します：</p>\n    \n    <div class="code-block">\n        <pre>モデル.joins(:埋め込むモデル).select(取得するフィールド)</pre>\n    </div>\n    \n    <p>例えば、EmployeeモデルとSaleモデルを結合して、特定のフィールドを取得する場合：</p>\n    \n    <div class="code-block">\n        <pre>Employee.joins(:sales).select('employees.name, sales.amount')</pre>\n    </div>\n    \n    <p>上の例では、EmployeeモデルにSaleモデルを結合し、EmployeeモデルのnameフィールドとSaleモデルのamountフィールドのデータを取得しています。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>inner joinとleft join</h2>\n    <p><code>joins</code>メソッドはデフォルトでSQL <strong>INNER JOIN</strong> を使用します。</p>\n    \n    <div class="note">\n        <p><strong>注意点：</strong> joinで結合時には結合するモデルのデータがないものは取得しません。上の例だと紐づいたSaleモデルのないemployeeのデータは取得しません。</p>\n    </div>\n    \n    <p>紐づいたモデルのデータがないものも取得したい場合は、<code>left_joins</code>（または<code>left_outer_joins</code>）メソッドを使います：</p>\n    \n    <div class="code-block">\n        <pre>モデル.left_joins(:埋め込むモデル).select(取得するフィールド)</pre>\n    </div>\n    \n    <p>例：</p>\n    \n    <div class="code-block">\n        <pre>Employee.left_joins(:sales).select('employees.name, sales.amount')</pre>\n    </div>\n    \n    <p>この場合、Saleモデルと紐づいていないEmployeeのデータも取得されます（Saleの各フィールドはnullになります）。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>複数のモデルを結合</h2>\n    <p>2つ以上のモデルを結合することも可能です：</p>\n    \n    <div class="code-block">\n        <pre># 複数のモデルを結合（配列で指定）\nEmployee.joins([:sales, :department])\n       .select('employees.name, sales.amount, departments.name AS department_name')\n\n# ネストした関連を結合\nEmployee.joins(sales: :customer)\n       .select('employees.name, sales.amount, customers.name AS customer_name')</pre>\n    </div>\n    \n    <p>複数のテーブルを結合する場合、カラム名が重複する可能性があるため、<code>AS</code>キーワードで別名をつけることが推奨されます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>joinsとincludesの違い</h2>\n    <p><code>joins</code>と<code>includes</code>は異なる目的で使用されます：</p>\n    \n    <div class="note">\n        <p>このようにデータを結合していて、取得したフィールドのデータのみを使用するときはN+1問題も発生しないので<code>includes</code>を使用する必要がありません。</p>\n    </div>\n    \n    <table>\n        <tr>\n            <th>メソッド</th>\n            <th>目的</th>\n            <th>使用ケース</th>\n        </tr>\n        <tr>\n            <td><code>joins</code></td>\n            <td>SQL JOINを実行し、条件付け・フィルタリング・計算に使用</td>\n            <td>結合テーブルのデータでフィルタリングしたい場合や、結合テーブルの特定のカラムだけ必要な場合</td>\n        </tr>\n        <tr>\n            <td><code>includes</code></td>\n            <td>関連モデルをプリロードし、N+1問題を回避</td>\n            <td>関連モデルの全データや多くのフィールドにアクセスする場合</td>\n        </tr>\n    </table>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>条件を指定した結合</h2>\n    <p>結合時に条件を指定することもできます：</p>\n    \n    <div class="code-block">\n        <pre># 基本的な条件付き結合\nEmployee.joins(:sales).where(sales: { amount: 1000..5000 })\n\n# より複雑な条件\nEmployee.joins(:sales)\n       .where("sales.amount > ? AND sales.created_at > ?", 1000, 1.month.ago)\n\n# left_joinsで条件を指定\nEmployee.left_joins(:sales)\n       .where("sales.amount IS NULL OR sales.amount < ?", 1000)</pre>\n    </div>\n    \n    <p>上記の例では、条件に一致する結合レコードを持つEmployeeのみが取得されます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">6</span>実践的な使用例</h2>\n    <p>コントローラーでの実際の使用例：</p>\n    \n    <div class="code-block">\n        <pre>class EmployeesController < ApplicationController\n  def performance_report\n    # 各社員の売上実績を取得\n    @top_sellers = Employee.joins(:sales)\n                          .select('employees.id, employees.name, \n                                  SUM(sales.amount) AS total_sales,\n                                  COUNT(sales.id) AS sales_count,\n                                  AVG(sales.amount) AS average_sale')\n                          .group('employees.id')\n                          .order('total_sales DESC')\n                          .limit(10)\n    \n    # 売上のない社員も含めたレポート\n    @all_employees = Employee.left_joins(:sales)\n                            .select('employees.id, employees.name, \n                                    COALESCE(SUM(sales.amount), 0) AS total_sales,\n                                    COUNT(sales.id) AS sales_count')\n                            .group('employees.id')\n                            .order('employees.name')\n    \n    # 部署ごとのパフォーマンス\n    @department_stats = Department.joins(employees: :sales)\n                                 .select('departments.name,\n                                         COUNT(DISTINCT employees.id) AS employee_count,\n                                         SUM(sales.amount) AS total_department_sales')\n                                 .group('departments.id')\n                                 .order('total_department_sales DESC')\n  end\nend</pre>\n    </div>\n    \n    <p>ビューでの表示例（app/views/employees/performance_report.html.erb）：</p>\n    \n    <div class="code-block">\n        <pre>&lt;h1&gt;社員売上実績レポート&lt;/h1&gt;\n\n&lt;h2&gt;トップセールス社員（上位10名）&lt;/h2&gt;\n&lt;table&gt;\n  &lt;tr&gt;\n    &lt;th&gt;社員名&lt;/th&gt;\n    &lt;th&gt;売上合計&lt;/th&gt;\n    &lt;th&gt;販売件数&lt;/th&gt;\n    &lt;th&gt;平均販売額&lt;/th&gt;\n  &lt;/tr&gt;\n  &lt;% @top_sellers.each do |employee| %&gt;\n    &lt;tr&gt;\n      &lt;td&gt;&lt;%= employee.name %&gt;&lt;/td&gt;\n      &lt;td&gt;&lt;%= number_to_currency(employee.total_sales) %&gt;&lt;/td&gt;\n      &lt;td&gt;&lt;%= employee.sales_count %&gt;件&lt;/td&gt;\n      &lt;td&gt;&lt;%= number_to_currency(employee.average_sale) %&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;% end %&gt;\n&lt;/table&gt;\n\n&lt;h2&gt;全社員売上実績（売上のない社員も含む）&lt;/h2&gt;\n&lt;table&gt;\n  &lt;tr&gt;\n    &lt;th&gt;社員名&lt;/th&gt;\n    &lt;th&gt;売上合計&lt;/th&gt;\n    &lt;th&gt;販売件数&lt;/th&gt;\n  &lt;/tr&gt;\n  &lt;% @all_employees.each do |employee| %&gt;\n    &lt;tr&gt;\n      &lt;td&gt;&lt;%= employee.name %&gt;&lt;/td&gt;\n      &lt;td&gt;&lt;%= number_to_currency(employee.total_sales) %&gt;&lt;/td&gt;\n      &lt;td&gt;&lt;%= employee.sales_count %&gt;件&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;% end %&gt;\n&lt;/table&gt;</pre>\n    </div>\n</div>\n\n<div class="note">\n    <p><strong>補足：</strong></p>\n    <ul>\n        <li>テーブル結合を使うと、より少ないクエリでデータを取得できますが、結合するテーブル数が多いと処理が重くなる可能性があります。</li>\n        <li>複数のテーブルを結合する場合は、常にテーブル名でカラムを修飾するとクエリが明確になります（例：<code>employees.name</code>）。</li>\n        <li>集計関数（SUM, COUNT, AVG等）を使う場合は、<code>group</code>メソッドでグループ化するフィールドを指定する必要があります。</li>\n        <li>大量のデータを扱う場合、適切なインデックスを設定することでパフォーマンスが向上します。</li>\n    </ul>\n</div>	32
286	2024-08-22 18:46:34	2025-03-23 07:06:54.255435	4	19	結合したモデルの集計を行う	\N	app/controllers/test_controller.rb	class TestController < ApplicationController\\n  def index\\n    @employees_with_sales = Employee.left_joins(:sales)\\n        .select("employees.id, employees.name, sales.sales_date AS sales_date, SUM(sales.amount) AS total_sales")\\n        .group("employees.id, sales.sales_date")\\n        .order("employees.id, sales.sales_date")\\n  end\\nend	\N	\N	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>複雑なデータ取得の概要</h2>\n    <p>Railsでは、複数のモデルを結合し、グループ化して集計するような複雑なクエリも簡潔に記述できます。以下に詳細な例を示します：</p>\n    \n    <div class="code-block">\n        <pre>Employee.joins(:sales)\n        .select('employees.id, employees.name, sales.sales_date, SUM(sales.amount) AS total_sales')\n        .group('employees.id, sales.sales_date')\n        .order('employees.id, sales.sales_date')</pre>\n    </div>\n    \n    <p>上の例では、EmployeeモデルとSaleモデルを結合し、EmployeeモデルのidとSaleモデルのsales_dateフィールドでグルーピングし、Employeeモデルのidとname、Salesモデルのsales_dateフィールドを取得し、グルーピングされたSalesモデルのamountフィールドの合計をtotal_salesフィールドとして追加し、Employeeモデルのid、Salesモデルのsales_dateフィールドで昇順に並べ替えています。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>クエリの各部分の解説</h2>\n    <p>この複雑なクエリをステップごとに分解して解説します：</p>\n    \n    <div class="flow">\n        <div class="flow-item">\n            <h3>モデルの結合</h3>\n            <div class="code-block">\n                <pre>Employee.joins(:sales)</pre>\n            </div>\n            <p>EmployeeモデルとSaleモデルを結合します。これはSQL文の<code>INNER JOIN</code>に相当します。</p>\n        </div>\n        \n        <div class="flow-item">\n            <h3>フィールドの選択</h3>\n            <div class="code-block">\n                <pre>.select('employees.id, employees.name, sales.sales_date, SUM(sales.amount) AS total_sales')</pre>\n            </div>\n            <p>取得するフィールドを指定し、<code>SUM()</code>関数を使用して売上金額の合計を計算しています。<code>AS total_sales</code>で計算結果に別名をつけています。</p>\n        </div>\n        \n        <div class="flow-item">\n            <h3>グループ化</h3>\n            <div class="code-block">\n                <pre>.group('employees.id, sales.sales_date')</pre>\n            </div>\n            <p>社員IDと売上日付でグループ化します。これにより、「各社員の各日付ごとの」集計が可能になります。</p>\n        </div>\n        \n        <div class="flow-item">\n            <h3>並べ替え</h3>\n            <div class="code-block">\n                <pre>.order('employees.id, sales.sales_date')</pre>\n            </div>\n            <p>結果を社員IDと売上日付で昇順に並べ替えます。</p>\n        </div>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>クエリの実行結果</h2>\n    <p>このクエリの実行結果は以下のようなデータ構造になります：</p>\n    \n    <div class="code-block">\n        <pre>[\n  #<Employee id: 1, name: "山田太郎", sales_date: "2023-01-01", total_sales: 15000>,\n  #<Employee id: 1, name: "山田太郎", sales_date: "2023-01-02", total_sales: 25000>,\n  #<Employee id: 1, name: "山田太郎", sales_date: "2023-01-03", total_sales: 18000>,\n  #<Employee id: 2, name: "佐藤花子", sales_date: "2023-01-01", total_sales: 22000>,\n  #<Employee id: 2, name: "佐藤花子", sales_date: "2023-01-02", total_sales: 19500>,\n  ...\n]</pre>\n    </div>\n    \n    <p>各レコードは社員情報と、その社員の特定の日付における売上合計を含んでいます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>バリエーション</h2>\n    <p>上記のクエリをさらに拡張したバリエーションを紹介します：</p>\n    \n    <div class="code-block">\n        <pre># 特定の期間のデータのみを対象\nEmployee.joins(:sales)\n        .select('employees.id, employees.name, sales.sales_date, \n                SUM(sales.amount) AS total_sales, \n                COUNT(sales.id) AS sales_count')\n        .where("sales.sales_date BETWEEN ? AND ?", Date.new(2023, 1, 1), Date.new(2023, 1, 31))\n        .group('employees.id, sales.sales_date')\n        .order('employees.id, sales.sales_date')\n\n# 部署情報も含める\nEmployee.joins(:sales, :department)\n        .select('employees.id, employees.name, departments.name AS department_name,\n                sales.sales_date, SUM(sales.amount) AS total_sales')\n        .group('employees.id, departments.name, sales.sales_date')\n        .order('departments.name, total_sales DESC')\n\n# 月ごとの集計\nEmployee.joins(:sales)\n        .select("employees.id, employees.name, \n                DATE_FORMAT(sales.sales_date, '%Y-%m') AS month, \n                SUM(sales.amount) AS monthly_sales")\n        .group("employees.id, DATE_FORMAT(sales.sales_date, '%Y-%m')")\n        .order("employees.name, month")</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>実践的な使用例</h2>\n    <p>コントローラーでの実際の使用例：</p>\n    \n    <div class="code-block">\n        <pre>class SalesReportsController < ApplicationController\n  def daily_employee_sales\n    # 日付範囲のパラメータ処理\n    start_date = params[:start_date] ? Date.parse(params[:start_date]) : 1.month.ago.to_date\n    end_date = params[:end_date] ? Date.parse(params[:end_date]) : Date.today\n    \n    # クエリ実行\n    @daily_sales = Employee.joins(:sales)\n                          .select('employees.id, employees.name, sales.sales_date, \n                                  SUM(sales.amount) AS total_sales, \n                                  COUNT(sales.id) AS transaction_count')\n                          .where("sales.sales_date BETWEEN ? AND ?", start_date, end_date)\n                          .group('employees.id, sales.sales_date')\n                          .order('employees.name, sales.sales_date')\n    \n    # 社員ごとにデータを整理\n    @employees_data = @daily_sales.group_by { |record| record.id }\n    \n    # 日付リストの作成（グラフ表示用）\n    @date_range = (start_date..end_date).to_a\n    \n    respond_to do |format|\n      format.html\n      format.csv do\n        send_data generate_csv(@daily_sales), filename: "daily_employee_sales.csv"\n      end\n      format.json { render json: @daily_sales }\n    end\n  end\n  \n  private\n  \n  def generate_csv(data)\n    CSV.generate(headers: true) do |csv|\n      csv << ["社員ID", "社員名", "売上日", "売上金額", "取引数"]\n      data.each do |record|\n        csv << [record.id, record.name, record.sales_date, record.total_sales, record.transaction_count]\n      end\n    end\n  end\nend</pre>\n    </div>\n    \n    <p>ビューでの表示例（app/views/sales_reports/daily_employee_sales.html.erb）：</p>\n    \n    <div class="code-block">\n        <pre>&lt;h1&gt;社員別日次売上レポート&lt;/h1&gt;\n\n&lt;div class="date-range-filter"&gt;\n  &lt;%= form_with url: daily_employee_sales_path, method: :get, local: true do |form| %&gt;\n    &lt;%= form.date_field :start_date, value: params[:start_date] %&gt;\n    &lt;span&gt;から&lt;/span&gt;\n    &lt;%= form.date_field :end_date, value: params[:end_date] %&gt;\n    &lt;%= form.submit "更新" %&gt;\n  &lt;% end %&gt;\n&lt;/div&gt;\n\n&lt;% @employees_data.each do |employee_id, sales_records| %&gt;\n  &lt;% employee = sales_records.first %&gt;\n  \n  &lt;div class="employee-sales-card"&gt;\n    &lt;h2&gt;&lt;%= employee.name %&gt;の売上&lt;/h2&gt;\n    \n    &lt;table&gt;\n      &lt;tr&gt;\n        &lt;th&gt;日付&lt;/th&gt;\n        &lt;th&gt;売上金額&lt;/th&gt;\n        &lt;th&gt;取引数&lt;/th&gt;\n      &lt;/tr&gt;\n      &lt;% sales_records.each do |record| %&gt;\n        &lt;tr&gt;\n          &lt;td&gt;&lt;%= record.sales_date.strftime('%Y-%m-%d') %&gt;&lt;/td&gt;\n          &lt;td&gt;&lt;%= number_to_currency(record.total_sales) %&gt;&lt;/td&gt;\n          &lt;td&gt;&lt;%= record.transaction_count %&gt;件&lt;/td&gt;\n        &lt;/tr&gt;\n      &lt;% end %&gt;\n      &lt;tr class="total-row"&gt;\n        &lt;td&gt;合計&lt;/td&gt;\n        &lt;td&gt;&lt;%= number_to_currency(sales_records.sum { |r| r.total_sales }) %&gt;&lt;/td&gt;\n        &lt;td&gt;&lt;%= sales_records.sum { |r| r.transaction_count } %&gt;件&lt;/td&gt;\n      &lt;/tr&gt;\n    &lt;/table&gt;\n  &lt;/div&gt;\n&lt;% end %&gt;\n\n&lt;div class="export-links"&gt;\n  &lt;%= link_to "CSVダウンロード", daily_employee_sales_path(format: :csv, start_date: params[:start_date], end_date: params[:end_date]), class: "button" %&gt;\n&lt;/div&gt;</pre>\n    </div>\n</div>\n\n<div class="note">\n    <p><strong>補足：</strong></p>\n    <ul>\n        <li>複雑なグループ化や集計を行う場合、生成されるSQLクエリを確認すると理解が深まります。</li>\n        <li>SQLの集計関数（SUM, COUNT, AVG, MAX, MIN）を組み合わせることで様々な分析が可能です。</li>\n        <li>データ量が多い場合は、クエリの最適化やインデックスの追加を検討してください。</li>\n        <li>DATE_FORMAT関数はデータベースによって構文が異なるため、使用する際はデータベース（MySQL, PostgreSQL等）に合わせた記述が必要です。</li>\n    </ul>\n</div>	33
26	2024-06-26 01:40:17	2025-03-13 14:33:36.858276	5	12	ローカルのmysql(XAMPP)をサーバーに移行する	\N	\N	\N	\N	\N	\N	\N	<div>このページでは、ローカルのXAMPP内のmysqlをサーバーに移行する方法についてご紹介していきます。</div>\\\\\\\\r\\n\\\\\\\\r\\n<h2>mysqlのデータの取り出し</h2>\\\\\\\\r\\n<div class="code-block">cd C:\\\\\\\\\\\\\\\\xampp\\\\\\\\\\\\\\\\mysql\\\\\\\\\\\\\\\\bin\\\\\\\\r\\nmysqldump -u ユーザー名 -p データベース名 > 保存先.sql</div>\\\\\\\\r\\n\\\\\\\\r\\n<h2>サーバーにデータを転送する</h2>\\\\\\\\r\\n<div class="code-block">scp "先ほど出力したファイルのパス" ユーザー名@サーバーのIPアドレス:/保存先フォルダ/</div>\\\\\\\\r\\n\\\\\\\\r\\n<h2>サーバーのmysqlにデータを取り込む</h2>\\\\\\\\r\\n<div class="code-block">mysql -u ユーザー名 -p\\\\\\\\r\\nUSE データを反映したいデータベース名;\\\\\\\\r\\nSOURCE /sqlファイルのパス;\\\\\\\\r\\n</div>\\\\\\\\r\\n\\\\\\\\r\\n<div>とすることで、データをローカルのものと同じにすることができます。</div>\\\\\\\\r\\n\\\\\\\\r\\n\\\\\\\\r\\n\\\\\\\\r\\n<div class="code-block"></div>	6
173	2024-07-11 13:50:25	2025-03-22 19:29:57.729066	4	15	プロジェクトの作成	\N	\N	\N	\N	\N	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>事前準備：Node.jsのインストール</h2>\n    <p>Reactをインストールするにはまずnode.jsをインストールする必要があるため、まだインストールされていない方は<a href="https://nodejs.org" target="_blank">こちらのページ</a>でnode.jsをインストールしてください。</p>\n</div>\n<div class="step">\n    <h2><span class="step-number">2</span>Reactプロジェクトの作成</h2>\n    <p>コマンドプロンプトでプロジェクトを作成したいフォルダに移動し、以下のコマンドを実行します：</p>\nコピー<div class="code-block">npx create-react-app プロジェクト名</div>\n\n<p>このコマンドを実行すると、指定した「プロジェクト名」のフォルダが作成され、必要なファイルが自動的に生成されます。</p>\n</div>\n<div class="step">\n    <h2><span class="step-number">3</span>開発サーバーの起動</h2>\n    <p>プロジェクトが作成されたら、そのプロジェクトのルートフォルダに移動し、以下のコマンドを実行してください：</p>\nコピー<div class="code-block">npm start</div>\n\n<p>開発サーバーが起動し、ブラウザが自動的に開きます。Reactのデフォルトのページが表示されれば成功です。</p>\n</div>\n<div class="note">\n    <p><strong>ポイント：</strong> <code>create-react-app</code>は、Reactの開発に必要なWebpackやBabelなどのツールを自動的に設定してくれるため、初心者でも簡単にReactプロジェクトを始めることができます。</p>\n</div>\n<div class="step">\n    <h2><span class="step-number">4</span>プロジェクトの基本構造</h2>\n    <p>作成されたプロジェクトには以下のような主要ファイル・フォルダが含まれています：</p>\nコピー<table>\n    <tr>\n        <th>ファイル/フォルダ名</th>\n        <th>説明</th>\n    </tr>\n    <tr>\n        <td>src</td>\n        <td>ソースコードを格納するフォルダ。主な開発はここで行います。</td>\n    </tr>\n    <tr>\n        <td>public</td>\n        <td>静的ファイル（HTML、画像など）を格納するフォルダ。</td>\n    </tr>\n    <tr>\n        <td>package.json</td>\n        <td>プロジェクトの依存関係や設定を管理するファイル。</td>\n    </tr>\n    <tr>\n        <td>node_modules</td>\n        <td>インストールされたパッケージが格納されるフォルダ。</td>\n    </tr>\n</table>\n</div>	1
180	2024-07-12 15:56:08	2025-03-22 19:30:24.304705	3	16	リストから条件に合うもののみを抽出する	\N	Javascript	const dictList = [\\n    {\\n        name: 'test',\\n        age: 10,\\n    },{\\n        name: 'test2',\\n        age: 20,\\n    },{\\n        name: 'test3',\\n        age: 30,\\n    },\\n];\\n\\nconst under_20 = dictList.filter(dict => dict.age <= 20)\\nconsole.log(under_20)	\N	\N	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>filter関数の基本構文</h2>\n    <p>配列から条件に合う要素だけを抽出するには、<code>filter</code>関数が便利です。基本的な構文は以下の通りです：</p>\nコピー<div class="code-block">リストの代入された変数.filter(繰り返し時に代入する変数 => 条件)</div>\n\n<p>この構文を使用することで、特定の条件を満たす要素のみを含む新しい配列を作成できます。</p>\n</div>\n<div class="step">\n    <h2><span class="step-number">2</span>具体的な例</h2>\nコピー<div class="code-block">// オブジェクトの配列<br>\nconst dictList = [<br>\n{ id: 1, name: "田中", age: 18 },<br>\n{ id: 2, name: "佐藤", age: 22 },<br>\n{ id: 3, name: "鈴木", age: 19 },<br>\n{ id: 4, name: "高橋", age: 25 }<br>\n];<br>\n<br>\n// 20歳以下のユーザーのみを抽出<br>\nconst under_20 = dictList.filter(user => user.age <= 20);<br>\n<br>\nconsole.log(under_20); // 出力: [{ id: 1, name: "田中", age: 18 }, { id: 3, name: "鈴木", age: 19 }]</div>\nコピー<p>上の例では、<code>dictList</code>から年齢が20歳以下のユーザーデータのみを抽出して<code>under_20</code>に代入しています。</p>\n</div>\n<div class="step">\n    <h2><span class="step-number">3</span>複数条件の組み合わせ</h2>\n    <p>複数の条件を組み合わせることも可能です：</p>\nコピー<div class="code-block">// 20歳以下でIDが3以下のユーザーを抽出<br>\nconst filtered = dictList.filter(user => user.age <= 20 && user.id <= 3);</div>\nコピー<p>論理演算子（&&、||）を使って複数の条件を組み合わせることができます。</p>\n</div>\n<div class="note">\n    <p><strong>ポイント：</strong> <code>filter</code>関数も<code>map</code>関数と同様に、元の配列を変更せず新しい配列を返します。</p>\n</div>	2
178	2024-07-12 15:47:41	2025-03-22 19:30:43.235094	3	16	リストに対する繰り返し処理	\N	Javascript	const list = [1, 2, 3];\\n\\nlist.map(val=>{\\n    console.log(val);\\n})	\N	\N	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>map関数の基本構文</h2>\n    <p>配列に対して繰り返し処理を行うには、<code>map</code>関数が便利です。基本的な構文は以下の通りです：</p>\nコピー<div class="code-block">リストの代入された変数.map(繰り返し時に代入する変数=>{<br>\n繰り返し時の処理<br>\n})</div>\nコピー<p>この構文を使用することで、配列の各要素に対して同じ処理を効率的に適用できます。</p>\n</div>\n<div class="step">\n    <h2><span class="step-number">2</span>具体的な例</h2>\nコピー<div class="code-block">// 数値の配列を定義<br>\nconst numbers = [1, 2, 3, 4, 5];<br>\n// map関数を使用して各要素を2倍にする<br>\nconst doubled = numbers.map(num => {<br>\nreturn num * 2;<br>\n});<br>\nconsole.log(doubled); // 出力: [2, 4, 6, 8, 10]</div>\nコピー<p>上の例では、<code>numbers</code>配列の各要素が<code>num</code>に順番に代入され、その値を2倍にした新しい配列が作成されます。</p>\n</div>\n<div class="step">\n    <h2><span class="step-number">3</span>簡潔な書き方</h2>\n    <p>処理が1行で済む場合は、さらに簡潔に書くことができます：</p>\nコピー<div class="code-block">// 簡潔な書き方<br>\nconst doubled = numbers.map(num => num * 2);</div>\nコピー<p>括弧と<code>return</code>キーワードを省略することで、コードがより読みやすくなります。</p>\n</div>\n<div class="note">\n    <p><strong>ポイント：</strong> <code>map</code>関数は元の配列を変更せず、新しい配列を返します。元の配列はそのまま保持されます。</p>\n</div>\n<div class="step">\n    <h2><span class="step-number">4</span>実践的な使用例</h2>\nコピー<div class="code-block">// オブジェクトの配列<br>\nconst users = [<br>\n{ id: 1, name: "田中", age: 28 },<br>\n{ id: 2, name: "佐藤", age: 32 },<br>\n{ id: 3, name: "鈴木", age: 24 }<br>\n];<br>\n// 名前だけの配列を作成<br>\nconst names = users.map(user => user.name);<br>\nconsole.log(names); // 出力: ["田中", "佐藤", "鈴木"]</div>\nコピー<p>この例では、ユーザーオブジェクトの配列から名前だけを抽出して新しい配列を作成しています。</p>\n</div>	1
214	2024-08-05 07:39:39	2025-03-22 20:11:37.086083	4	18	インストール、プロジェクトの作成	\N	\N	\N	\N	\N	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>前提条件</h2>\n    <p>始める前に、Rubyがインストールされていることを確認してください。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>MSYS2のインストール</h2>\n    <p><a href="https://www.msys2.org/">こちら</a>のページからMsys2をインストールします。</p>\n    <p>インストール完了後、Windowsボタンを押し、「Msys2」と入力し、「MSYS2 MSYS」のところで右クリック→管理者として実行をクリックします。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>パッケージのインストール</h2>\n    <p>MSYS2が開かれたら、以下のコマンドを入力してパッケージデータベースを更新します：</p>\n    \n    <div class="code-block">pacman -Syu</div>\n    \n    <p>更新が完了したら、libyamlをインストールします：</p>\n    \n    <div class="code-block">pacman -S mingw-w64-ucrt-x86_64-libyaml</div>\n    \n    <p>インストールが完了したらMSYS2を閉じます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>RubyGemsとBundlerのアップデート</h2>\n    <p>Windowsボタンを押し、「cmd」と入力し、コマンドプロンプトのところで右クリック→管理者として実行をクリックします。</p>\n    \n    <p>コマンドプロンプトが開かれたら、以下のコマンドを順に実行します：</p>\n    \n    <div class="code-block">gem update --system</div>\n    \n    <div class="code-block">gem install bundler</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>Railsプロジェクトの作成</h2>\n    <p>cdコマンドでプロジェクトを作成したいフォルダに移動し、以下のコマンドを実行します：</p>\n    \n    <div class="code-block">rails new プロジェクト名</div>\n    \n    <div class="note">\n        <p><strong>エラーが発生した場合：</strong> もしエラーが出た場合は、以下のコマンドを実行してから再度プロジェクトを作成してください：</p>\n        <div class="code-block">gem install psych --platform=ruby -- --with-libyaml-dir=C:/msys64/mingw64</div>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">6</span>Railsサーバーの起動</h2>\n    <p>プロジェクト作成後に、コマンドプロンプトでプロジェクトのフォルダに移動します：</p>\n    \n    <div class="code-block">cd プロジェクト名</div>\n    \n    <p>以下のコマンドでサーバーを起動します：</p>\n    \n    <div class="code-block">rails server</div>\n    \n    <p>サーバーが起動したら、<a href="http://127.0.0.1:3000/" target="blank">http://127.0.0.1:3000</a>にアクセスすることでRuby on Railsで作成したアプリケーションのウェルカムページを確認できます。</p>\n    \n    <div class="note">\n        <p><strong>ヒント：</strong> <code>rails server</code>のショートカットとして<code>rails s</code>も使用できます。</p>\n    </div>\n</div>	1
119	2024-06-30 04:12:00	2025-03-22 19:28:43.120969	4	10	アプリケーションの作成、Djangoの処理の流れ	\N	\N	\N	\N	\N	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>アプリケーションの作成</h2>\n    <p>コマンドプロンプトでプロジェクトのフォルダに移動し、以下のコマンドを実行します：</p>\n    <div class="code-block">python manage.py startapp アプリケーション名</div>\n    <p>このコマンドを実行すると、指定した「アプリケーション名」のフォルダが作成されます。</p>\n</div>\n<div class="step">\n    <h2><span class="step-number">2</span>settings.pyの設定</h2>\n    <p>アプリケーションが作成されたら、プロジェクトフォルダ内の<code>settings.py</code>を開き、<code>INSTALLED_APPS</code>に新しく作成したアプリケーションを追加します。</p>\nコピー<p>元の記述:</p>\n<div class="code-block">INSTALLED_APPS = [\n"django.contrib.admin",<br>\n"django.contrib.auth",<br>\n"django.contrib.contenttypes",<br>\n"django.contrib.sessions",<br>\n"django.contrib.messages",<br>\n"django.contrib.staticfiles",<br>\n]</div>\nコピー<p>変更後の記述:</p>\n<div class="code-block">INSTALLED_APPS = [\n"django.contrib.admin",<br>\n"django.contrib.auth",<br>\n"django.contrib.contenttypes",<br>\n"django.contrib.sessions",<br>\n"django.contrib.messages",<br>\n"django.contrib.staticfiles",<br>\n"追加したアプリケーション名",<br>\n]</div>\n</div>\n<div class="step">\n    <h2><span class="step-number">3</span>アプリケーションフォルダの構成</h2>\n    <p>作成されたアプリケーションフォルダには以下のファイルが含まれています：</p>\nコピー<table>\n    <tr>\n        <th>ファイル/フォルダ名</th>\n        <th>説明</th>\n    </tr>\n    <tr>\n        <td>migrationsフォルダ</td>\n        <td>モデルが変更された履歴などが保存されるフォルダ。</td>\n    </tr>\n    <tr>\n        <td>__init__.pyファイル</td>\n        <td>ディレクトリをパッケージとして認識させるために使用され、パッケージの初期化コードを含めることができます。</td>\n    </tr>\n    <tr>\n        <td>admin.py</td>\n        <td>Djangoのadminページに表示する内容の変更を行うためのファイル。</td>\n    </tr>\n    <tr>\n        <td>apps.py</td>\n        <td>アプリケーションの初期化や設定をカスタマイズするために使用されます。</td>\n    </tr>\n    <tr>\n        <td>models.py</td>\n        <td>モデル(データベースのテーブル)の定義に使用するファイル。</td>\n    </tr>\n    <tr>\n        <td>tests.py</td>\n        <td>テストを記入するファイル。</td>\n    </tr>\n    <tr>\n        <td>views.py</td>\n        <td>フロントエンドに返すデータの整形などを行うファイル。</td>\n    </tr>\n    <tr>\n        <td>urls.py</td>\n        <td>ルーティング(受け取ったファイルをviews.pyのどのクラスで処理させるのか)を行うファイル。</td>\n    </tr>\n</table>\n\n<div class="note">\n    <p><strong>注意：</strong> <code>urls.py</code>は初期状態ではフォルダ内に存在しないため、ルーティングをわかりやすくするために作成することをお勧めします。</p>\n    <p><span class="important">重要：</span> <code>admin.py</code>, <code>models.py</code>, <code>views.py</code>, <code>urls.py</code>はよく使用するファイルとなるので覚えておきましょう。</p>\n</div>\n</div>\n<div class="step">\n    <h2><span class="step-number">4</span>urls.pyの作成</h2>\n    <p>アプリケーションフォルダ内に<code>urls.py</code>を作成する場合、以下のような内容で作成できます：</p>\nコピー<div class="code-block">from django.urls import path\nfrom . import views\napp_name = 'アプリケーション名'  # URL名前空間\nurlpatterns = [\n# ここにURLパターンを追加\n# 例: path('', views.index, name='index'),\n]</div>\n</div>\n<div class="step">\n    <h2><span class="step-number">5</span>Djangoの処理の流れ</h2>\nコピー<div class="flow">\n    <div class="flow-item">\n        <h3>リクエスト受信</h3>\n        <p>フロントエンドからの要求をDjangoが受け取ります。</p>\n    </div>\n    \n    <div class="flow-item">\n        <h3>urls.pyでの処理</h3>\n        <p>要求に応じて、<code>urls.py</code>で使用するアプリケーションと<code>views.py</code>のクラスが選択されます。</p>\n    </div>\n    \n    <div class="flow-item">\n        <h3>views.pyでの処理</h3>\n        <p>選択されたクラスで処理が行われます。必要に応じて<code>models.py</code>からデータを取得します。</p>\n    </div>\n    \n    <div class="flow-item">\n        <h3>レスポンス返却</h3>\n        <p>処理結果がフロントエンドに返されます。</p>\n    </div>\n</div>\n\n<div class="note">\n    <p>プロジェクト全体に適用させたい設定は、プロジェクト作成時に生成されたフォルダ内の<code>settings.py</code>で設定します。</p>\n</div>\n</div>	5
6	2024-06-22 16:13:18	2025-03-22 19:56:24.865873	4	6	Laravelのインストール	\N	\N	\N	\N	\N	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>Laravelとは</h2>\n    <p>Laravelとは、phpのフレームワークで、webアプリなどの作成に使用することができます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>Chocolateyのインストール</h2>\n    <p>まずPowerShellを開き、Windows向けのパッケージマネージャーのChocolateyをインストールします。</p>\n    \n    <div class="code-block">Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>PHPとComposerのインストール</h2>\n    <p>その後、以下のコマンドを入力し、phpとcomposerをインストールします：</p>\n    \n    <div class="code-block">choco install php -y<br>choco install composer -y</div>\n    \n    <p>インストールが完了したら、以下のコマンドでバージョンを確認します：</p>\n    \n    <div class="code-block">php -v<br>composer -v</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>Laravelプロジェクトの作成</h2>\n    <p>以下のコマンドを実行してLaravelプロジェクトを作成します：</p>\n    \n    <div class="code-block">cd Laravelのプロジェクトを作りたいフォルダ <br>composer create-project --prefer-dist laravel/laravel アプリケーション名</div>\n    \n    <p>このコマンドを実行すると、cdコマンドで移動したフォルダに「アプリケーション名」のフォルダが作成され、その中にLaravelがインストールされます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>開発サーバーの起動</h2>\n    <p>作成したプロジェクトフォルダに移動し、開発サーバーを起動します：</p>\n    \n    <div class="code-block">cd アプリケーション名</div>\n    \n    <p>先ほど作成したフォルダに移動したら、以下のコマンドで開発サーバーを起動します：</p>\n    \n    <div class="code-block">php artisan serve</div>\n    \n    <p>このコマンドを実行すると、以下のようなメッセージが表示されます：</p>\n    \n    <div class="code-block">INFO  Server running on [http://127.0.0.1:8000].<br>Press Ctrl+C to stop the server</div>\n    \n    <p>表示されたURL（http://127.0.0.1:8000）にアクセスすると、Laravelで作成しているアプリケーションのページを表示することができます。</p>\n    \n    <div class="note">\n        <p><strong>注意：</strong> 開発サーバーを停止するには、コマンドプロンプトでCtrl+Cを押します。</p>\n    </div>\n</div>	1
290	2025-03-23 02:51:55.138071	2025-03-23 02:51:55.138076	4	13	SQLを使用した直接的なデータベースアクセス		views.py	persons = Person.objects.raw('SELECT * FROM myapp_person WHERE age > %s', [25])\n\nfor person in persons:\n    print(person.name)					<div class="step">\n    <h2><span class="step-number">1</span>Raw SQLの基本</h2>\n    <p>DjangoのORMは多くの場合十分強力ですが、特殊なデータベース機能を使用したい場合や、非常に複雑なクエリが必要な場合は、直接SQLを実行することができます。Djangoでは、<code>raw()</code>メソッドを使用して生のSQL文を実行できます。</p>\n    \n    <div class="code-block">\n        <pre># 基本的な使い方\nモデル名.objects.raw(SQL文, パラメータ)</pre>\n    </div>\n    \n    <p><code>raw()</code>メソッドは、モデルインスタンスのイテレータを返します。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>基本的な使用例</h2>\n    <p>例えば、特定のIDを持つPersonモデルのレコードを取得する場合：</p>\n    \n    <div class="code-block">\n        <pre># Personテーブルから特定のIDのデータを取得\nperson = Person.objects.raw('SELECT * FROM myapp_person WHERE id = %s', [person_id])\n\n# 結果は反復処理可能\nfor p in person:\n    print(p.name)\n\n# 通常は1件だけの場合、最初の要素を取得\nfirst_person = list(person)[0]  # or person[0]</pre>\n    </div>\n    \n    <p>注意: <code>raw()</code>メソッドの結果は、リストではなくイテレータです。すべての結果が必要な場合は<code>list()</code>で変換します。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>SQLインジェクション対策</h2>\n    <p>Raw SQLを使用する際は、SQLインジェクション攻撃に対する対策が重要です。パラメータは文字列内に直接埋め込まず、パラメータ化クエリを使用します：</p>\n    \n    <div class="code-block">\n        <pre># 安全な方法（推奨）\nPerson.objects.raw('SELECT * FROM myapp_person WHERE last_name = %s', [last_name])\n\n# 危険な方法（避けるべき）\nPerson.objects.raw('SELECT * FROM myapp_person WHERE last_name = "' + last_name + '"')  # 危険！</pre>\n    </div>\n    \n    <p>パラメータはデータベースバックエンドによって適切にエスケープされます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>モデルフィールドのマッピング</h2>\n    <p><code>raw()</code>メソッドは、SQLの結果をモデルインスタンスにマッピングします。このとき、少なくともモデルの主キーを選択する必要があります：</p>\n    \n    <div class="code-block">\n        <pre># 必要なフィールドだけを選択（主キーは必須）\npersons = Person.objects.raw('SELECT id, name, age FROM myapp_person')\n\n# 別名を使用する場合\npersons = Person.objects.raw('''\n    SELECT \n        id, \n        first_name || ' ' || last_name AS full_name,\n        EXTRACT(YEAR FROM CURRENT_DATE) - EXTRACT(YEAR FROM birth_date) AS calculated_age\n    FROM myapp_person\n''')\n\n# 結果へのアクセス\nfor person in persons:\n    print(f"{person.full_name} is {person.calculated_age} years old")</pre>\n    </div>\n    \n    <p>SQLで計算したフィールドや別名を付けたフィールドも、モデルインスタンスのプロパティとしてアクセスできます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>複雑なクエリの例</h2>\n    <p>Raw SQLは、ORMでは表現しにくい複雑なクエリに特に有用です：</p>\n    \n    <div class="code-block">\n        <pre># 複雑なJOINとサブクエリ\nproducts = Product.objects.raw('''\n    SELECT \n        p.id, \n        p.name, \n        p.price,\n        (SELECT AVG(price) FROM myapp_product) AS avg_price,\n        p.price - (SELECT AVG(price) FROM myapp_product) AS price_diff,\n        COUNT(s.id) AS sales_count\n    FROM \n        myapp_product p\n    LEFT JOIN \n        myapp_sale s ON p.id = s.product_id\n    GROUP BY \n        p.id, p.name, p.price\n    HAVING \n        COUNT(s.id) > 5\n    ORDER BY \n        sales_count DESC\n''')\n\n# データベース固有の関数を使用\nfrom django.db import connection\n\nif connection.vendor == 'postgresql':\n    # PostgreSQL固有の関数を使用\n    persons = Person.objects.raw('''\n        SELECT \n            id, \n            name, \n            age,\n            EXTRACT(EPOCH FROM last_login) AS login_epoch\n        FROM myapp_person\n        WHERE \n            last_login > NOW() - INTERVAL '30 days'\n    ''')\nelif connection.vendor == 'mysql':\n    # MySQL固有の構文\n    persons = Person.objects.raw('''\n        SELECT \n            id, \n            name, \n            age,\n            UNIX_TIMESTAMP(last_login) AS login_epoch\n        FROM myapp_person\n        WHERE \n            last_login > DATE_SUB(NOW(), INTERVAL 30 DAY)\n    ''')</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">6</span>実践的な使用例</h2>\n    <p>views.pyでのRaw SQLの使用例：</p>\n    \n    <div class="code-block">\n        <pre>from django.shortcuts import render\nfrom django.db import connection\nfrom .models import Product, Sale\n\ndef sales_report(request):\n    # 標準のORMクエリでは複雑すぎる分析クエリ\n    products = Product.objects.raw('''\n        WITH monthly_sales AS (\n            SELECT \n                product_id,\n                DATE_TRUNC('month', date) AS month,\n                SUM(amount) AS monthly_total\n            FROM \n                myapp_sale\n            GROUP BY \n                product_id, DATE_TRUNC('month', date)\n        )\n        SELECT \n            p.id,\n            p.name,\n            p.price,\n            SUM(s.amount) AS total_sales,\n            COUNT(DISTINCT s.customer_id) AS unique_customers,\n            MAX(ms.monthly_total) AS best_month_sales\n        FROM \n            myapp_product p\n        LEFT JOIN \n            myapp_sale s ON p.id = s.product_id\n        LEFT JOIN \n            monthly_sales ms ON p.id = ms.product_id\n        GROUP BY \n            p.id, p.name, p.price\n        ORDER BY \n            total_sales DESC\n    ''')\n    \n    return render(request, 'products/sales_report.html', {\n        'products': products\n    })\n\ndef database_info(request):\n    # データベースのメタデータ取得\n    with connection.cursor() as cursor:\n        if connection.vendor == 'postgresql':\n            cursor.execute('''\n                SELECT \n                    table_name, \n                    pg_size_pretty(pg_total_relation_size(quote_ident(table_name))) AS total_size\n                FROM \n                    information_schema.tables\n                WHERE \n                    table_schema = 'public'\n                ORDER BY \n                    pg_total_relation_size(quote_ident(table_name)) DESC\n            ''')\n            tables = cursor.fetchall()\n        elif connection.vendor == 'mysql':\n            cursor.execute('''\n                SELECT \n                    table_name,\n                    ROUND(((data_length + index_length) / 1024 / 1024), 2) AS size_in_mb\n                FROM \n                    information_schema.tables\n                WHERE \n                    table_schema = DATABASE()\n                ORDER BY \n                    (data_length + index_length) DESC\n            ''')\n            tables = cursor.fetchall()\n    \n    return render(request, 'admin/database_info.html', {\n        'tables': tables\n    })</pre>\n    </div>\n    \n    <p>テンプレートでの使用例（sales_report.html）：</p>\n    \n    <div class="code-block">\n        <pre>&lt;h1&gt;商品売上レポート&lt;/h1&gt;\n\n&lt;table&gt;\n    &lt;tr&gt;\n        &lt;th&gt;商品名&lt;/th&gt;\n        &lt;th&gt;価格&lt;/th&gt;\n        &lt;th&gt;総売上&lt;/th&gt;\n        &lt;th&gt;顧客数&lt;/th&gt;\n        &lt;th&gt;最高月間売上&lt;/th&gt;\n    &lt;/tr&gt;\n    {% for product in products %}\n        &lt;tr&gt;\n            &lt;td&gt;{{ product.name }}&lt;/td&gt;\n            &lt;td&gt;{{ product.price|floatformat:0 }}円&lt;/td&gt;\n            &lt;td&gt;{{ product.total_sales|floatformat:0 }}円&lt;/td&gt;\n            &lt;td&gt;{{ product.unique_customers }}人&lt;/td&gt;\n            &lt;td&gt;{{ product.best_month_sales|floatformat:0 }}円&lt;/td&gt;\n        &lt;/tr&gt;\n    {% endfor %}\n&lt;/table&gt;</pre>\n    </div>\n</div>\n\n<div class="note">\n    <p><strong>重要ポイント：</strong></p>\n    <ul>\n        <li><code>raw()</code>メソッドを使用する場合は、少なくともモデルの主キー（通常は<code>id</code>）をSELECTに含める必要があります。</li>\n        <li>SQLインジェクションを防ぐため、常にパラメータ化クエリを使用してください。</li>\n        <li>データベース固有の機能を使用する場合は、<code>connection.vendor</code>でデータベースタイプを確認し、適切なSQL構文を使用してください。</li>\n        <li>複雑なデータベース操作が必要な場合は、<code>connection.cursor()</code>を使用して直接カーソルを取得することもできます。</li>\n        <li>Raw SQLはDjangoのORMと比較して可読性やメンテナンス性が低下する可能性があるため、必要な場合にのみ使用するのが良いでしょう。</li>\n        <li>データベースの移行時にRaw SQLは変更が必要になる可能性があることに注意してください。</li>\n    </ul>\n</div>	61
175	2024-07-11 21:06:49	2025-03-22 19:38:30.504275	4	15	Props	<div>1</div>\n<div>2</div>	src/index.js	import React from 'react';\\nimport ReactDOM from 'react-dom/client';\\nimport './index.css';\\nimport Test from './Test';\\nimport reportWebVitals from './reportWebVitals';\\n\\nconst root = ReactDOM.createRoot(document.getElementById('root'));\\nroot.render(\\n    <Test test="1" test2="2"/>\\n);\\n\\n\\nreportWebVitals();	src/Test.js	export default function Test({test, test2){\\n    return (\\n        <div>\\n            <div>{ test }</div>\\n            <div>{ test2 }</div>\\n        </div>\\n    )\\n}	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>Reactでのprops（属性）の基本</h2>\n    <p>Reactでは、root.renderでの関数読み込み時に、属性を付けることでそれを関数側に引数として渡すことができます。</p>\n    \n    <p>たとえば、src/Test.jsではTestの引数として、src/index.jsの属性を引数として受け取っています。</p>\n    \n    <div class="code-block">root.render(<br>    &lt;Test test="1" test2="2"/&gt;<br>);</div>\n    \n    <p>このようにすると、Test関数の引数はtest="1", test2="2"となります。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>数値や配列、オブジェクトを渡す方法</h2>\n    <p>文字列以外の値、例えば数値として渡したい場合は、値を{}でくくるようにしてください。</p>\n    \n    <div class="code-block">root.render(<br>    &lt;Test test={1} test2={2}/&gt;<br>);</div>\n    \n    <p>{}でくくることで以下のようなデータ型も引数として渡すことができるようになります：</p>\n    <ul>\n        <li>数値（上記の例）</li>\n        <li>配列</li>\n        <li>オブジェクト</li>\n    </ul>\n    \n    <div class="code-block">root.render(<br>    &lt;Test <br>        numbers={[1, 2, 3]} <br>        user={{name: "John", age: 25}}<br>    /&gt;<br>);</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>コンポーネント側での受け取り方</h2>\n    <p>渡されたpropsは、コンポーネント関数の引数として受け取ります。</p>\n    \n    <div class="code-block">// src/Test.js<br>function Test(props) {<br>    console.log(props.test); // 1<br>    console.log(props.test2); // 2<br>    <br>    return (<br>        &lt;div&gt;<br>            &lt;p&gt;{props.test}&lt;/p&gt;<br>            &lt;p&gt;{props.test2}&lt;/p&gt;<br>        &lt;/div&gt;<br>    );<br>}</div>\n    \n    <p>または、分割代入を使用して直接プロパティにアクセスすることもできます：</p>\n    \n    <div class="code-block">// src/Test.js<br>function Test({ test, test2, numbers, user }) {<br>    console.log(test); // 1<br>    console.log(test2); // 2<br>    console.log(numbers); // [1, 2, 3]<br>    console.log(user); // {name: "John", age: 25}<br>    <br>    return (<br>        &lt;div&gt;<br>            &lt;p&gt;{test}&lt;/p&gt;<br>            &lt;p&gt;{test2}&lt;/p&gt;<br>        &lt;/div&gt;<br>    );<br>}</div>\n</div>\n\n<div class="note">\n    <p><strong>重要：</strong> propsは読み取り専用です。コンポーネント内で直接変更することはできません。</p>\n    <p>値を変更したい場合は、state（状態）を使用するか、親コンポーネントから関数を渡して値を更新する必要があります。</p>\n</div>	3
121	2024-06-30 06:12:59	2025-03-22 19:44:38.663056	4	10	views.py	\N	プロジェクト作成時にできたフォルダのurls.py	from django.contrib import admin\\nfrom django.urls import path, include\\n\\nurlpatterns = [\\n    path("admin/", admin.site.urls),\\n    path('test/', include(('test2.urls', 'test2'),namespace='test2')),\\n]	作成したアプリケーション内のurls.py	from django.contrib import admin\\nfrom django.urls importるー path\\nfrom . import views\\n\\nurlpatterns = [\\n    path('test_page',views.TestView.as_view(), name = 'test_view'),\\n]	作成したアプリケーション内のviews.py	from django.shortcuts import render\\nfrom django.views.generic import View\\nfrom django.http import JsonResponse\\n\\nclass TestView(View):\\n    def get(self, request):\\n        return render(request, 'test.html')\\n\\n    def post(self, request):\\n        return JsonResponse({'test': 'test_value'})	<div class="step">\n    <h2><span class="step-number">1</span>views.pyの役割</h2>\n    <p>views.pyでは、フロントエンドに返す値の整形を行います。</p>\n    <p>上の例では、settings.pyのTEMPLATESの'DIRS'が[os.path.join(BASE_DIR, 'templates')]となっていれば、ルート/test/test_pageにアクセス時にtemplatesフォルダのtest.htmlがブラウザに表示されるようになっています。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>ビュークラスの基本構造</h2>\n    <p>view.pyで作成するクラスはViewを継承させてください(ListViewなどを継承させても間接的に継承される)</p>\n    \n    <div class="code-block">from django.views import View<br><br>class TestView(View):<br>    def get(self, request):<br>        # getリクエスト時の処理<br>        pass<br><br>    def post(self, request):<br>        # postリクエスト時の処理<br>        pass</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>HTTPリクエストメソッドと処理の流れ</h2>\n    <p>urls.pyでルーティングされ、対象のクラスに処理が来ると、HTTPリクエストメソッド(getやpostなど)によって使用されるメソッドが切り替えられます。</p>\n    \n    <table>\n        <tr>\n            <th>HTTPリクエストメソッド</th>\n            <th>用途</th>\n        </tr>\n        <tr>\n            <td>get</td>\n            <td>データをもらうだけの通常のアクセス</td>\n        </tr>\n        <tr>\n            <td>post</td>\n            <td>テンプレート側からもデータを渡す必要があるとき</td>\n        </tr>\n        <tr>\n            <td>put</td>\n            <td>データベースなどのデータの更新時</td>\n        </tr>\n        <tr>\n            <td>delete</td>\n            <td>データベースなどのデータ削除時</td>\n        </tr>\n    </table>\n    \n    <p>継承しているViewクラスにはget、post、put、deleteメソッドが用意されており、対象のメソッドをオーバーライド(クラス内で新たに定義して上書き)することで使用されます。</p>\n    <p>またそれらの第1引数はself(自クラスのこと)、第2引数はrequest(テンプレート側から渡されるデータ)としてください。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>getメソッド（通常アクセス時）</h2>\n    <p>通常アクセス時にはgetメソッドが使用されます。</p>\n    \n    <div class="code-block">return render(request,  'フロントエンドに返すテンプレート', フロントエンドに返したい変数などがあれば辞書型で)</div>\n    \n    <p>とすることでブラウザには返されたHTMLファイルが表示されます。</p>\n    <p>render()の第3引数の辞書型はフロントエンドでキーを変数名として、値を使用することができます。</p>\n    <p>フロントエンドに変数を返す必要がないときはrender()の第3引数は未記入で問題ありません。</p>\n    <p>通常の画面表示のみの時はgetメソッドを記入するだけで問題ありません。</p>\n    \n    <div class="code-block">def get(self, request):<br>    context = {<br>        'title': 'テストページ',<br>        'message': 'これはテストメッセージです',<br>    }<br>    return render(request, 'test.html', context)</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>postメソッド（フォーム送信時など）</h2>\n    <p>Ajaxなどで、テンプレート側からpostメソッドでデータを受け取ったときはpostメソッドが使用されます。</p>\n    \n    <div class="code-block">return JsonResponse({フロントエンドに返すデータを辞書型で記入})</div>\n    \n    <p>と記入することで非同期通信を行うことができます。</p>\n    \n    <div class="code-block">def post(self, request):<br>    # リクエストからデータを取得<br>    data = request.POST.get('データのキー')<br>    <br>    # 処理を実行<br>    result = '処理結果'<br>    <br>    # JSON形式でレスポンスを返す<br>    return JsonResponse({<br>        'status': 'success',<br>        'result': result<br>    })</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">6</span>ページの遷移方法</h2>\n    <p>postメソッドなどで画面を遷移させたいときは以下の形式で記入します：</p>\n    \n    <div class="code-block">return redirect(移動したいページのurls.pyのname)</div>\n    \n    <p>この形式で記入することで遷移させることができます。</p>\n    \n    <div class="code-block">def post(self, request):<br>    # フォームデータの処理<br>    form = MyForm(request.POST)<br>    if form.is_valid():<br>        form.save()<br>        return redirect('success_page')<br>    else:<br>        # フォームが無効な場合は元のページに戻る<br>        return render(request, 'form_page.html', {'form': form})</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">7</span>クラスベースビューの完全な例</h2>\n    <p>以下は、すべての要素を組み合わせたクラスベースビューの例です：</p>\n    \n    <div class="code-block">from django.views import View<br>from django.shortcuts import render, redirect<br>from django.http import JsonResponse<br><br>class TestView(View):<br>    def get(self, request):<br>        # GETリクエスト時（通常アクセス時）の処理<br>        context = {<br>            'title': 'テストページ',<br>            'items': ['アイテム1', 'アイテム2', 'アイテム3']<br>        }<br>        return render(request, 'test.html', context)<br><br>    def post(self, request):<br>        # POSTリクエスト時の処理<br>        action = request.POST.get('action')<br><br>        if action == 'save':<br>            # データ保存処理<br>            # ...<br>            return JsonResponse({'status': 'success', 'message': '保存しました'})<br><br>        elif action == 'delete':<br>            # データ削除処理<br>            # ...<br>            return redirect('home')<br><br>        else:<br>            # その他のアクション<br>            return JsonResponse({'status': 'error', 'message': '不明なアクション'})</div>\n    \n    <div class="note">\n        <p><strong>注意：</strong> クラスベースビューをURLで使用する際は、必ず<code>as_view()</code>メソッドを使用してください。</p>\n        <p>例：<code>path('test/', TestView.as_view(), name='test')</code></p>\n    </div>\n</div>	7
127	2024-06-30 07:22:46	2025-03-22 19:50:33.267348	4	10	マスターユーザーの作成	\N	\N	\N	\N	\N	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>管理者ユーザーの作成</h2>\n    <p>Djangoでは管理画面を使用するために、管理者ユーザーを作成する必要があります。</p>\n    <p>プロジェクトのルートディレクトリで、以下のコマンドを実行します：</p>\n    \n    <div class="code-block">python manage.py createsuperuser</div>\n    \n    <p>このコマンドを実行すると、以下の情報の入力を求められます：</p>\n    <ul>\n        <li>ユーザー名（必須）</li>\n        <li>メールアドレス（任意）</li>\n        <li>パスワード（必須）</li>\n        <li>パスワード確認（必須）</li>\n    </ul>\n    \n    <p>必要な情報を入力すると、マスターユーザー（管理者ユーザー）が作成されます。</p>\n</div>	9
215	2024-08-06 01:13:34	2025-03-22 20:13:16.759576	4	18	よく使用するフォルダ	\N	\N	\N	\N	\N	\N	\N	<table>\n    <tr>\n        <th>ディレクトリ</th>\n        <th>説明</th>\n    </tr>\n    <tr>\n        <td>app/</td>\n        <td>アプリケーションの中心となるコード（MVC、ヘルパー、ジョブなど）</td>\n    </tr>\n    <tr>\n        <td>app/controllers/</td>\n        <td>コントローラーファイル（リクエスト処理、モデルとビューの連携）</td>\n    </tr>\n    <tr>\n        <td>app/models/</td>\n        <td>モデルファイル（データベースとの連携、ビジネスロジック）</td>\n    </tr>\n    <tr>\n        <td>app/views/</td>\n        <td>ビューファイル（HTML、ERB、JSONなどの表示テンプレート）</td>\n    </tr>\n    <tr>\n        <td>app/assets/</td>\n        <td>静的ファイル（CSS、JavaScript、画像など）</td>\n    </tr>\n    <tr>\n        <td>app/helpers/</td>\n        <td>ビューヘルパー（ビューで使用する補助メソッド）</td>\n    </tr>\n    <tr>\n        <td>config/</td>\n        <td>アプリケーション設定（ルーティング、データベース設定など）</td>\n    </tr>\n    <tr>\n        <td>config/routes.rb</td>\n        <td>ルーティング定義ファイル（URLとコントローラーのマッピング）</td>\n    </tr>\n    <tr>\n        <td>config/database.yml</td>\n        <td>データベース接続設定</td>\n    </tr>\n    <tr>\n        <td>db/</td>\n        <td>データベース関連ファイル（マイグレーション、スキーマなど）</td>\n    </tr>\n    <tr>\n        <td>db/migrate/</td>\n        <td>データベースマイグレーションファイル</td>\n    </tr>\n    <tr>\n        <td>db/seeds.rb</td>\n        <td>初期データ投入用スクリプト</td>\n    </tr>\n    <tr>\n        <td>public/</td>\n        <td>静的ファイル（エラーページ、ファビコンなど、Webサーバーから直接アクセス可能）</td>\n    </tr>\n    <tr>\n        <td>vendor/</td>\n        <td>サードパーティのコード（外部ライブラリなど）</td>\n    </tr>\n    <tr>\n        <td>lib/</td>\n        <td>アプリケーション固有のライブラリ</td>\n    </tr>\n    <tr>\n        <td>log/</td>\n        <td>アプリケーションログファイル</td>\n    </tr>\n    <tr>\n        <td>test/</td>\n        <td>テストコード（単体テスト、機能テストなど）</td>\n    </tr>\n    <tr>\n        <td>tmp/</td>\n        <td>一時ファイル（キャッシュ、セッションなど）</td>\n    </tr>\n    <tr>\n        <td>Gemfile</td>\n        <td>依存するgemを記述するファイル</td>\n    </tr>\n    <tr>\n        <td>Gemfile.lock</td>\n        <td>実際にインストールされたgemのバージョンを記録するファイル</td>\n    </tr>\n    <tr>\n        <td>config.ru</td>\n        <td>RackベースのWebサーバー用の設定ファイル</td>\n    </tr>\n</table>\n\n<div class="note">\n    <p><strong>ヒント：</strong> Railsは「規約より設定」（Convention Over Configuration）の原則に従っており、ファイルを適切なディレクトリに配置することで、自動的に適切な機能が使えるようになります。</p>\n</div>	2
217	2024-08-06 02:01:47	2025-03-22 20:15:55.037501	4	18	ルーティングの設定	\N	\N	\N	\N	\N	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>ルートURLへのルーティング</h2>\n    <p>config/routes.rbを以下のように書き換えることで、ルートURL（トップページ）へのルーティングを設定できます：</p>\n    \n    <div class="code-block">Rails.application.routes.draw do<br>  get "/" => "コントローラー名#メソッド名"<br>end</div>\n    \n    <p>この設定を行うと、<a href="http://127.0.0.1:3000" target="_blank">http://127.0.0.1:3000</a>にアクセスしたときに先ほどコントローラーで設定した内容が表示されます。</p>\n    \n    <div class="note">\n        <p><strong>重要：</strong> コントローラー名は末尾の「Controller」は必要なく、すべて小文字で入力してください。</p>\n        <p>例えば、HomeControllerであれば「home」、PostsControllerであれば「posts」と記述します。</p>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>カスタムパスへのルーティング</h2>\n    <p>getの直後の"/"はアクセスされるURLを示しています。特定のパスに対するルーティングを設定することもできます：</p>\n    \n    <div class="code-block">Rails.application.routes.draw do<br>  get "/test" => "コントローラー名#メソッド名"<br>end</div>\n    \n    <p>この例では、<a href="http://127.0.0.1:3000/test" target="_blank">http://127.0.0.1:3000/test</a>にアクセスしたときに指定したコントローラーのメソッドが実行されます。</p>\n    \n    <p>複数のルーティングを設定することもできます：</p>\n    \n    <div class="code-block">Rails.application.routes.draw do<br>  get "/" => "home#index"<br>  get "/about" => "home#about"<br>  get "/contact" => "home#contact"<br>end</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>ルートパスの別の記述方法</h2>\n    <p>ルートパスを設定するには、以下のような書き方もよく使われます：</p>\n    \n    <div class="code-block">Rails.application.routes.draw do<br>  root "コントローラー名#メソッド名"<br>end</div>\n    \n    <p>この書き方は <code>get "/" => "コントローラー名#メソッド名"</code> と同じ意味を持ちます。</p>\n    \n    <p>例：</p>\n    <div class="code-block">Rails.application.routes.draw do<br>  root "home#index"<br>end</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>パラメータを含むルーティング</h2>\n    <p>URLにパラメータを含めることもできます：</p>\n    \n    <div class="code-block">Rails.application.routes.draw do<br>  get "/posts/:id" => "posts#show"<br>end</div>\n    \n    <p>この例では、<a href="http://127.0.0.1:3000/posts/1" target="_blank">http://127.0.0.1:3000/posts/1</a>にアクセスすると、Postsコントローラーのshowメソッドにidパラメータとして「1」が渡されます。</p>\n    \n    <p>コントローラー内でパラメータにアクセスする方法：</p>\n    \n    <div class="code-block">class PostsController < ApplicationController<br>  def show<br>    @post = Post.find(params[:id])  # URLから渡されたidを使用<br>  end<br>end</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>リソースベースのルーティング</h2>\n    <p>Railsではよく「resources」を使った記述でRESTfulなルーティングを一度に設定します：</p>\n    \n    <div class="code-block">Rails.application.routes.draw do<br>  resources :posts<br>end</div>\n    \n    <p>これだけで以下の7つのルーティングが自動的に設定されます：</p>\n    \n    <table>\n        <tr>\n            <th>HTTPメソッド</th>\n            <th>パス</th>\n            <th>コントローラー#アクション</th>\n            <th>目的</th>\n        </tr>\n        <tr>\n            <td>GET</td>\n            <td>/posts</td>\n            <td>posts#index</td>\n            <td>すべての投稿を表示</td>\n        </tr>\n        <tr>\n            <td>GET</td>\n            <td>/posts/new</td>\n            <td>posts#new</td>\n            <td>新規投稿フォームを表示</td>\n        </tr>\n        <tr>\n            <td>POST</td>\n            <td>/posts</td>\n            <td>posts#create</td>\n            <td>新規投稿を作成</td>\n        </tr>\n        <tr>\n            <td>GET</td>\n            <td>/posts/:id</td>\n            <td>posts#show</td>\n            <td>特定の投稿を表示</td>\n        </tr>\n        <tr>\n            <td>GET</td>\n            <td>/posts/:id/edit</td>\n            <td>posts#edit</td>\n            <td>投稿編集フォームを表示</td>\n        </tr>\n        <tr>\n            <td>PATCH/PUT</td>\n            <td>/posts/:id</td>\n            <td>posts#update</td>\n            <td>特定の投稿を更新</td>\n        </tr>\n        <tr>\n            <td>DELETE</td>\n            <td>/posts/:id</td>\n            <td>posts#destroy</td>\n            <td>特定の投稿を削除</td>\n        </tr>\n    </table>\n    \n    <p>必要なアクションだけに制限することもできます：</p>\n    \n    <div class="code-block">resources :posts, only: [:index, :show]</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">6</span>ルーティングの確認方法</h2>\n    <p>設定したルーティングを確認するには、以下のコマンドを実行します：</p>\n    \n    <div class="code-block">rails routes</div>\n    \n    <p>特定のコントローラーに関連するルーティングだけを表示するには：</p>\n    \n    <div class="code-block">rails routes -c posts</div>\n    \n    <div class="note">\n        <p><strong>ヒント：</strong> ルーティング設定を変更した後は、開発サーバーを再起動するか、ブラウザをリロードして変更を反映させてください。</p>\n    </div>\n</div>	4
219	2024-08-06 03:00:35	2025-03-22 20:20:06.361701	4	18	ビュー内で変数の値を使用する	テキスト	app/test_controller.rb	class TestController < ApplicationController\\n  def test\\n    @text = "テキスト"\\n  end\\nend	views/test/test.html.erb	<p><%= @text %></p>	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>コントローラーからビューへのデータ受け渡し</h2>\n    <p>コントローラーのメソッド内でインスタンス変数（@から始まる変数）を定義することで、その値をビューに渡すことができます。</p>\n    \n    <p>例えば、TestControllerのtestメソッドで以下のようにプロパティを設定します：</p>\n    \n    <div class="code-block">class TestController < ApplicationController<br>  def test<br>    @text = "Hello, Rails!"<br>  end<br>end</div>\n    \n    <p>このように、メソッド内でインスタンス変数（@から始まる変数）の定義を行っているときは、その値をビューに渡すことができます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>ビューでのデータの表示</h2>\n    <p>対応するビュー（app/views/test/test.html.erb）では、インスタンス変数を以下のように表示できます：</p>\n    \n    <div class="code-block">&lt;h1&gt;テストページ&lt;/h1&gt;<br><br>&lt;p&gt;&lt;%= @text %&gt;&lt;/p&gt;</div>\n    \n    <p>このコードは「Hello, Rails!」というテキストを表示します。</p>\n    \n    <p>ビュー側では<code>&lt;%= @プロパティ名 %&gt;</code>と入力することで、コントローラーで設定したインスタンス変数の値を使用することができます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>複雑なデータの受け渡し</h2>\n    <p>文字列だけでなく、配列やハッシュなどの複雑なデータも渡すことができます：</p>\n    \n    <div class="code-block">class TestController < ApplicationController<br>  def test<br>    @text = "Hello, Rails!"<br>    @numbers = [1, 2, 3, 4, 5]<br>    @user = {<br>      name: "山田太郎",<br>      age: 30,<br>      email: "yamada@example.com"<br>    }<br>  end<br>end</div>\n    \n    <p>ビューでの使用例：</p>\n    \n    <div class="code-block">&lt;h1&gt;&lt;%= @text %&gt;&lt;/h1&gt;<br><br>&lt;h2&gt;数値リスト:&lt;/h2&gt;<br>&lt;ul&gt;<br>  &lt;% @numbers.each do |number| %&gt;<br>    &lt;li&gt;&lt;%= number %&gt;&lt;/li&gt;<br>  &lt;% end %&gt;<br>&lt;/ul&gt;<br><br>&lt;h2&gt;ユーザー情報:&lt;/h2&gt;<br>&lt;p&gt;名前: &lt;%= @user[:name] %&gt;&lt;/p&gt;<br>&lt;p&gt;年齢: &lt;%= @user[:age] %&gt;&lt;/p&gt;<br>&lt;p&gt;メール: &lt;%= @user[:email] %&gt;&lt;/p&gt;</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>モデルオブジェクトの受け渡し</h2>\n    <p>多くの場合、データベースから取得したモデルオブジェクトをビューに渡します：</p>\n    \n    <div class="code-block">class PostsController < ApplicationController<br>  def show<br>    @post = Post.find(params[:id])  # データベースから記事を取得<br>    @comments = @post.comments     # 関連するコメントも取得<br>  end<br>end</div>\n    \n    <p>ビューでの使用例：</p>\n    \n    <div class="code-block">&lt;h1&gt;&lt;%= @post.title %&gt;&lt;/h1&gt;<br><br>&lt;div class="content"&gt;<br>  &lt;%= @post.content %&gt;<br>&lt;/div&gt;<br><br>&lt;h2&gt;コメント (&lt;%= @comments.count %&gt;)&lt;/h2&gt;<br>&lt;% @comments.each do |comment| %&gt;<br>  &lt;div class="comment"&gt;<br>    &lt;p&gt;&lt;strong&gt;&lt;%= comment.user.name %&gt;:&lt;/strong&gt; &lt;%= comment.body %&gt;&lt;/p&gt;<br>    &lt;small&gt;&lt;%= comment.created_at.strftime("%Y/%m/%d %H:%M") %&gt;&lt;/small&gt;<br>  &lt;/div&gt;<br>&lt;% end %&gt;</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>条件によるデータの変更</h2>\n    <p>条件に応じて異なるデータをビューに渡すこともできます：</p>\n    \n    <div class="code-block">class ProductsController < ApplicationController<br>  def index<br>    @category = params[:category]<br>    <br>    if @category.present?<br>      @products = Product.where(category: @category)<br>      @title = "#{@category}の商品一覧"<br>    else<br>      @products = Product.all<br>      @title = "全商品一覧"<br>    end<br>  end<br>end</div>\n    \n    <p>ビューでの表示：</p>\n    \n    <div class="code-block">&lt;h1&gt;&lt;%= @title %&gt;&lt;/h1&gt;<br><br>&lt;% if @products.empty? %&gt;<br>  &lt;p&gt;該当する商品がありません。&lt;/p&gt;<br>&lt;% else %&gt;<br>  &lt;div class="products"&gt;<br>    &lt;% @products.each do |product| %&gt;<br>      &lt;div class="product"&gt;<br>        &lt;h3&gt;&lt;%= product.name %&gt;&lt;/h3&gt;<br>        &lt;p&gt;&lt;%= product.description %&gt;&lt;/p&gt;<br>        &lt;p class="price"&gt;&lt;%= number_to_currency(product.price) %&gt;&lt;/p&gt;<br>      &lt;/div&gt;<br>    &lt;% end %&gt;<br>  &lt;/div&gt;<br>&lt;% end %&gt;</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">6</span>注意点</h2>\n    <div class="note">\n        <p><strong>重要：</strong> インスタンス変数（@から始まる変数）のみがビューに渡されます。ローカル変数（@なしの変数）はビューからアクセスできません。</p>\n        \n        <div class="code-block">def show<br>  @visible_data = "ビューで表示できる"  # インスタンス変数<br>  hidden_data = "ビューでは表示できない"  # ローカル変数<br>end</div>\n        \n        <p>インスタンス変数は必要最小限にし、明確な命名を心がけると、コードの可読性が向上します。</p>\n    </div>\n</div>	6
231	2024-08-16 04:54:20	2025-03-22 20:24:31.082103	4	18	sqlを操作する	\N	app/controllers/test_controller.rb	class TestController < ApplicationController\\n  def index\\n    sql = "select * from companies"\\n    @companies = ActiveRecord::Base.connection.execute(sql)\\n  end\\nend	app/views/test/index.html.erb	<% @companies.each do |company| %>\\n    <div><%= company['name'] %></div>\\n<% end %>	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>モデルデータの取得と表示</h2>\n    <p>Railsではモデルを使って簡単にデータベースからデータを取得できます。以下は基本的な例です：</p>\n    \n    <div class="code-block">class CompaniesController < ApplicationController<br>    def index<br>        @companies = Company.all  # companiesテーブルの全データを取得<br>    end<br>end</div>\n    \n    <p>対応するビュー（app/views/companies/index.html.erb）では、取得したデータを表示できます：</p>\n    \n    <div class="code-block">&lt;h1&gt;会社一覧&lt;/h1&gt;<br><br>&lt;ul&gt;<br>    &lt;% @companies.each do |company| %&gt;<br>        &lt;li&gt;&lt;%= company.name %&gt;&lt;/li&gt;<br>    &lt;% end %&gt;<br>&lt;/ul&gt;</div>\n    \n    <p>上の例はcompaniesモデルのデータを全て取得して変数@companiesに代入し、ビューで繰り返し処理を行い、companyモデルのnameフィールドを表示しています。</p>\n    \n    <div class="note">\n        <p><strong>参考：</strong> モデル関係の詳細はRuby on Rails(ORM)の記事に書いてありますので、モデルを操作したことのない方はそちらを参考にしてください。</p>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>生のSQLクエリの実行</h2>\n    <p>ActiveRecordを使わずに直接SQLを実行したい場合は、以下の形式で記述できます：</p>\n    \n    <div class="code-block">class ReportsController < ApplicationController<br>    def complex_report<br>        sql = "SELECT companies.name, COUNT(employees.id) as employee_count<br>               FROM companies<br>               LEFT JOIN employees ON companies.id = employees.company_id<br>               GROUP BY companies.id<br>               ORDER BY employee_count DESC"<br>        <br>        @results = ActiveRecord::Base.connection.execute(sql)<br>    end<br>end</div>\n    \n    <p>ビューでの表示例：</p>\n    \n    <div class="code-block">&lt;h1&gt;会社別従業員数レポート&lt;/h1&gt;<br><br>&lt;table&gt;<br>    &lt;tr&gt;<br>        &lt;th&gt;会社名&lt;/th&gt;<br>        &lt;th&gt;従業員数&lt;/th&gt;<br>    &lt;/tr&gt;<br>    <br>    &lt;% @results.each do |row| %&gt;<br>        &lt;tr&gt;<br>            &lt;td&gt;&lt;%= row['name'] %&gt;&lt;/td&gt;<br>            &lt;td&gt;&lt;%= row['employee_count'] %&gt;&lt;/td&gt;<br>        &lt;/tr&gt;<br>    &lt;% end %&gt;<br>&lt;/table&gt;</div>\n    \n    <div class="note">\n        <p><strong>注意：</strong> 生のSQLを使用する場合は、SQL injectionに注意してください。ユーザー入力を直接SQLに埋め込むことは避け、必ずパラメータ化してください。</p>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>データベースコンソールの使用</h2>\n    <p>プロジェクトのルートディレクトリで以下のコマンドを実行すると、コマンドプロンプトで直接SQLを実行できます：</p>\n    \n    <div class="code-block">rails dbconsole</div>\n    \n    <p>このコマンドを実行すると、設定されているデータベース（MySQL、PostgreSQL、SQLiteなど）に応じたコンソールが起動します。</p>\n    \n    <p>SQLコマンドの例：</p>\n    \n    <div class="code-block">-- テーブル一覧を表示<br>SHOW TABLES;<br><br>-- companiesテーブルの構造を表示<br>DESCRIBE companies;<br><br>-- データの取得<br>SELECT * FROM companies;<br><br>-- 条件付きデータ取得<br>SELECT * FROM employees WHERE company_id = 1;</div>\n    \n    <p>SQLの操作を終了したいときは<strong>Ctrl+C</strong>を押してください。</p>\n    \n    <div class="note">\n        <p><strong>ヒント：</strong> SQLiteの場合は<code>.quit</code>、MySQLの場合は<code>quit;</code>または<code>exit;</code>と入力することでも終了できます。</p>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>ActiveRecordを使ったデータ操作</h2>\n    <p>Railsでは基本的にActiveRecordを使ってデータを操作することをお勧めします。主な操作方法を以下に示します：</p>\n    \n    <div class="code-block"># データの取得<br>@company = Company.find(1)                 # ID=1の会社を取得<br>@companies = Company.where(active: true)  # activeがtrueの会社を全て取得<br>@companies = Company.order(name: :asc)    # 名前の昇順で全ての会社を取得<br><br># データの作成<br>company = Company.new(name: "New Corp", address: "Tokyo")<br>company.save<br><br># または一行で<br>Company.create(name: "New Corp", address: "Tokyo")<br><br># データの更新<br>company = Company.find(1)<br>company.update(name: "Updated Corp")<br><br># データの削除<br>company = Company.find(1)<br>company.destroy</div>\n    \n    <p>ActiveRecordは読みやすく、SQLインジェクションからも保護されているため、通常はこの方法が推奨されます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>データベースマイグレーション</h2>\n    <p>データベースのスキーマを変更する場合は、マイグレーションを使用します：</p>\n    \n    <div class="code-block"># マイグレーションファイルの作成<br>rails generate migration AddPhoneToCompanies phone:string<br><br># マイグレーションの実行<br>rails db:migrate<br><br># マイグレーションの巻き戻し（最後の操作を元に戻す）<br>rails db:rollback</div>\n    \n    <p>マイグレーションファイルの例（db/migrate/YYYYMMDDHHMMSS_add_phone_to_companies.rb）：</p>\n    \n    <div class="code-block">class AddPhoneToCompanies < ActiveRecord::Migration[6.1]<br>    def change<br>        add_column :companies, :phone, :string<br>    end<br>end</div>\n</div>	10
227	2024-08-15 17:41:54	2025-03-22 20:22:48.806883	4	18	ビュー内での繰り返し処理	1\\n2\\n3\\n4\\n5	index.html.erb	<% test = [1, 2, 3, 4, 5] %>\\n\\n<% test.each do |i| %>\\n    <div><%= i %></div>\\n<% end %>	\N	\N	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>ビューでの繰り返し処理の基本</h2>\n    <p>Railsのビュー内で繰り返し処理を行うには、以下の形式で記述します：</p>\n    \n    <div class="code-block">&lt;% 配列.each do |繰り返し時に代入する変数| %&gt;<br>    繰り返し時の処理<br>&lt;% end %&gt;</div>\n    \n    <p>例えば、コントローラーで配列を定義した場合：</p>\n    \n    <div class="code-block">class TestController < ApplicationController<br>    def index<br>        @items = ["Apple", "Banana", "Orange", "Grape"]<br>    end<br>end</div>\n    \n    <p>対応するビュー（app/views/test/index.html.erb）では以下のように記述できます：</p>\n    \n    <div class="code-block">&lt;h1&gt;フルーツ一覧&lt;/h1&gt;<br><br>&lt;ul&gt;<br>    &lt;% @items.each do |fruit| %&gt;<br>        &lt;li&gt;&lt;%= fruit %&gt;&lt;/li&gt;<br>    &lt;% end %&gt;<br>&lt;/ul&gt;</div>\n    \n    <p>このコードはブラウザで以下のようなHTMLとして表示されます：</p>\n    \n    <div class="code-block">&lt;h1&gt;フルーツ一覧&lt;/h1&gt;<br><br>&lt;ul&gt;<br>    &lt;li&gt;Apple&lt;/li&gt;<br>    &lt;li&gt;Banana&lt;/li&gt;<br>    &lt;li&gt;Orange&lt;/li&gt;<br>    &lt;li&gt;Grape&lt;/li&gt;<br>&lt;/ul&gt;</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>逆順の繰り返し処理</h2>\n    <p>配列を逆順に処理するには、<code>reverse_each</code>メソッドを使用します：</p>\n    \n    <div class="code-block">&lt;h1&gt;フルーツ一覧（逆順）&lt;/h1&gt;<br><br>&lt;ul&gt;<br>    &lt;% @items.reverse_each do |fruit| %&gt;<br>        &lt;li&gt;&lt;%= fruit %&gt;&lt;/li&gt;<br>    &lt;% end %&gt;<br>&lt;/ul&gt;</div>\n    \n    <p>これにより、配列の最後の要素から順に処理されます。表示結果は以下のようになります：</p>\n    \n    <div class="code-block">&lt;h1&gt;フルーツ一覧（逆順）&lt;/h1&gt;<br><br>&lt;ul&gt;<br>    &lt;li&gt;Grape&lt;/li&gt;<br>    &lt;li&gt;Orange&lt;/li&gt;<br>    &lt;li&gt;Banana&lt;/li&gt;<br>    &lt;li&gt;Apple&lt;/li&gt;<br>&lt;/ul&gt;</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>インデックス付きの繰り返し処理</h2>\n    <p>繰り返し処理時にインデックス（添字）も一緒に取得したい場合は、<code>each_with_index</code>メソッドを使用します：</p>\n    \n    <div class="code-block">&lt;h1&gt;フルーツ一覧（インデックス付き）&lt;/h1&gt;<br><br>&lt;ul&gt;<br>    &lt;% @items.each_with_index do |fruit, index| %&gt;<br>        &lt;li&gt;No.<%= index + 1 %&gt;: &lt;%= fruit %&gt;&lt;/li&gt;<br>    &lt;% end %&gt;<br>&lt;/ul&gt;</div>\n    \n    <p>表示結果：</p>\n    \n    <div class="code-block">&lt;h1&gt;フルーツ一覧（インデックス付き）&lt;/h1&gt;<br><br>&lt;ul&gt;<br>    &lt;li&gt;No.1: Apple&lt;/li&gt;<br>    &lt;li&gt;No.2: Banana&lt;/li&gt;<br>    &lt;li&gt;No.3: Orange&lt;/li&gt;<br>    &lt;li&gt;No.4: Grape&lt;/li&gt;<br>&lt;/ul&gt;</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>繰り返し処理内での条件分岐</h2>\n    <p>繰り返し処理内で条件分岐を組み合わせることもできます：</p>\n    \n    <div class="code-block">&lt;h1&gt;フルーツ一覧（条件付き）&lt;/h1&gt;<br><br>&lt;ul&gt;<br>    &lt;% @items.each do |fruit| %&gt;<br>        &lt;% if fruit.length > 5 %&gt;<br>            &lt;li class="long-name"&gt;&lt;%= fruit %&gt; (長い名前)&lt;/li&gt;<br>        &lt;% else %&gt;<br>            &lt;li class="short-name"&gt;&lt;%= fruit %&gt;&lt;/li&gt;<br>        &lt;% end %&gt;<br>    &lt;% end %&gt;<br>&lt;/ul&gt;</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>コレクションが空の場合の対応</h2>\n    <p>コレクションが空の場合に特別なメッセージを表示するには、<code>empty?</code>メソッドや<code>present?</code>メソッドを使用できます：</p>\n    \n    <div class="code-block">&lt;h1&gt;フルーツ一覧&lt;/h1&gt;<br><br>&lt;% if @items.empty? %&gt;<br>    &lt;p&gt;フルーツがありません。&lt;/p&gt;<br>&lt;% else %&gt;<br>    &lt;ul&gt;<br>        &lt;% @items.each do |fruit| %&gt;<br>            &lt;li&gt;&lt;%= fruit %&gt;&lt;/li&gt;<br>        &lt;% end %&gt;<br>    &lt;/ul&gt;<br>&lt;% end %&gt;</div>\n    \n    <p>または、より簡潔に書く方法として<code>each</code>と<code>empty</code>を組み合わせたブロックを使用できます：</p>\n    \n    <div class="code-block">&lt;h1&gt;フルーツ一覧&lt;/h1&gt;<br><br>&lt;ul&gt;<br>    &lt;% @items.each do |fruit| %&gt;<br>        &lt;li&gt;&lt;%= fruit %&gt;&lt;/li&gt;<br>    &lt;% end %&gt;<br>    <br>    &lt;% if @items.empty? %&gt;<br>        &lt;li&gt;フルーツがありません。&lt;/li&gt;<br>    &lt;% end %&gt;<br>&lt;/ul&gt;</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">6</span>ネストした繰り返し処理</h2>\n    <p>繰り返し処理をネスト（入れ子）にすることもできます：</p>\n    \n    <div class="code-block">&lt;% @categories.each do |category| %&gt;<br>    &lt;h2&gt;&lt;%= category.name %&gt;&lt;/h2&gt;<br>    <br>    &lt;ul&gt;<br>        &lt;% category.products.each do |product| %&gt;<br>            &lt;li&gt;<br>                &lt;%= product.name %&gt; - &lt;%= product.price %&gt;円<br>            &lt;/li&gt;<br>        &lt;% end %&gt;<br>    &lt;/ul&gt;<br>&lt;% end %&gt;</div>\n    \n    <div class="note">\n        <p><strong>注意点：</strong> 複雑なネストした繰り返しはビューを複雑にする可能性があります。可能な限りコントローラーやヘルパーで前処理を行い、ビューをシンプルに保つことをお勧めします。</p>\n    </div>\n</div>	9
250	2024-08-20 17:07:38	2025-03-22 20:30:14.293153	4	18	表示するテンプレートの設定	\N	app/controllers/test_controller.rb	class TestController < ApplicationController\\n    layout "user"\\n\\n    def index\\n    end\\nend	app/views/layout/user.html.erb	<!DOCTYPE html>\\n<html>\\n  <head>\\n    <title>タイトル</title>\\n    <meta name="viewport" content="width=device-width,initial-scale=1">\\n    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">\\n    <meta http-equiv="Content-Style-Type" content="text/css">\\n    <meta name="viewport" content="width=device-width,initial-scale=1.0,minimum-scale=1.0">\\n    <%= csrf_meta_tags %>\\n    <%= csp_meta_tag %>\\n\\n    <%= stylesheet_link_tag "application", media: "all", "data-turbo-track": "reload" %>\\n    <%= javascript_importmap_tags %>\\n  </head>\\n\\n  <body>\\n    <%= yield %>\\n  </body>\\n</html>	app/views/test/index.html.erb	<div>test</div>	<div class="step">\n    <h2><span class="step-number">1</span>レイアウトの基本</h2>\n    <p>Railsでは、コントローラーごとに異なるレイアウトを適用することができます。レイアウトは、ページの共通部分（ヘッダー、フッター、ナビゲーションなど）を定義するテンプレートです。</p>\n    \n    <p>デフォルトでは、app/views/layouts/application.html.erbがすべてのビューに適用されます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>コントローラーでのレイアウト指定</h2>\n    <p>コントローラーのクラス内で、使用するレイアウトを以下の形式で指定することができます：</p>\n    \n    <div class="code-block">class TestController < ApplicationController<br>    layout "レイアウト名"<br>    <br>    def index<br>        # アクションの処理内容<br>    end<br>end</div>\n    \n    <p>レイアウト名には、app/views/layouts/ディレクトリ内のファイル名から拡張子を取り除いたものを指定します。</p>\n    \n    <p>例えば、次のように指定すると：</p>\n    \n    <div class="code-block">class TestController < ApplicationController<br>    layout "user"<br>    <br>    def index<br>        # アクションの処理内容<br>    end<br>end</div>\n    \n    <p>このコントローラーのすべてのアクションに対して、app/views/layouts/user.html.erbがレイアウトとして使用されます。上の例はuserテンプレート（app/views/layouts/user.html.erb）を使用してapp/views/test/index.html.erbを表示させています。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>特定のアクションのみレイアウトを変更</h2>\n    <p>特定のアクションだけ異なるレイアウトを使用したい場合は、render時にレイアウトを指定できます：</p>\n    \n    <div class="code-block">def show<br>    render layout: "special"<br>end</div>\n    \n    <p>この場合、showアクションのみapp/views/layouts/special.html.erbをレイアウトとして使用します。</p>\n    \n    <p>レイアウトを使用しない場合は以下のように指定します：</p>\n    \n    <div class="code-block">def api_response<br>    render layout: false<br>end</div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>条件に基づくレイアウト指定</h2>\n    <p>条件に基づいて動的にレイアウトを切り替えることもできます：</p>\n    \n    <div class="code-block">class ProductsController < ApplicationController<br>    layout :determine_layout<br>    <br>    private<br>    <br>    def determine_layout<br>        if current_user.admin?<br>            "admin"<br>        else<br>            "application"<br>        end<br>    end<br>end</div>\n    \n    <p>この例では、ログインユーザーが管理者の場合はadminレイアウト、それ以外の場合はapplicationレイアウトを使用します。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>レイアウトファイルの作成</h2>\n    <p>新しいレイアウトファイルを作成する場合は、app/views/layoutsディレクトリに.html.erb（またはhaml、slim等）ファイルを作成します。</p>\n    \n    <p>例：app/views/layouts/user.html.erb</p>\n    \n    <div class="code-block">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>    &lt;head&gt;<br>        &lt;title&gt;ユーザーページ&lt;/title&gt;<br>        &lt;%= csrf_meta_tags %&gt;<br>        &lt;%= csp_meta_tag %&gt;<br>        <br>        &lt;%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track': 'reload' %&gt;<br>        &lt;%= javascript_pack_tag 'application', 'data-turbolinks-track': 'reload' %&gt;<br>    &lt;/head&gt;<br>    <br>    &lt;body class="user-layout"&gt;<br>        &lt;header class="user-header"&gt;<br>            &lt;!-- ユーザー専用のヘッダー内容 --&gt;<br>        &lt;/header&gt;<br>        <br>        &lt;main&gt;<br>            &lt;%= yield %&gt;  &lt;!-- ここにビューの内容が挿入される --&gt;<br>        &lt;/main&gt;<br>        <br>        &lt;footer class="user-footer"&gt;<br>            &lt;!-- ユーザー専用のフッター内容 --&gt;<br>        &lt;/footer&gt;<br>    &lt;/body&gt;<br>&lt;/html&gt;</div>\n    \n    <p>レイアウトファイル内の<code>&lt;%= yield %&gt;</code>の部分に、各アクションに対応するビュー（この例ではapp/views/test/index.html.erb）の内容が挿入されます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">6</span>コンテンツブロックの活用</h2>\n    <p>コンテンツブロックを使用すると、レイアウト内の特定の場所に異なる内容を挿入できます：</p>\n    \n    <div class="code-block">&lt;!-- レイアウトファイル (app/views/layouts/application.html.erb) --&gt;<br>&lt;html&gt;<br>    &lt;head&gt;<br>        &lt;title&gt;&lt;%= yield :page_title %&gt; - サイト名&lt;/title&gt;<br>        &lt;!-- 他のヘッダー内容 --&gt;<br>    &lt;/head&gt;<br>    &lt;body&gt;<br>        &lt;div class="sidebar"&gt;<br>            &lt;%= yield :sidebar %&gt;<br>        &lt;/div&gt;<br>        <br>        &lt;div class="main-content"&gt;<br>            &lt;%= yield %&gt;<br>        &lt;/div&gt;<br>    &lt;/body&gt;<br>&lt;/html&gt;</div>\n    \n    <p>ビューファイルでは、content_forを使って特定のブロックに内容を提供できます：</p>\n    \n    <div class="code-block">&lt;!-- ビューファイル (app/views/test/index.html.erb) --&gt;<br>&lt;% content_for :page_title do %&gt;<br>    ユーザーダッシュボード<br>&lt;% end %&gt;<br><br>&lt;% content_for :sidebar do %&gt;<br>    &lt;ul&gt;<br>        &lt;li&gt;&lt;%= link_to "プロフィール", profile_path %&gt;&lt;/li&gt;<br>        &lt;li&gt;&lt;%= link_to "設定", settings_path %&gt;&lt;/li&gt;<br>        &lt;li&gt;&lt;%= link_to "ログアウト", logout_path %&gt;&lt;/li&gt;<br>    &lt;/ul&gt;<br>&lt;% end %&gt;<br><br>&lt;h1&gt;ようこそ、&lt;%= current_user.name %&gt;さん&lt;/h1&gt;<br><br>&lt;!-- メインコンテンツ --&gt;</div>\n</div>	12
238	2024-08-16 07:21:58	2025-03-22 20:54:06.910588	4	19	データの取得全件	\N	app/controllers/test_controller.rb	class TestController < ApplicationController\\n  def index\\n    @companies = Company.all\\n  end\\nend	app/views/test/index.html.erb	<% @companies.each do |company|%>\\n    <div><%= company['name'] %></div>\\n<% end %>	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>モデルから全データを取得する</h2>\n    <p>Railsでモデルの全データを取得するには、<code>all</code>メソッドを使用します：</p>\n    \n    <div class="code-block">モデル.all</div>\n    \n    <p>コントローラーでの使用例：</p>\n    \n    <div class="code-block"># app/controllers/companies_controller.rb<br>def index<br>  @companies = Company.all<br>end</div>\n    \n    <p>上の例では、Companyモデルのすべてのデータを取得して<code>@companies</code>変数に代入しています。この変数はビューで利用できます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>ビューでのデータ表示</h2>\n    <p>取得したデータをビューで表示するには、繰り返し処理を使用します：</p>\n    \n    <div class="code-block">&lt;!-- app/views/companies/index.html.erb --&gt;<br>&lt;h1&gt;会社一覧&lt;/h1&gt;<br><br>&lt;table&gt;<br>  &lt;thead&gt;<br>    &lt;tr&gt;<br>      &lt;th&gt;会社名&lt;/th&gt;<br>      &lt;th&gt;設立日&lt;/th&gt;<br>      &lt;th&gt;操作&lt;/th&gt;<br>    &lt;/tr&gt;<br>  &lt;/thead&gt;<br>  &lt;tbody&gt;<br>    &lt;% @companies.each do |company| %&gt;<br>      &lt;tr&gt;<br>        &lt;td&gt;&lt;%= company['name'] %&gt;&lt;/td&gt;<br>        &lt;td&gt;&lt;%= company['founding_date'] %&gt;&lt;/td&gt;<br>        &lt;td&gt;<br>          &lt;%= link_to '詳細', company_path(company) %&gt;<br>          &lt;%= link_to '編集', edit_company_path(company) %&gt;<br>          &lt;%= link_to '削除', company_path(company), method: :delete, data: { confirm: '本当に削除しますか？' } %&gt;<br>        &lt;/td&gt;<br>      &lt;/tr&gt;<br>    &lt;% end %&gt;<br>  &lt;/tbody&gt;<br>&lt;/table&gt;</div>\n    \n    <p>ビュー側では、<code>@companies</code>はリストの中にハッシュが入ったような形式になっているため、<code>each</code>メソッドで単体のデータになるように繰り返し処理を行います。各レコードのフィールドには、<code>company['フィールド名']</code>の形式でアクセスします。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>ドット表記法でのアクセス</h2>\n    <p>Railsでは、ハッシュ記法（<code>['フィールド名']</code>）だけでなく、ドット表記法（<code>.フィールド名</code>）でもフィールドにアクセスできます：</p>\n    \n    <div class="code-block">&lt;% @companies.each do |company| %&gt;<br>  &lt;tr&gt;<br>    &lt;td&gt;&lt;%= company.name %&gt;&lt;/td&gt;<br>    &lt;td&gt;&lt;%= company.founding_date %&gt;&lt;/td&gt;<br>  &lt;/tr&gt;<br>&lt;% end %&gt;</div>\n    \n    <p>ドット表記法の方がよりオブジェクト指向的で、Railsでは一般的に使用されています。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>データがない場合の処理</h2>\n    <p>データが存在しない場合のためのチェック：</p>\n    \n    <div class="code-block">&lt;% if @companies.present? %&gt;<br>  &lt;!-- データが存在する場合の表示 --&gt;<br>  &lt;table&gt;<br>    &lt;!-- テーブルの内容 --&gt;<br>  &lt;/table&gt;<br>&lt;% else %&gt;<br>  &lt;p&gt;会社データがありません。&lt;/p&gt;<br>&lt;% end %&gt;</div>\n    \n    <p>または<code>any?</code>メソッドを使用：</p>\n    \n    <div class="code-block">&lt;% if @companies.any? %&gt;<br>  &lt;!-- データが存在する場合の表示 --&gt;<br>&lt;% else %&gt;<br>  &lt;!-- データがない場合の表示 --&gt;<br>&lt;% end %&gt;</div>\n</div>	6
247	2024-08-16 17:38:23	2025-03-23 06:34:48.358855	4	19	多側から1側のデータを取得する	\N	app/models/company.rb	class Company < ApplicationRecord\\n  has_many :employees\\nend	app/models/employee.rb	class Employee < ApplicationRecord\\n  belongs_to :company\\nend	app/views/test/index.html.erb	<% @employees.each do |employee| %>\\n    <div><%= employee.company['name'] %></div>\\n<% end %>	<div class="step">\n    <h2><span class="step-number">1</span>リレーションのあるモデルの作成</h2>\n    <p>Companyモデル(1側)とEmployeeモデル(多側)のリレーションを設定します。各モデルを作成します：</p>\n    \n    <p>まず、Companyモデルを作成します：</p>\n    <div class="code-block">\n        <pre>rails g model Company name:string</pre>\n    </div>\n    \n    <p>次に、Employeeモデルを作成します：</p>\n    <div class="code-block">\n        <pre>rails g model Employee name:text company:references</pre>\n    </div>\n    \n    <p>これにより、以下のようなマイグレーションファイルが生成されます：</p>\n    <div class="code-block">\n        <pre>class CreateEmployees < ActiveRecord::Migration[7.1]\n  def change\n    create_table :employees do |t|\n      t.text :name, null: false\n      t.references :company, null: false, foreign_key: true\n      t.timestamps\n    end\n  end\nend</pre>\n    </div>\n    \n    <p>モデルファイルに関連付けを定義します：</p>\n    <div class="code-block">\n        <pre># app/models/company.rb\nclass Company < ApplicationRecord\n  has_many :employees\nend\n\n# app/models/employee.rb\nclass Employee < ApplicationRecord\n  belongs_to :company\nend</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>マイグレーションの実行</h2>\n    <p>モデルを定義したら、マイグレーションを実行してデータベースを更新します：</p>\n    <div class="code-block">\n        <pre>rails db:migrate</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>コントローラーの実装</h2>\n    <p>Employeesコントローラーを作成し、indexアクションでEmployeeモデルのデータを取得します：</p>\n    <div class="code-block">\n        <pre>rails g controller Employees index</pre>\n    </div>\n    \n    <p>コントローラーを以下のように編集します：</p>\n    <div class="code-block">\n        <pre>class EmployeesController < ApplicationController\n  def index\n    @employees = Employee.all\n  end\nend</pre>\n    </div>\n    <p>この例では、<code>Employee.all</code>でEmployeeモデルの全データを取得し、<code>@employees</code>インスタンス変数に代入しています。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>ビューでのリレーションデータの表示</h2>\n    <p>ビュー（<code>app/views/employees/index.html.erb</code>）では、Employeeから関連するCompanyのnameフィールドを以下のように取得できます：</p>\n    <div class="code-block">\n        <pre>&lt;% @employees.each do |employee| %&gt;\n  &lt;p&gt;社員名: &lt;%= employee.name %&gt;&lt;/p&gt;\n  &lt;p&gt;会社名: &lt;%= employee.company['name'] %&gt;&lt;/p&gt;\n&lt;% end %&gt;</pre>\n    </div>\n    <p>Railsでは、リレーションのフィールドからデータを取得するときは、指示通り<code>モデル.リレーションのフィールド['取得したいフィールド']</code>の形式で記述します。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>ルーティングの設定</h2>\n    <p><code>config/routes.rb</code>ファイルに、作成したコントローラーへのルーティングを追加します：</p>\n    <div class="code-block">\n        <pre>Rails.application.routes.draw do\n  resources :employees, only: [:index]\nend</pre>\n    </div>\n</div>\n\n<div class="note">\n    <p><strong>補足：</strong> Railsでは、リレーションデータの取得方法として<code>employee.company['name']</code>の形式を使いますが、<code>employee.company.name</code>のような形式でもアクセスできます。ただし、今回の指示に従い、<code>モデル.リレーションのフィールド['取得したいフィールド']</code>の形式で記述しています。</p>\n</div>	15
275	2024-08-22 06:41:12	2025-03-23 06:54:14.730355	4	19	紐づいたモデルのデータをまとめて取得する	\N	app/controllers/test_controller.rb	class TestController < ApplicationController\\n  def index\\n    @companys = Company.includes(:employees).all\\n  end\\nend	app/views/test/index.html.erb	<table>\\n  <thead>\\n    <tr>\\n      <th>id</th>\\n      <th>名前</th>\\n      <th>従業員id</th>\\n      <th>従業員氏名</th>\\n    </tr>\\n  </thead>\\n\\n  <tbody>\\n    <% @companys.each do |company| %>\\n      <% company.employees.each_with_index do |employee, index| %> \\n        <tr>\\n          <% if index == 0 %>\\n            <td rowspan="<%= company.employees.count %>"><%= company.id %></td>\\n            <td rowspan="<%= company.employees.count %>"><%= company.name %></td>\\n          <% end %>\\n          <td><%= employee.id %></td>\\n          <td><%= employee.name %></td>\\n        </tr>\\n      <% end %>\\n    <% end %>\\n  </tbody>\\n</table>	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>includesメソッドとN+1問題</h2>\n    <p>includesを使用することで、紐づいたモデルのデータをまとめて取得し、パフォーマンスを改善することができます。</p>\n    \n    <div class="note">\n        <p><strong>N+1問題とは？</strong> includesは記入しなくても動作しますが、紐づいたモデルのデータを取得するたびにクエリを発行してしまう(N+1)問題が発生します。includesを使用すると、紐づいたデータをまとめて取得することができるため、N+1問題を解決することができます。</p>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>基本的な使い方</h2>\n    <p>includesは以下のような形式で記述します：</p>\n    \n    <div class="code-block">\n        <pre>モデル.includes(:取得するモデルのフィールド).その他のメソッド</pre>\n    </div>\n    \n    <p>例えば、CompanyモデルとEmployeeモデルが関連している場合：</p>\n    \n    <div class="code-block">\n        <pre># N+1問題が発生する例\ncompanies = Company.all\ncompanies.each do |company|\n  puts company.employees.count  # 会社ごとに別のクエリが発行される\n\n# includesを使用して最適化した例\ncompanies = Company.includes(:employees).all\ncompanies.each do |company|\n  puts company.employees.count  # 追加のクエリは発行されない</pre>\n    </div>\n    \n    <p>上の例ではCompanyを1側、Employeeを多側としてincludesを使用しています。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>複数の関連モデルを取得</h2>\n    <p>複数のモデルのフィールドを取得したいときはincludesの引数を,区切りで増やすことができます：</p>\n    \n    <div class="code-block">\n        <pre>Employee.includes(:company, :department).all</pre>\n    </div>\n    \n    <p>この例では、各Employeeに関連するCompanyとDepartmentの情報が一度に取得されます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>ネストした関連を取得</h2>\n    <p>紐づいたモデルのさらに先の紐づいたデータを集計するときは、以下のように記述します：</p>\n    \n    <div class="code-block">\n        <pre>モデル.includes(取得するモデルのフィールド: :もう一つ先のフィールド)</pre>\n    </div>\n    \n    <p>例えば、Employeeが1側でそれに多側のFamilyが紐づいていた場合は：</p>\n    \n    <div class="code-block">\n        <pre>Company.includes(employees: :families).all</pre>\n    </div>\n    \n    <p>さらにFamilyが1側でそれに多側のFavoriteが紐づいていた場合は：</p>\n    \n    <div class="code-block">\n        <pre>Company.includes(employees: {families: :favorites})</pre>\n    </div>\n    \n    <p>このように{}で入れ子にしていくことで、複数階層の関連を一度に取得できます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>includesと他のメソッドの組み合わせ</h2>\n    <p>includesは他のActiveRecordメソッドと組み合わせて使用できます：</p>\n    \n    <div class="code-block">\n        <pre># whereと組み合わせる\nCompany.includes(:employees).where(employees: { department: "営業部" })\n\n# orderと組み合わせる\nCompany.includes(:employees).order("companies.name ASC")\n\n# limitと組み合わせる\nCompany.includes(:employees).limit(10)\n\n# selectと組み合わせる (必要なカラムのみ取得)\nCompany.includes(:employees).select("companies.id, companies.name")</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">6</span>実践的な使用例</h2>\n    <p>コントローラーでの実際の使用例：</p>\n    \n    <div class="code-block">\n        <pre>class CompaniesController < ApplicationController\n  def index\n    # 基本的な使用例\n    @companies = Company.includes(:employees).all\n  end\n  \n  def show\n    @company = Company.includes(employees: [:department, :projects]).find(params[:id])\n    # これにより、ビューで@company.employeesやその関連データにアクセスしても追加クエリが発行されない\n  end\n  \n  def dashboard\n    # 複雑な関連を一度に取得\n    @companies = Company.includes(\n      employees: [\n        :department,\n        { projects: :tasks },\n        { families: :favorites }\n      ]\n    ).all\n  end\nend</pre>\n    </div>\n    \n    <p>ビューでの例（app/views/companies/show.html.erb）：</p>\n    \n    <div class="code-block">\n        <pre>&lt;h1&gt;&lt;%= @company.name %&gt;&lt;/h1&gt;\n\n&lt;h2&gt;従業員一覧&lt;/h2&gt;\n&lt;ul&gt;\n  &lt;% @company.employees.each do |employee| %&gt;\n    &lt;li&gt;\n      &lt;%= employee.name %&gt; - &lt;%= employee.department.name %&gt;\n      \n      &lt;h3&gt;プロジェクト&lt;/h3&gt;\n      &lt;ul&gt;\n        &lt;% employee.projects.each do |project| %&gt;\n          &lt;li&gt;&lt;%= project.name %&gt;&lt;/li&gt;\n        &lt;% end %&gt;\n      &lt;/ul&gt;\n      \n      &lt;h3&gt;家族&lt;/h3&gt;\n      &lt;ul&gt;\n        &lt;% employee.families.each do |family| %&gt;\n          &lt;li&gt;\n            &lt;%= family.name %&gt;\n            &lt;p&gt;好きなもの: &lt;%= family.favorites.map(&:name).join(', ') %&gt;&lt;/p&gt;\n          &lt;/li&gt;\n        &lt;% end %&gt;\n      &lt;/ul&gt;\n    &lt;/li&gt;\n  &lt;% end %&gt;\n&lt;/ul&gt;</pre>\n    </div>\n</div>\n\n<div class="note">\n    <p><strong>パフォーマンス最適化のヒント：</strong></p>\n    <ul>\n        <li>includesは内部的に<code>LEFT OUTER JOIN</code>または<code>PRELOAD</code>を使用してデータを取得します。</li>\n        <li>大量のデータを扱う場合、必要な関連のみをincludesに指定するようにしましょう。</li>\n        <li>関連が非常に深い場合や複雑な場合は、パフォーマンスに影響が出る可能性があります。適切な範囲で使用しましょう。</li>\n        <li>開発中に発行されるSQLクエリを確認するには、Railsコンソールで<code>ActiveRecord::Base.logger = Logger.new(STDOUT)</code>を実行すると便利です。</li>\n        <li>より複雑な条件で関連データを読み込む場合は、<code>joins</code>メソッドの使用も検討してください。</li>\n    </ul>\n</div>	26
131	2024-06-30 14:15:37	2025-03-23 07:10:47.864902	4	13	データの作成	\N	views.py	Company(name='test').save()	\N	\N	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>モデルデータの基本的な作成方法</h2>\n    <p>Djangoでは、以下の形式で新しくデータを作成することができます：</p>\n    \n    <div class="code-block">\n        <pre>models.py内のモデル名(フィールド名=値).save()</pre>\n    </div>\n    \n    <p>保存するフィールドが複数あるときは,区切りで複数記入することができます。例えば：</p>\n    \n    <div class="code-block">\n        <pre>company = Company(name="test").save()</pre>\n    </div>\n    \n    <p>上の例はnameフィールドの値をtestとしてCompanyモデルにデータを追加しています。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>複数フィールドのデータ保存</h2>\n    <p>複数のフィールドに値を設定する例：</p>\n    \n    <div class="code-block">\n        <pre>company = Company(name="テスト株式会社", address="東京都渋谷区", phone="03-1234-5678").save()</pre>\n    </div>\n    \n    <p>この方法では、一度に複数のフィールドに値を設定してデータを作成できます。</p>\n</div>	2
134	2024-06-30 15:55:25	2025-03-23 07:17:27.221438	4	13	モデルからデータの取得(複数)	\N	views.py	model = Company.objects.filter(name='test');\\n\\nprint(model[0].name)	\N	\N	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>filterメソッドの基本</h2>\n    <p>Djangoでは、以下の形式で条件に一致するモデルの複数のデータを取得できます：</p>\n    \n    <div class="code-block">\n        <pre>モデル.objects.filter(条件)</pre>\n    </div>\n    \n    <p>例えば、特定の名前を持つデータをすべて取得する場合：</p>\n    \n    <div class="code-block">\n        <pre>companies = Company.objects.filter(name="test")</pre>\n    </div>\n    \n    <p>上の例ではCompanyモデルのnameがtestのデータを全て取得しています。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>比較演算子の使用</h2>\n    <p>条件を以上、以下などとしたいときは、以下のように記入します：</p>\n    \n    <ul>\n        <li>大きい： <code>フィールド名__gt=比べる値</code></li>\n        <li>以上： <code>フィールド名__gte=比べる値</code></li>\n        <li>以下： <code>フィールド名__lte=比べる値</code></li>\n        <li>未満： <code>フィールド名__lt=比べる値</code></li>\n    </ul>\n    \n    <p>例：</p>\n    \n    <div class="code-block">\n        <pre># idが10以上の会社を取得\ncompanies = Company.objects.filter(id__gte=10)\n\n# idが20未満の会社を取得\ncompanies = Company.objects.filter(id__lt=20)</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>部分一致検索</h2>\n    <p>部分的に一致したデータを取得したいときは、以下のように記入します：</p>\n    \n    <ul>\n        <li>対象の値を含む： <code>フィールド名__contains=値</code></li>\n        <li>対象の値を含む(大文字、小文字の区別なし)： <code>フィールド名__icontains=値</code></li>\n        <li>大文字、小文字を区別しない完全一致： <code>フィールド名__iexact=値</code></li>\n    </ul>\n    \n    <p>例：</p>\n    \n    <div class="code-block">\n        <pre># 名前に「株式会社」を含む会社を取得\ncompanies = Company.objects.filter(name__contains="株式会社")\n\n# 名前に「test」を含む会社を取得（大文字小文字を区別しない）\ncompanies = Company.objects.filter(name__icontains="test")</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>複数条件の組み合わせ</h2>\n    <p>filterメソッドでは、複数の条件を指定してフィルタリングできます：</p>\n    \n    <div class="code-block">\n        <pre># 複数条件をカンマで区切って指定（AND条件）\ncompanies = Company.objects.filter(name="test", id=5)</pre>\n    </div>\n    \n    <p>カンマで区切られた複数の条件は「AND」条件として扱われ、すべての条件に一致するモデルのみが取得されます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>フィルタリング結果へのアクセス</h2>\n    <p>filterメソッドの結果はクエリセット（QuerySet）と呼ばれるリスト形式のオブジェクトとなります。データにアクセスするには、以下の形式で記入します：</p>\n    \n    <div class="code-block">\n        <pre>モデルを代入した変数[インデックス].フィールド名</pre>\n    </div>\n    \n    <p>例：</p>\n    \n    <div class="code-block">\n        <pre>companies = Company.objects.filter(name__contains="テスト")\n\n# 最初の会社の名前にアクセス\nfirst_company_name = companies[0].name\n\n# すべての会社名を表示\nfor company in companies:\n    print(company.name)</pre>\n    </div>\n    \n    <div class="note">\n        <p><strong>注意：</strong> インデックスがリストの範囲外の場合（例えば空のクエリセットで[0]にアクセスしようとする場合）、IndexErrorが発生します。そのため、アクセス前に結果が空でないか確認することが推奨されます。</p>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">6</span>追加のフィルタリングオプション</h2>\n    <p>基本的なフィルタリングオプション：</p>\n    \n    <div class="code-block">\n        <pre># 特定のIDリストに含まれる会社を取得\ncompanies = Company.objects.filter(id__in=[1, 3, 5])\n\n# 名前が「テスト」で始まる会社を取得\ncompanies = Company.objects.filter(name__startswith="テスト")\n\n# 名前が「株式会社」で終わる会社を取得\ncompanies = Company.objects.filter(name__endswith="株式会社")</pre>\n    </div>\n</div>	4
138	2024-06-30 16:43:15	2025-03-23 07:21:24.27237	4	13	データの更新	\N	views.py	model = Company.objects.get(pk=1)\\nmodel.name = 'test2'\\nmodel.save()	\N	\N	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>単一データの更新</h2>\n    <p>Djangoでは、以下の形式で対象のモデルのフィールド値を変更することができます：</p>\n    \n    <div class="code-block">\n        <pre>モデルを代入した変数.フィールド名 = 変更後の値\nモデルを代入した変数.save()</pre>\n    </div>\n    \n    <p>例えば、特定のCompanyモデルの名前を変更する場合：</p>\n    \n    <div class="code-block">\n        <pre>company = Company.objects.get(pk=1)\ncompany.name = "test2"\ncompany.save()</pre>\n    </div>\n    \n    <p>上の例では、pkが1のデータのnameをtest2に変更しています。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>複数フィールドの更新</h2>\n    <p>複数のフィールドを同時に更新することもできます：</p>\n    \n    <div class="code-block">\n        <pre>company = Company.objects.get(pk=1)\ncompany.name = "test2"\ncompany.address = "東京都渋谷区"\ncompany.save()</pre>\n    </div>\n    \n    <p>この方法では、saveメソッドを呼び出すまで実際のデータベース更新は行われません。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>複数データの一括更新</h2>\n    <p>filterやallメソッドで取得した複数のデータをまとめて書き換えたいときは、以下の形式で記入します：</p>\n    \n    <div class="code-block">\n        <pre>モデル名.objects.all().update(変更するフィールド=変更後の値)\nモデル名.objects.filter(条件).update(変更するフィールド=変更後の値)</pre>\n    </div>\n    \n    <p>例：</p>\n    \n    <div class="code-block">\n        <pre># すべての会社の名前を変更\nCompany.objects.all().update(name="新会社名")\n\n# 特定の条件に一致する会社の名前を変更\nCompany.objects.filter(address__contains="東京").update(name="東京支社")</pre>\n    </div>\n    \n    <p>updateメソッドは更新されたレコードの数を返します。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>複数フィールドの一括更新</h2>\n    <p>複数のフィールドを一括で更新することもできます：</p>\n    \n    <div class="code-block">\n        <pre>Company.objects.filter(pk=1).update(\n    name="test2",\n    address="東京都渋谷区",\n    is_active=True\n)</pre>\n    </div>\n    \n    <p>この方法では、一度のデータベースクエリで複数のフィールドを更新できるため効率的です。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>実践的な使用例</h2>\n    <p>views.pyでの更新処理の例：</p>\n    \n    <div class="code-block">\n        <pre>from django.shortcuts import render, redirect, get_object_or_404\nfrom .models import Company\nfrom .forms import CompanyForm\n\n# 単一データの更新ビュー\ndef edit_company(request, company_id):\n    company = get_object_or_404(Company, id=company_id)\n    \n    if request.method == 'POST':\n        form = CompanyForm(request.POST, instance=company)\n        if form.is_valid():\n            form.save()\n            return redirect('company_detail', company_id=company.id)\n    else:\n        form = CompanyForm(instance=company)\n    \n    return render(request, 'companies/edit.html', {\n        'form': form,\n        'company': company\n    })\n\n# 一括更新ビュー\ndef deactivate_companies(request):\n    if request.method == 'POST':\n        company_ids = request.POST.getlist('company_ids')\n        \n        # 選択された会社を非アクティブに設定\n        Company.objects.filter(id__in=company_ids).update(is_active=False)\n        \n        return redirect('company_list')\n    \n    # GETリクエストの場合は会社一覧を表示\n    companies = Company.objects.all()\n    return render(request, 'companies/bulk_edit.html', {\n        'companies': companies\n    })</pre>\n    </div>\n</div>\n\n<div class="note">\n    <p><strong>注意点：</strong></p>\n    <ul>\n        <li><code>save()</code>メソッドはモデルのインスタンスに対して呼び出すもので、すべてのフィールドが更新されます。</li>\n        <li><code>update()</code>メソッドはクエリセット（QuerySet）に対して呼び出すもので、指定したフィールドのみが更新されます。</li>\n        <li><code>update()</code>メソッドを使用すると、モデルのsave()メソッドで定義されているカスタム処理や自動フィールド更新は実行されないため注意が必要です。</li>\n    </ul>\n</div>	8
248	2024-08-16 17:55:04	2025-03-23 06:40:02.974389	4	19	1側から多側のデータを取得する	\N	app/controllers/test_controller.rb	class TestController < ApplicationController\\n  def index\\n    @companys = Company.all\\n  end\\nend	app/views/test/index.html.erb	<% @companys.each do |company| %>\\n  <% company.employees.each do |employee| %>\\n      <div><%= employee.name %></div>\\n  <% end %>\\n<% end %>	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>リレーションの概要</h2>\n    <p>この例では1側をCompany、多側をEmployeeとしてリレーションを設定しています。1側から多側のデータを取得する方法について説明します。</p>\n    \n    <div class="note">\n        <p><strong>重要：</strong> 1側から多側のデータ取得時は、多側のリレーション名の末尾に<span class="important">s</span>をつけることを忘れないでください。</p>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>モデルのリレーション設定</h2>\n    <p>モデル間のリレーションは以下のように設定します：</p>\n    \n    <div class="code-block">\n        <pre># app/models/company.rb\nclass Company < ApplicationRecord\n  has_many :employees\nend\n\n# app/models/employee.rb\nclass Employee < ApplicationRecord\n  belongs_to :company\nend</pre>\n    </div>\n    \n    <p>この設定により、Companyモデル（1側）から<code>employees</code>という名前で多側のEmployeeモデルのデータにアクセスできるようになります。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>コントローラーでの取得方法</h2>\n    <p>Companiesコントローラーで特定の会社に紐づく社員データを取得する例：</p>\n    \n    <div class="code-block">\n        <pre>class CompaniesController < ApplicationController\n  def show\n    @company = Company.find(params[:id])\n    # 会社に紐づいた社員を全て取得\n    # 多側のリレーション名の末尾にsがついていることに注意\n    @employees = @company.employees\n  end\nend</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>ビューでのデータ表示</h2>\n    <p>取得した1側のデータから多側のデータを表示する場合は、繰り返し処理を使います：</p>\n    \n    <div class="code-block">\n        <pre>&lt;h1&gt;&lt;%= @company.name %&gt;の社員一覧&lt;/h1&gt;\n\n&lt;% @company.employees.each do |employee| %&gt;\n  &lt;p&gt;社員名: &lt;%= employee.name %&gt;&lt;/p&gt;\n&lt;% end %&gt;</pre>\n    </div>\n    \n    <p>1側から多側のデータを取得する場合、<code>1側のモデルのデータ.多側のリレーションs</code>の形式を使い、これに対して繰り返し処理を行います。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>リレーションデータの活用</h2>\n    <p>関連データを活用する様々な方法：</p>\n    \n    <h3>データの存在確認</h3>\n    <div class="code-block">\n        <pre>&lt;% if @company.employees.any? %&gt;\n  &lt;!-- 社員がいる場合の処理 --&gt;\n&lt;% else %&gt;\n  &lt;p&gt;社員はいません&lt;/p&gt;\n&lt;% end %&gt;</pre>\n    </div>\n    \n    <h3>社員数の表示</h3>\n    <div class="code-block">\n        <pre>&lt;p&gt;社員数: &lt;%= @company.employees.count %&gt;人&lt;/p&gt;</pre>\n    </div>\n    \n    <h3>条件付きの社員検索</h3>\n    <div class="code-block">\n        <pre># 特定の会社に所属する、名前に「佐藤」を含む社員を検索\n@sato_employees = @company.employees.where("name LIKE ?", "%佐藤%")</pre>\n    </div>\n</div>\n\n<div class="note">\n    <p><strong>補足：</strong> <code>has_many</code>リレーションで定義した名前（例：<code>employees</code>）は、自動的に複数形になります。モデル名がEmployeeの場合は<code>employees</code>、Personの場合は<code>people</code>など、英語の複数形のルールに従います。</p>\n</div>	16
263	2024-08-21 06:48:25	2025-03-23 06:44:43.887712	4	19	パスワードをハッシュ化させて保存する	\N	db/migrate/内にできたファイル	class CreateUsers < ActiveRecord::Migration[7.1]\\n  def change\\n    create_table :users do |t|\\n      t.string :username\\n      t.string :password_digest\\n\\n      t.timestamps\\n    end\\n  end\\nend	app/models/user.rb	class User < ApplicationRecord\\n  has_secure_password\\nend	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>パスワードのハッシュ化</h2>\n    <p>パスワードはそのままデータベースに保存すると漏洩したときなどのリスクがあるためハッシュ化を行って保存します。ハッシュ化とは復号がほぼ不可能な暗号化のことです。</p>\n    \n    <div class="note">\n        <p><strong>重要：</strong> パスワードを保存するフィールド名は<code>password_digest</code>にしてください。<code>password_digest</code>はハッシュ化、認証に使用する特殊なフィールドとなっています。</p>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>必要なgemの追加</h2>\n    <p>パスワードのハッシュ化に必要なbcryptというgemを追加します。Gemfileに以下を追加してください：</p>\n    \n    <div class="code-block">\n        <pre>gem 'bcrypt', '~> 3.1.7'</pre>\n    </div>\n    \n    <p>追加後、以下のコマンドを実行してgemをインストールします：</p>\n    \n    <div class="code-block">\n        <pre>bundle install</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>モデルの作成</h2>\n    <p>Userモデルを作成し、usernameとpassword_digestフィールドを設定します：</p>\n    \n    <div class="code-block">\n        <pre>rails g model User username:string password_digest:string</pre>\n    </div>\n    \n    <p>生成されたマイグレーションファイルは以下のようになります：</p>\n    \n    <div class="code-block">\n        <pre>class CreateUsers < ActiveRecord::Migration[7.1]\n  def change\n    create_table :users do |t|\n      t.string :username\n      t.string :password_digest\n\n      t.timestamps\n    end\n  end\nend</pre>\n    </div>\n    \n    <p>マイグレーションを実行してテーブルを作成します：</p>\n    \n    <div class="code-block">\n        <pre>rails db:migrate</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>has_secure_passwordの設定</h2>\n    <p>モデルファイル（app/models/user.rb）に<code>has_secure_password</code>を追加します：</p>\n    \n    <div class="code-block">\n        <pre>class User < ApplicationRecord\n  has_secure_password\nend</pre>\n    </div>\n    \n    <p><code>has_secure_password</code>と入力することで、保存時に<code>password</code>フィールドとして渡された値がハッシュ化されて<code>password_digest</code>フィールドに保存されます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>ユーザーの作成</h2>\n    <p>ユーザーを追加するときは以下のような形式で記入します：</p>\n    \n    <div class="code-block">\n        <pre>user = User.new(username: "ユーザー名", password: "パスワード")\nuser.save</pre>\n    </div>\n    \n    <p>または、<code>create</code>メソッドを使用する場合：</p>\n    \n    <div class="code-block">\n        <pre>User.create(username: "ユーザー名", password: "パスワード")</pre>\n    </div>\n    \n    <p>このように、直接<code>password</code>フィールドに値を設定しても、保存時に自動的にハッシュ化されて<code>password_digest</code>カラムに保存されます。</p>\n</div>	18
283	2024-08-22 17:16:21	2025-03-23 07:01:25.506324	4	19	指定したフィールドのデータのみ追加する	\N	app/controllers/test_controller.rb	class TestController < ApplicationController\\n  def index\\n    @sales = Sale.select(:amount, :sales_date)\\n  end\\nend	\N	\N	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>selectメソッドの基本</h2>\n    <p>指定したフィールドのデータのみを取得するには、<code>select</code>メソッドを使用します：</p>\n    \n    <div class="code-block">\n        <pre>モデル.select(:フィールド)</pre>\n    </div>\n    \n    <p>複数のフィールドを指定する場合は、カンマで区切ります：</p>\n    \n    <div class="code-block">\n        <pre>Sale.select(:amount, :sales_date)</pre>\n    </div>\n    \n    <p>上の例は、Saleモデルのamount、sales_dateフィールドのデータのみを取得しています。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>selectを使うメリット</h2>\n    <p><code>select</code>メソッドを使うことで以下のようなメリットがあります：</p>\n    \n    <ul>\n        <li>必要なデータのみを取得するため、メモリ使用量が削減されます</li>\n        <li>データベースからのデータ転送量が減少するため、処理が高速化します</li>\n        <li>大量のレコードを扱う場合に特に効果的です</li>\n    </ul>\n    \n    <div class="note">\n        <p><strong>注意：</strong> <code>select</code>で指定していないフィールドにアクセスしようとすると、<code>ActiveModel::MissingAttributeError</code>が発生する場合があります。</p>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>条件と組み合わせる</h2>\n    <p><code>select</code>は他のActiveRecordメソッドと組み合わせて使用できます：</p>\n    \n    <div class="code-block">\n        <pre># whereと組み合わせる\nSale.select(:amount, :sales_date).where("amount > ?", 10000)\n\n# orderと組み合わせる\nSale.select(:amount, :customer_id).order(amount: :desc)\n\n# limitと組み合わせる\nSale.select(:product_name, :amount).limit(10)</pre>\n    </div>\n</div>\n\n<div class="note">\n    <p><strong>補足：</strong></p>\n    <ul>\n        <li>主キー（通常はid）を<code>select</code>から省略すると、オブジェクトの一部の操作ができなくなることがあります。</li>\n        <li>必要な関連フィールドを選択する場合は、<code>includes</code>と<code>references</code>を使うとN+1問題を防げます。</li>\n        <li>ActiveRecordリレーションは遅延評価されるため、<code>select</code>を含むクエリはデータが実際に必要になるまで実行されません。</li>\n        <li>複雑なSQLを使用する場合は、データベース固有の関数・構文に注意してください。</li>\n    </ul>\n</div>	30
132	2024-06-30 14:18:47	2025-03-23 07:11:27.141618	4	13	モデルからデータの取得(1つのみ)	\N	views.py	model = Company.objects.get(pk=1)\\n\\nprint(model.name)	\N	\N	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>getメソッドによるデータ取得</h2>\n    <p>Djangoでは、以下の形式でモデルからデータを取得することができます：</p>\n    \n    <div class="code-block">\n        <pre>モデル名.objects.get(取得するモデルの条件)</pre>\n    </div>\n    \n    <p>例えば、特定のIDを持つデータを取得する場合：</p>\n    \n    <div class="code-block">\n        <pre>company = Company.objects.get(pk=1)</pre>\n    </div>\n    \n    <p>上の例では、Companyモデルのpkが1のデータを取得しています。</p>\n    \n    <div class="note">\n        <p><strong>注意：</strong> getメソッドでは、条件に一致するデータが複数ある、データがないときはエラーとなります。</p>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>取得したデータへのアクセス</h2>\n    <p>取得したモデルデータのフィールドには、以下の形式でアクセスすることができます：</p>\n    \n    <div class="code-block">\n        <pre>モデルを代入した変数.フィールド名</pre>\n    </div>\n    \n    <p>例：</p>\n    \n    <div class="code-block">\n        <pre>company = Company.objects.get(pk=1)\ncompany_name = company.name\ncompany_address = company.address</pre>\n    </div>\n    \n    <p>この方法で、モデルのすべてのフィールドにアクセスできます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>様々な条件でのデータ取得</h2>\n    <p>getメソッドでは、様々な条件を指定してデータを取得できます：</p>\n    \n    <div class="code-block">\n        <pre># 名前で検索\ncompany = Company.objects.get(name="テスト株式会社")\n\n# 複数条件の組み合わせ\nemployee = Employee.objects.get(name="山田太郎", department="営業部")\n\n# 大文字小文字を区別しない検索\ncompany = Company.objects.get(name__iexact="test")\n\n# 前方一致検索\ncompany = Company.objects.get(name__startswith="テスト")\n\n# 数値の範囲検索\nemployee = Employee.objects.get(age__gte=30)  # 30歳以上</pre>\n    </div>\n    \n    <p>条件の指定方法は豊富で、様々なクエリを実現できます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>エラー処理</h2>\n    <p>getメソッドは条件に合うデータがない場合や、複数ある場合にエラーを発生させます：</p>\n    \n    <div class="code-block">\n        <pre>try:\n    company = Company.objects.get(name="存在しない会社")\nexcept Company.DoesNotExist:\n    # データが存在しない場合の処理\n    print("該当する会社は見つかりませんでした")\nexcept Company.MultipleObjectsReturned:\n    # 条件に一致するデータが複数ある場合の処理\n    print("複数の会社が見つかりました")</pre>\n    </div>\n    \n    <p>実際のアプリケーションでは、このようにtry-except文でエラー処理をすることが推奨されます。</p>\n</div>\n\n<div class="note">\n    <p><strong>代替方法：</strong> 条件に一致するデータが複数ある可能性がある場合や、データが存在しない可能性がある場合は、<code>filter()</code>メソッドを使用し、結果のリストを確認する方法や、<code>get_object_or_404()</code>を使用する方法も検討してください。</p>\n</div>	3
150	2024-06-30 18:57:00	2025-03-23 07:40:26.606834	4	13	紐づいたモデルの合計値を取得する	\N	views.py	from django.db.models import Sum\\n\\nmodel = Person.objects.all().annotate(\\n    sale =Sum('sales__sale')\\n).values()\\n\\nprint(model)	\N	\N	\N	\N	<div class="step">\n    <h2><span class="step-number">1</span>Sum関数の基本</h2>\n    <p>Djangoでは、Sum関数を使用して関連するモデルのフィールド値を合計することができます。基本的な構文は以下の通りです：</p>\n    \n    <div class="code-block">\n        <pre>from django.db.models import Sum\n\nSum('合計したいフィールド')</pre>\n    </div>\n    \n    <p>この関数は、annotateやaggregateメソッドと組み合わせて使用します。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>基本的な使用例</h2>\n    <p>例えば、Companyモデルに紐づいているSalesモデルのsaleフィールドの合計値を計算する場合：</p>\n    \n    <div class="code-block">\n        <pre>from django.db.models import Sum\n\n# 各会社の売上合計を計算\ncompanies = Company.objects.annotate(total_sales=Sum('sales__sale'))</pre>\n    </div>\n    \n    <p>上の例は、自身に紐づいたSalesモデルのsaleフィールドの値を合計してtotal_salesフィールドに代入しています。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>フィルタリングと組み合わせる</h2>\n    <p>Sum関数はフィルタリングと組み合わせることができます：</p>\n    \n    <div class="code-block">\n        <pre># 合計売上が100万以上の会社だけを取得\ncompanies = Company.objects.annotate(\n    total_sales=Sum('sales__sale')\n).filter(total_sales__gte=1000000)\n\n# 2023年の売上合計を計算\nfrom django.db.models import Sum, Q\nfrom datetime import date\n\ncompanies = Company.objects.annotate(\n    sales_2023=Sum('sales__sale', \n                  filter=Q(sales__date__year=2023))\n)</pre>\n    </div>\n    \n    <p>filterパラメータを使うことで、合計対象を特定の条件に一致するものだけに限定できます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>複数のSum集計を同時に行う</h2>\n    <p>1つのクエリで複数の合計計算を行うことができます：</p>\n    \n    <div class="code-block">\n        <pre># 各会社の年ごとの売上合計を計算\ncompanies = Company.objects.annotate(\n    sales_2021=Sum('sales__sale', filter=Q(sales__date__year=2021)),\n    sales_2022=Sum('sales__sale', filter=Q(sales__date__year=2022)),\n    sales_2023=Sum('sales__sale', filter=Q(sales__date__year=2023))\n)\n\n# 商品カテゴリ別の売上合計を計算\ncompanies = Company.objects.annotate(\n    product_a_sales=Sum('sales__sale', filter=Q(sales__product_category='A')),\n    product_b_sales=Sum('sales__sale', filter=Q(sales__product_category='B')),\n    product_c_sales=Sum('sales__sale', filter=Q(sales__product_category='C'))\n)</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>数式を含む合計計算</h2>\n    <p>Sum関数と他の計算式を組み合わせることもできます：</p>\n    \n    <div class="code-block">\n        <pre>from django.db.models import Sum, F\n\n# 税込売上の合計を計算\ncompanies = Company.objects.annotate(\n    total_sales_with_tax=Sum(F('sales__sale') * 1.1)\n)\n\n# コスト差し引き後の利益を計算\ncompanies = Company.objects.annotate(\n    total_profit=Sum(F('sales__sale') - F('sales__cost'))\n)</pre>\n    </div>\n    \n    <p>F式を使うことで、複数のフィールドを組み合わせた計算が可能になります。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">6</span>実践的な使用例</h2>\n    <p>views.pyでのSum関数の使用例：</p>\n    \n    <div class="code-block">\n        <pre>from django.shortcuts import render\nfrom django.db.models import Sum, Q\nfrom .models import Company, Sales\nfrom datetime import date\n\ndef sales_dashboard(request):\n    # 現在の年を取得\n    current_year = date.today().year\n    \n    # 会社ごとの売上統計を計算\n    companies = Company.objects.annotate(\n        # 総売上\n        total_sales=Sum('sales__sale'),\n        \n        # 今年の売上\n        current_year_sales=Sum('sales__sale', \n                              filter=Q(sales__date__year=current_year)),\n        \n        # 四半期ごとの売上（今年）\n        q1_sales=Sum('sales__sale', \n                    filter=Q(sales__date__year=current_year) & \n                           Q(sales__date__month__in=[1, 2, 3])),\n        q2_sales=Sum('sales__sale', \n                    filter=Q(sales__date__year=current_year) & \n                           Q(sales__date__month__in=[4, 5, 6])),\n        q3_sales=Sum('sales__sale', \n                    filter=Q(sales__date__year=current_year) & \n                           Q(sales__date__month__in=[7, 8, 9])),\n        q4_sales=Sum('sales__sale', \n                    filter=Q(sales__date__year=current_year) & \n                           Q(sales__date__month__in=[10, 11, 12])),\n    ).order_by('-total_sales')\n    \n    # 全社の合計売上\n    total_company_sales = Company.objects.aggregate(\n        total=Sum('sales__sale')\n    )['total'] or 0\n    \n    return render(request, 'companies/sales_dashboard.html', {\n        'companies': companies,\n        'total_company_sales': total_company_sales,\n        'current_year': current_year\n    })</pre>\n    </div>\n    \n    <p>テンプレートでの使用例（sales_dashboard.html）：</p>\n    \n    <div class="code-block">\n        <pre>&lt;h1&gt;売上ダッシュボード&lt;/h1&gt;\n&lt;p&gt;全社合計売上: {{ total_company_sales|floatformat:0 }}円&lt;/p&gt;\n\n&lt;h2&gt;{{ current_year }}年の会社別売上&lt;/h2&gt;\n&lt;table&gt;\n    &lt;tr&gt;\n        &lt;th&gt;会社名&lt;/th&gt;\n        &lt;th&gt;総売上&lt;/th&gt;\n        &lt;th&gt;今年の売上&lt;/th&gt;\n        &lt;th&gt;Q1&lt;/th&gt;\n        &lt;th&gt;Q2&lt;/th&gt;\n        &lt;th&gt;Q3&lt;/th&gt;\n        &lt;th&gt;Q4&lt;/th&gt;\n    &lt;/tr&gt;\n    {% for company in companies %}\n        &lt;tr&gt;\n            &lt;td&gt;{{ company.name }}&lt;/td&gt;\n            &lt;td&gt;{{ company.total_sales|floatformat:0 }}円&lt;/td&gt;\n            &lt;td&gt;{{ company.current_year_sales|floatformat:0 }}円&lt;/td&gt;\n            &lt;td&gt;{{ company.q1_sales|floatformat:0 }}円&lt;/td&gt;\n            &lt;td&gt;{{ company.q2_sales|floatformat:0 }}円&lt;/td&gt;\n            &lt;td&gt;{{ company.q3_sales|floatformat:0 }}円&lt;/td&gt;\n            &lt;td&gt;{{ company.q4_sales|floatformat:0 }}円&lt;/td&gt;\n        &lt;/tr&gt;\n    {% endfor %}\n&lt;/table&gt;</pre>\n    </div>\n</div>\n\n<div class="note">\n    <p><strong>重要ポイント：</strong></p>\n    <ul>\n        <li>Sum関数は、数値フィールドの合計を計算するために使用します。</li>\n        <li>NULLの値は合計に含まれません。</li>\n        <li>集計結果がないまたはすべての値がNULLの場合、Sum関数はNoneを返します。</li>\n        <li>annotateメソッドと組み合わせると、各レコードに合計フィールドを追加できます。</li>\n        <li>aggregateメソッドと組み合わせると、クエリセット全体の合計値を一つだけ取得できます。</li>\n        <li>filterパラメータを使うと、特定条件のレコードだけを合計対象にできます。</li>\n    </ul>\n</div>	20
288	2025-03-23 02:51:55.138071	2025-03-23 07:51:23.88611	4	13	データの一括集計を行う		views.py	from django.db.models import Avg\n\n# 全商品の平均価格を取得\navg_price = Product.objects.aggregate(Avg('price'))					<div class="step">\n    <h2><span class="step-number">1</span>Aggregate関数の基本</h2>\n    <p>Djangoの<code>aggregate()</code>メソッドは、クエリセット全体に対して集計を行い、辞書型で結果を返します。これまで紹介した<code>annotate()</code>がクエリセットの各オブジェクトに集計フィールドを追加するのに対し、<code>aggregate()</code>はクエリセット全体に対して単一の集計値を返します。</p>\n    \n    <div class="code-block">\n        <pre>from django.db.models import Avg, Max, Min, Sum, Count\n\n# 基本的な使い方\nresult = モデル名.objects.aggregate(集計関数('フィールド名'))</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>基本的な使用例</h2>\n    <p>例えば、Productモデルの全商品の平均価格を取得する場合：</p>\n    \n    <div class="code-block">\n        <pre>from django.db.models import Avg\n\n# 全商品の平均価格を取得\navg_price = Product.objects.aggregate(Avg('price'))\n# 結果: {'price__avg': 1234.56}</pre>\n    </div>\n    \n    <p>返り値は辞書型で、キーはデフォルトで「フィールド名__集計関数」という形式になります。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>複数の集計を同時に行う</h2>\n    <p>複数の集計を一度のクエリで行うことも可能です：</p>\n    \n    <div class="code-block">\n        <pre>from django.db.models import Avg, Max, Min, Sum, Count\n\n# 複数の集計を一度に行う\nresult = Product.objects.aggregate(\n    avg_price=Avg('price'),\n    max_price=Max('price'),\n    min_price=Min('price'),\n    total_inventory=Sum('stock'),\n    product_count=Count('id')\n)\n# 結果: {'avg_price': 1234.56, 'max_price': 9999.99, 'min_price': 10.0, 'total_inventory': 1500, 'product_count': 100}</pre>\n    </div>\n    \n    <p>このように、キーワード引数を使用することで、結果の辞書のキー名をカスタマイズできます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>条件付き集計</h2>\n    <p>フィルタリングと組み合わせて、条件に一致するレコードだけを集計することもできます：</p>\n    \n    <div class="code-block">\n        <pre># アクティブな商品の平均価格\nactive_avg = Product.objects.filter(is_active=True).aggregate(\n    active_avg_price=Avg('price')\n)\n\n# カテゴリー別の商品数\nfrom django.db.models import Count\ncategory_counts = Product.objects.values('category').annotate(\n    count=Count('id')\n).order_by('-count')\n\n# 複数条件を組み合わせた集計\nfrom django.db.models import Q\nresult = Product.objects.filter(\n    Q(category='Electronics') | Q(category='Computers')\n).aggregate(\n    avg_price=Avg('price'),\n    total_stock=Sum('stock')\n)</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>関連モデルの集計</h2>\n    <p>関連するモデルのフィールドに対しても集計を行えます：</p>\n    \n    <div class="code-block">\n        <pre># 全顧客の注文合計金額\nfrom django.db.models import Sum\ntotal_sales = Customer.objects.aggregate(\n    total_order_amount=Sum('order__amount')\n)\n\n# 各商品の総売上（annotateを使用）\nproduct_sales = Product.objects.annotate(\n    total_sales=Sum('orderitem__quantity * orderitem__price')\n).aggregate(\n    grand_total=Sum('total_sales')\n)</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">6</span>実践的な使用例</h2>\n    <p>views.pyでのAggregate関数の使用例：</p>\n    \n    <div class="code-block">\n        <pre>from django.shortcuts import render\nfrom django.db.models import Avg, Sum, Min, Max, Count\nfrom .models import Product, Order, Customer\n\ndef dashboard(request):\n    # 商品統計\n    product_stats = Product.objects.aggregate(\n        total_products=Count('id'),\n        avg_price=Avg('price'),\n        max_price=Max('price'),\n        min_price=Min('price'),\n        total_stock=Sum('stock')\n    )\n    \n    # 売上統計\n    sales_stats = Order.objects.aggregate(\n        total_orders=Count('id'),\n        total_revenue=Sum('total_amount'),\n        avg_order_value=Avg('total_amount'),\n        max_order=Max('total_amount')\n    )\n    \n    # カテゴリー別商品数\n    category_stats = Product.objects.values('category').annotate(\n        count=Count('id'),\n        avg_category_price=Avg('price')\n    ).order_by('-count')\n    \n    # アクティブか非アクティブかで分けた商品数\n    status_counts = {\n        'active': Product.objects.filter(is_active=True).count(),\n        'inactive': Product.objects.filter(is_active=False).count()\n    }\n    \n    return render(request, 'dashboard.html', {\n        'product_stats': product_stats,\n        'sales_stats': sales_stats,\n        'category_stats': category_stats,\n        'status_counts': status_counts\n    })</pre>\n    </div>\n    \n    <p>テンプレートでの使用例（dashboard.html）：</p>\n    \n    <div class="code-block">\n        <pre>&lt;h1&gt;ダッシュボード&lt;/h1&gt;\n\n&lt;div class="stats-card"&gt;\n    &lt;h2&gt;商品統計&lt;/h2&gt;\n    &lt;p&gt;総商品数: {{ product_stats.total_products }}点&lt;/p&gt;\n    &lt;p&gt;平均価格: {{ product_stats.avg_price|floatformat:0 }}円&lt;/p&gt;\n    &lt;p&gt;最高価格: {{ product_stats.max_price|floatformat:0 }}円&lt;/p&gt;\n    &lt;p&gt;最低価格: {{ product_stats.min_price|floatformat:0 }}円&lt;/p&gt;\n    &lt;p&gt;在庫総数: {{ product_stats.total_stock }}個&lt;/p&gt;\n&lt;/div&gt;\n\n&lt;div class="stats-card"&gt;\n    &lt;h2&gt;売上統計&lt;/h2&gt;\n    &lt;p&gt;総注文数: {{ sales_stats.total_orders }}件&lt;/p&gt;\n    &lt;p&gt;総売上: {{ sales_stats.total_revenue|floatformat:0 }}円&lt;/p&gt;\n    &lt;p&gt;平均注文額: {{ sales_stats.avg_order_value|floatformat:0 }}円&lt;/p&gt;\n    &lt;p&gt;最高注文額: {{ sales_stats.max_order|floatformat:0 }}円&lt;/p&gt;\n&lt;/div&gt;\n\n&lt;div class="stats-card"&gt;\n    &lt;h2&gt;カテゴリー別商品数&lt;/h2&gt;\n    &lt;table&gt;\n        &lt;tr&gt;\n            &lt;th&gt;カテゴリー&lt;/th&gt;\n            &lt;th&gt;商品数&lt;/th&gt;\n            &lt;th&gt;平均価格&lt;/th&gt;\n        &lt;/tr&gt;\n        {% for category in category_stats %}\n            &lt;tr&gt;\n                &lt;td&gt;{{ category.category }}&lt;/td&gt;\n                &lt;td&gt;{{ category.count }}点&lt;/td&gt;\n                &lt;td&gt;{{ category.avg_category_price|floatformat:0 }}円&lt;/td&gt;\n            &lt;/tr&gt;\n        {% endfor %}\n    &lt;/table&gt;\n&lt;/div&gt;</pre>\n    </div>\n</div>\n\n<div class="note">\n    <p><strong>重要ポイント：</strong></p>\n    <ul>\n        <li><code>aggregate()</code>はクエリセット全体に対する単一の結果を返し、辞書型で返されます。</li>\n        <li>複数の集計を一度に行うことができ、キーワード引数を使って結果のキー名をカスタマイズできます。</li>\n        <li>集計関数には<code>Avg</code>、<code>Count</code>、<code>Max</code>、<code>Min</code>、<code>Sum</code>などがあります。</li>\n        <li><code>filter()</code>と組み合わせることで、条件に一致するレコードだけを集計できます。</li>\n        <li>複雑な集計では、<code>annotate()</code>で中間計算を行ってから<code>aggregate()</code>を使用するパターンも有効です。</li>\n    </ul>\n</div>	59
289	2025-03-23 02:51:55.138071	2025-03-23 02:51:55.138076	4	13	高度なデータ分析を行う		views.py	from django.db.models import Window, F\nfrom django.db.models.functions import Rank\n\n# 商品を価格順にランク付け\nproducts = Product.objects.annotate(\n    price_rank=Window(\n        expression=Rank(),\n        order_by=F('price').desc()\n    )\n)					<div class="step">\n    <h2><span class="step-number">1</span>Window関数の基本</h2>\n    <p>Djangoの Window 関数は、Django 3.2から導入された高度なデータ分析機能です。Window関数を使用すると、行間の関係性を分析したり、集計値をパーティション（グループ）ごとに計算したりすることができます。</p>\n    \n    <div class="code-block">\n        <pre>from django.db.models import Window, F\nfrom django.db.models.functions import Rank, RowNumber, DenseRank, Sum, Avg\n\n# 基本的な使い方\nモデル名.objects.annotate(\n    計算フィールド=Window(\n        expression=集計関数(),  # Sum, Avg, Rank など\n        partition_by=[F('分割するフィールド')],  # オプション\n        order_by=F('並べ替えるフィールド').asc()  # オプション\n    )\n)</pre>\n    </div>\n    \n    <p>Window関数は、SQL の OVER 句に相当し、データをフレーム（ウィンドウ）として扱います。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">2</span>基本的な使用例：ランキング</h2>\n    <p>Window関数の最も一般的な使用例の一つは、ランキングの計算です：</p>\n    \n    <div class="code-block">\n        <pre>from django.db.models import Window, F\nfrom django.db.models.functions import Rank\n\n# 商品を価格順にランク付け\nproducts = Product.objects.annotate(\n    price_rank=Window(\n        expression=Rank(),\n        order_by=F('price').desc()\n    )\n).order_by('price_rank')\n\n# 結果例: \n# Product(name='高級品', price=10000, price_rank=1)\n# Product(name='中級品', price=5000, price_rank=2)\n# Product(name='普通品', price=1000, price_rank=3)</pre>\n    </div>\n    \n    <p>この例では、全商品を価格の降順でランク付けしています。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">3</span>パーティション（分割）の活用</h2>\n    <p>partition_byパラメータを使用すると、特定のフィールドごとにグループ化してWindow関数を適用できます：</p>\n    \n    <div class="code-block">\n        <pre>from django.db.models import Window, F\nfrom django.db.models.functions import Rank\n\n# カテゴリー別の価格ランキング\nproducts = Product.objects.annotate(\n    category_rank=Window(\n        expression=Rank(),\n        partition_by=[F('category')],  # カテゴリーごとにパーティション\n        order_by=F('price').desc()\n    )\n).order_by('category', 'category_rank')\n\n# 結果例:\n# Product(name='電子高級品', category='電子機器', price=10000, category_rank=1)\n# Product(name='電子一般品', category='電子機器', price=5000, category_rank=2)\n# Product(name='家具高級品', category='家具', price=8000, category_rank=1)\n# Product(name='家具一般品', category='家具', price=3000, category_rank=2)</pre>\n    </div>\n    \n    <p>この例では、各カテゴリー内での価格ランキングを計算しています。例えば、「電子機器」カテゴリと「家具」カテゴリそれぞれで独立したランキングが付きます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">4</span>様々なWindow関数</h2>\n    <p>Djangoは複数のWindow関数をサポートしています：</p>\n    \n    <div class="code-block">\n        <pre>from django.db.models import Window, F\nfrom django.db.models.functions import Rank, DenseRank, RowNumber, Lead, Lag, Sum\n\n# Rank() - 通常のランキング（同値は同順位、次の順位はスキップ）\nproducts = Product.objects.annotate(\n    rank=Window(expression=Rank(), order_by=F('price').desc())\n)  # 結果例: 1, 2, 2, 4, 5...\n\n# DenseRank() - 詰めたランキング（同値は同順位、次の順位は連続）\nproducts = Product.objects.annotate(\n    dense_rank=Window(expression=DenseRank(), order_by=F('price').desc())\n)  # 結果例: 1, 2, 2, 3, 4...\n\n# RowNumber() - 行番号（同値でも連番）\nproducts = Product.objects.annotate(\n    row_number=Window(expression=RowNumber(), order_by=F('price').desc())\n)  # 結果例: 1, 2, 3, 4, 5...\n\n# Lead() - 次の行の値を取得\nproducts = Product.objects.annotate(\n    next_price=Window(\n        expression=Lead('price', offset=1, default=0),\n        order_by=F('price').desc()\n    )\n)\n\n# Lag() - 前の行の値を取得\nproducts = Product.objects.annotate(\n    prev_price=Window(\n        expression=Lag('price', offset=1, default=0),\n        order_by=F('price').desc()\n    )\n)</pre>\n    </div>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">5</span>累積集計と移動平均</h2>\n    <p>Window関数は累積集計や移動平均の計算にも利用できます：</p>\n    \n    <div class="code-block">\n        <pre>from django.db.models import Window, F\nfrom django.db.models.functions import Sum, Avg\n\n# 日付順の累積売上\nsales = Sale.objects.annotate(\n    cumulative_sum=Window(\n        expression=Sum('amount'),\n        order_by=F('date').asc()\n    )\n).order_by('date')\n\n# 直近3件の移動平均\nfrom django.db.models import Window, F, FrameSpec\nfrom django.db.models.functions import Avg\n\nsales = Sale.objects.annotate(\n    moving_avg=Window(\n        expression=Avg('amount'),\n        order_by=F('date').asc(),\n        frame=FrameSpec(\n            start=-2,  # 2行前から\n            end=0      # 現在行まで\n        )\n    )\n).order_by('date')</pre>\n    </div>\n    \n    <p>FrameSpecを使用すると、計算対象の行の範囲（フレーム）を詳細に指定できます。</p>\n</div>\n\n<div class="step">\n    <h2><span class="step-number">6</span>実践的な使用例</h2>\n    <p>views.pyでのWindow関数の使用例：</p>\n    \n    <div class="code-block">\n        <pre>from django.shortcuts import render\nfrom django.db.models import Window, F, Sum, Count\nfrom django.db.models.functions import Rank, DenseRank, RowNumber\nfrom .models import Sale, Product, Category\n\ndef sales_analysis(request):\n    # カテゴリ別の売上トップ3商品を取得\n    top_products_by_category = Product.objects.annotate(\n        total_sales=Sum('sales__amount'),\n        category_rank=Window(\n            expression=Rank(),\n            partition_by=[F('category_id')],\n            order_by=F('total_sales').desc()\n        )\n    ).filter(category_rank__lte=3).order_by('category_id', 'category_rank')\n    \n    # 月ごとの累積売上\n    from django.db.models.functions import TruncMonth\n    \n    monthly_sales = Sale.objects.annotate(\n        month=TruncMonth('date')\n    ).values('month').annotate(\n        monthly_total=Sum('amount')\n    ).annotate(\n        cumulative_total=Window(\n            expression=Sum('monthly_total'),\n            order_by=F('month').asc()\n        )\n    ).order_by('month')\n    \n    # 売上上位10%の商品を「トップセラー」としてマーク\n    from django.db.models.functions import Ntile\n    \n    products_with_percentile = Product.objects.annotate(\n        total_sales=Sum('sales__amount'),\n        percentile=Window(\n            expression=Ntile(10),  # 10分位で分割\n            order_by=F('total_sales').desc()\n        )\n    ).annotate(\n        is_top_seller=F('percentile').exact(1)  # 1分位（上位10%）か判定\n    )\n    \n    return render(request, 'sales/analysis.html', {\n        'top_products_by_category': top_products_by_category,\n        'monthly_sales': monthly_sales,\n        'products_with_percentile': products_with_percentile\n    })</pre>\n    </div>\n    \n    <p>テンプレートでの使用例（analysis.html）：</p>\n    \n    <div class="code-block">\n        <pre>&lt;h1&gt;売上分析&lt;/h1&gt;\n\n&lt;h2&gt;カテゴリ別トップ3商品&lt;/h2&gt;\n{% regroup top_products_by_category by category as category_list %}\n{% for category in category_list %}\n    &lt;h3&gt;{{ category.grouper }}&lt;/h3&gt;\n    &lt;table&gt;\n        &lt;tr&gt;\n            &lt;th&gt;ランク&lt;/th&gt;\n            &lt;th&gt;商品名&lt;/th&gt;\n            &lt;th&gt;売上合計&lt;/th&gt;\n        &lt;/tr&gt;\n        {% for product in category.list %}\n            &lt;tr&gt;\n                &lt;td&gt;{{ product.category_rank }}&lt;/td&gt;\n                &lt;td&gt;{{ product.name }}&lt;/td&gt;\n                &lt;td&gt;{{ product.total_sales|floatformat:0 }}円&lt;/td&gt;\n            &lt;/tr&gt;\n        {% endfor %}\n    &lt;/table&gt;\n{% endfor %}\n\n&lt;h2&gt;月別累積売上&lt;/h2&gt;\n&lt;table&gt;\n    &lt;tr&gt;\n        &lt;th&gt;月&lt;/th&gt;\n        &lt;th&gt;月間売上&lt;/th&gt;\n        &lt;th&gt;累積売上&lt;/th&gt;\n    &lt;/tr&gt;\n    {% for sale in monthly_sales %}\n        &lt;tr&gt;\n            &lt;td&gt;{{ sale.month|date:"Y年m月" }}&lt;/td&gt;\n            &lt;td&gt;{{ sale.monthly_total|floatformat:0 }}円&lt;/td&gt;\n            &lt;td&gt;{{ sale.cumulative_total|floatformat:0 }}円&lt;/td&gt;\n        &lt;/tr&gt;\n    {% endfor %}\n&lt;/table&gt;</pre>\n    </div>\n</div>\n\n<div class="note">\n    <p><strong>重要ポイント：</strong></p>\n    <ul>\n        <li>Window関数はDjango 3.2以降で使用可能です。</li>\n        <li>使用するデータベースがWindow関数をサポートしている必要があります（PostgreSQL、MySQL 8.0+、SQLite 3.25+、Oracle、SQL Server）。</li>\n        <li>Window関数は大量データの分析に有用ですが、複雑なクエリになるためパフォーマンスに注意が必要です。</li>\n        <li>partition_byは複数フィールドを指定可能で、複数の条件でグループ化できます。</li>\n        <li>FrameSpecを使用することで、より細かい行の範囲指定が可能になります。</li>\n        <li>Window関数の結果は通常、annotateメソッドを通じて一時フィールドとして追加されます。</li>\n    </ul>\n</div>	60
\.


--
-- Data for Name: bulletin_cells; Type: TABLE DATA; Schema: public; Owner: user
--

COPY public.bulletin_cells (id, bulletin_id, "row", col, value) FROM stdin;
25486	34	1	1	編集
25487	34	1	2	1
25488	34	1	3	2
25489	34	2	1	追加
25490	34	2	2	2
25491	34	2	3	3
\.


--
-- Data for Name: bulletin_column_dimensions; Type: TABLE DATA; Schema: public; Owner: user
--

COPY public.bulletin_column_dimensions (id, bulletin_id, col, width) FROM stdin;
220	34	1	48.43
221	34	2	8.71
\.


--
-- Data for Name: bulletin_images; Type: TABLE DATA; Schema: public; Owner: user
--

COPY public.bulletin_images (id, bulletin_id, image_data, image_type, from_row, from_col, to_row, to_col, width, height) FROM stdin;
49	34		jpeg	5	1	8	8	969.48	454.25
\.


--
-- Data for Name: bulletin_merges; Type: TABLE DATA; Schema: public; Owner: user
--

COPY public.bulletin_merges (id, bulletin_id, start_row, start_col, end_row, end_col) FROM stdin;
\.


--
-- Data for Name: bulletin_posts; Type: TABLE DATA; Schema: public; Owner: user
--

COPY public.bulletin_posts (id, title, content, created_at, updated_at, file_path, filename, employee_id) FROM stdin;
34	test	test	2025-03-22 16:45:46.386342	2025-03-22 18:07:54.230725	\N	departments (11) (1).xlsx	1
\.


--
-- Data for Name: bulletin_row_dimensions; Type: TABLE DATA; Schema: public; Owner: user
--

COPY public.bulletin_row_dimensions (id, bulletin_id, "row", height) FROM stdin;
46896	34	6	144.75
46897	34	7	144.75
46898	34	8	144.75
46899	34	20	15.75
46900	34	21	15.75
46901	34	22	15.75
46902	34	23	15.75
46903	34	24	15.75
46904	34	25	15.75
46905	34	26	15.75
46906	34	27	15.75
46907	34	28	15.75
46908	34	29	15.75
46909	34	30	15.75
46910	34	31	15.75
46911	34	32	15.75
46912	34	33	15.75
46913	34	34	15.75
46914	34	35	15.75
46915	34	36	15.75
46916	34	37	15.75
46917	34	38	15.75
46918	34	39	15.75
46919	34	40	15.75
46920	34	41	15.75
46921	34	42	15.75
46922	34	43	15.75
46923	34	44	15.75
46924	34	45	15.75
46925	34	46	15.75
46926	34	47	15.75
46927	34	48	15.75
46928	34	49	15.75
46929	34	50	15.75
46930	34	51	15.75
46931	34	52	15.75
46932	34	53	15.75
46933	34	54	15.75
46934	34	55	15.75
46935	34	56	15.75
46936	34	57	15.75
46937	34	58	15.75
46938	34	59	15.75
46939	34	60	15.75
46940	34	61	15.75
46941	34	62	15.75
46942	34	63	15.75
46943	34	64	15.75
46944	34	65	15.75
46945	34	66	15.75
46946	34	67	15.75
46947	34	68	15.75
46948	34	69	15.75
46949	34	70	15.75
46950	34	71	15.75
46951	34	72	15.75
46952	34	73	15.75
46953	34	74	15.75
46954	34	75	15.75
46955	34	76	15.75
46956	34	77	15.75
46957	34	78	15.75
46958	34	79	15.75
46959	34	80	15.75
46960	34	81	15.75
46961	34	82	15.75
46962	34	83	15.75
46963	34	84	15.75
46964	34	85	15.75
46965	34	86	15.75
46966	34	87	15.75
46967	34	88	15.75
46968	34	89	15.75
46969	34	90	15.75
46970	34	91	15.75
46971	34	92	15.75
46972	34	93	15.75
46973	34	94	15.75
46974	34	95	15.75
46975	34	96	15.75
46976	34	97	15.75
46977	34	98	15.75
46978	34	99	15.75
46979	34	100	15.75
46980	34	101	15.75
46981	34	102	15.75
46982	34	103	15.75
46983	34	104	15.75
46984	34	105	15.75
46985	34	106	15.75
46986	34	107	15.75
46987	34	108	15.75
46988	34	109	15.75
46989	34	110	15.75
46990	34	111	15.75
46991	34	112	15.75
46992	34	113	15.75
46993	34	114	15.75
46994	34	115	15.75
46995	34	116	15.75
46996	34	117	15.75
46997	34	118	15.75
46998	34	119	15.75
46999	34	120	15.75
47000	34	121	15.75
47001	34	122	15.75
47002	34	123	15.75
47003	34	124	15.75
47004	34	125	15.75
47005	34	126	15.75
47006	34	127	15.75
47007	34	128	15.75
47008	34	129	15.75
47009	34	130	15.75
47010	34	131	15.75
47011	34	132	15.75
47012	34	133	15.75
47013	34	134	15.75
47014	34	135	15.75
47015	34	136	15.75
47016	34	137	15.75
47017	34	138	15.75
47018	34	139	15.75
47019	34	140	15.75
47020	34	141	15.75
47021	34	142	15.75
47022	34	143	15.75
47023	34	144	15.75
47024	34	145	15.75
47025	34	146	15.75
47026	34	147	15.75
47027	34	148	15.75
47028	34	149	15.75
47029	34	150	15.75
47030	34	151	15.75
47031	34	152	15.75
47032	34	153	15.75
47033	34	154	15.75
47034	34	155	15.75
47035	34	156	15.75
47036	34	157	15.75
47037	34	158	15.75
47038	34	159	15.75
47039	34	160	15.75
47040	34	161	15.75
47041	34	162	15.75
47042	34	163	15.75
47043	34	164	15.75
47044	34	165	15.75
47045	34	166	15.75
47046	34	167	15.75
47047	34	168	15.75
47048	34	169	15.75
47049	34	170	15.75
47050	34	171	15.75
47051	34	172	15.75
47052	34	173	15.75
47053	34	174	15.75
47054	34	175	15.75
47055	34	176	15.75
47056	34	177	15.75
47057	34	178	15.75
47058	34	179	15.75
47059	34	180	15.75
47060	34	181	15.75
47061	34	182	15.75
47062	34	183	15.75
47063	34	184	15.75
47064	34	185	15.75
47065	34	186	15.75
47066	34	187	15.75
47067	34	188	15.75
47068	34	189	15.75
47069	34	190	15.75
47070	34	191	15.75
47071	34	192	15.75
47072	34	193	15.75
47073	34	194	15.75
47074	34	195	15.75
47075	34	196	15.75
47076	34	197	15.75
47077	34	198	15.75
47078	34	199	15.75
47079	34	200	15.75
47080	34	201	15.75
47081	34	202	15.75
47082	34	203	15.75
47083	34	204	15.75
47084	34	205	15.75
47085	34	206	15.75
47086	34	207	15.75
47087	34	208	15.75
47088	34	209	15.75
47089	34	210	15.75
47090	34	211	15.75
47091	34	212	15.75
47092	34	213	15.75
47093	34	214	15.75
47094	34	215	15.75
47095	34	216	15.75
47096	34	217	15.75
47097	34	218	15.75
47098	34	219	15.75
47099	34	220	15.75
47100	34	221	15.75
47101	34	222	15.75
47102	34	223	15.75
47103	34	224	15.75
47104	34	225	15.75
47105	34	226	15.75
47106	34	227	15.75
47107	34	228	15.75
47108	34	229	15.75
47109	34	230	15.75
47110	34	231	15.75
47111	34	232	15.75
47112	34	233	15.75
47113	34	234	15.75
47114	34	235	15.75
47115	34	236	15.75
47116	34	237	15.75
47117	34	238	15.75
47118	34	239	15.75
47119	34	240	15.75
47120	34	241	15.75
47121	34	242	15.75
47122	34	243	15.75
47123	34	244	15.75
47124	34	245	15.75
47125	34	246	15.75
47126	34	247	15.75
47127	34	248	15.75
47128	34	249	15.75
47129	34	250	15.75
47130	34	251	15.75
47131	34	252	15.75
47132	34	253	15.75
47133	34	254	15.75
47134	34	255	15.75
47135	34	256	15.75
47136	34	257	15.75
47137	34	258	15.75
47138	34	259	15.75
47139	34	260	15.75
47140	34	261	15.75
47141	34	262	15.75
47142	34	263	15.75
47143	34	264	15.75
47144	34	265	15.75
47145	34	266	15.75
47146	34	267	15.75
47147	34	268	15.75
47148	34	269	15.75
47149	34	270	15.75
47150	34	271	15.75
47151	34	272	15.75
47152	34	273	15.75
47153	34	274	15.75
47154	34	275	15.75
47155	34	276	15.75
47156	34	277	15.75
47157	34	278	15.75
47158	34	279	15.75
47159	34	280	15.75
47160	34	281	15.75
47161	34	282	15.75
47162	34	283	15.75
47163	34	284	15.75
47164	34	285	15.75
47165	34	286	15.75
47166	34	287	15.75
47167	34	288	15.75
47168	34	289	15.75
47169	34	290	15.75
47170	34	291	15.75
47171	34	292	15.75
47172	34	293	15.75
47173	34	294	15.75
47174	34	295	15.75
47175	34	296	15.75
47176	34	297	15.75
47177	34	298	15.75
47178	34	299	15.75
47179	34	300	15.75
47180	34	301	15.75
47181	34	302	15.75
47182	34	303	15.75
47183	34	304	15.75
47184	34	305	15.75
47185	34	306	15.75
47186	34	307	15.75
47187	34	308	15.75
47188	34	309	15.75
47189	34	310	15.75
47190	34	311	15.75
47191	34	312	15.75
47192	34	313	15.75
47193	34	314	15.75
47194	34	315	15.75
47195	34	316	15.75
47196	34	317	15.75
47197	34	318	15.75
47198	34	319	15.75
47199	34	320	15.75
47200	34	321	15.75
47201	34	322	15.75
47202	34	323	15.75
47203	34	324	15.75
47204	34	325	15.75
47205	34	326	15.75
47206	34	327	15.75
47207	34	328	15.75
47208	34	329	15.75
47209	34	330	15.75
47210	34	331	15.75
47211	34	332	15.75
47212	34	333	15.75
47213	34	334	15.75
47214	34	335	15.75
47215	34	336	15.75
47216	34	337	15.75
47217	34	338	15.75
47218	34	339	15.75
47219	34	340	15.75
47220	34	341	15.75
47221	34	342	15.75
47222	34	343	15.75
47223	34	344	15.75
47224	34	345	15.75
47225	34	346	15.75
47226	34	347	15.75
47227	34	348	15.75
47228	34	349	15.75
47229	34	350	15.75
47230	34	351	15.75
47231	34	352	15.75
47232	34	353	15.75
47233	34	354	15.75
47234	34	355	15.75
47235	34	356	15.75
47236	34	357	15.75
47237	34	358	15.75
47238	34	359	15.75
47239	34	360	15.75
47240	34	361	15.75
47241	34	362	15.75
47242	34	363	15.75
47243	34	364	15.75
47244	34	365	15.75
47245	34	366	15.75
47246	34	367	15.75
47247	34	368	15.75
47248	34	369	15.75
47249	34	370	15.75
47250	34	371	15.75
47251	34	372	15.75
47252	34	373	15.75
47253	34	374	15.75
47254	34	375	15.75
47255	34	376	15.75
47256	34	377	15.75
47257	34	378	15.75
47258	34	379	15.75
47259	34	380	15.75
47260	34	381	15.75
47261	34	382	15.75
47262	34	383	15.75
47263	34	384	15.75
47264	34	385	15.75
47265	34	386	15.75
47266	34	387	15.75
47267	34	388	15.75
47268	34	389	15.75
47269	34	390	15.75
47270	34	391	15.75
47271	34	392	15.75
47272	34	393	15.75
47273	34	394	15.75
47274	34	395	15.75
47275	34	396	15.75
47276	34	397	15.75
47277	34	398	15.75
47278	34	399	15.75
47279	34	400	15.75
47280	34	401	15.75
47281	34	402	15.75
47282	34	403	15.75
47283	34	404	15.75
47284	34	405	15.75
47285	34	406	15.75
47286	34	407	15.75
47287	34	408	15.75
47288	34	409	15.75
47289	34	410	15.75
47290	34	411	15.75
47291	34	412	15.75
47292	34	413	15.75
47293	34	414	15.75
47294	34	415	15.75
47295	34	416	15.75
47296	34	417	15.75
47297	34	418	15.75
47298	34	419	15.75
47299	34	420	15.75
47300	34	421	15.75
47301	34	422	15.75
47302	34	423	15.75
47303	34	424	15.75
47304	34	425	15.75
47305	34	426	15.75
47306	34	427	15.75
47307	34	428	15.75
47308	34	429	15.75
47309	34	430	15.75
47310	34	431	15.75
47311	34	432	15.75
47312	34	433	15.75
47313	34	434	15.75
47314	34	435	15.75
47315	34	436	15.75
47316	34	437	15.75
47317	34	438	15.75
47318	34	439	15.75
47319	34	440	15.75
47320	34	441	15.75
47321	34	442	15.75
47322	34	443	15.75
47323	34	444	15.75
47324	34	445	15.75
47325	34	446	15.75
47326	34	447	15.75
47327	34	448	15.75
47328	34	449	15.75
47329	34	450	15.75
47330	34	451	15.75
47331	34	452	15.75
47332	34	453	15.75
47333	34	454	15.75
47334	34	455	15.75
47335	34	456	15.75
47336	34	457	15.75
47337	34	458	15.75
47338	34	459	15.75
47339	34	460	15.75
47340	34	461	15.75
47341	34	462	15.75
47342	34	463	15.75
47343	34	464	15.75
47344	34	465	15.75
47345	34	466	15.75
47346	34	467	15.75
47347	34	468	15.75
47348	34	469	15.75
47349	34	470	15.75
47350	34	471	15.75
47351	34	472	15.75
47352	34	473	15.75
47353	34	474	15.75
47354	34	475	15.75
47355	34	476	15.75
47356	34	477	15.75
47357	34	478	15.75
47358	34	479	15.75
47359	34	480	15.75
47360	34	481	15.75
47361	34	482	15.75
47362	34	483	15.75
47363	34	484	15.75
47364	34	485	15.75
47365	34	486	15.75
47366	34	487	15.75
47367	34	488	15.75
47368	34	489	15.75
47369	34	490	15.75
47370	34	491	15.75
47371	34	492	15.75
47372	34	493	15.75
47373	34	494	15.75
47374	34	495	15.75
47375	34	496	15.75
47376	34	497	15.75
47377	34	498	15.75
47378	34	499	15.75
47379	34	500	15.75
47380	34	501	15.75
47381	34	502	15.75
47382	34	503	15.75
47383	34	504	15.75
47384	34	505	15.75
47385	34	506	15.75
47386	34	507	15.75
47387	34	508	15.75
47388	34	509	15.75
47389	34	510	15.75
47390	34	511	15.75
47391	34	512	15.75
47392	34	513	15.75
47393	34	514	15.75
47394	34	515	15.75
47395	34	516	15.75
47396	34	517	15.75
47397	34	518	15.75
47398	34	519	15.75
47399	34	520	15.75
47400	34	521	15.75
47401	34	522	15.75
47402	34	523	15.75
47403	34	524	15.75
47404	34	525	15.75
47405	34	526	15.75
47406	34	527	15.75
47407	34	528	15.75
47408	34	529	15.75
47409	34	530	15.75
47410	34	531	15.75
47411	34	532	15.75
47412	34	533	15.75
47413	34	534	15.75
47414	34	535	15.75
47415	34	536	15.75
47416	34	537	15.75
47417	34	538	15.75
47418	34	539	15.75
47419	34	540	15.75
47420	34	541	15.75
47421	34	542	15.75
47422	34	543	15.75
47423	34	544	15.75
47424	34	545	15.75
47425	34	546	15.75
47426	34	547	15.75
47427	34	548	15.75
47428	34	549	15.75
47429	34	550	15.75
47430	34	551	15.75
47431	34	552	15.75
47432	34	553	15.75
47433	34	554	15.75
47434	34	555	15.75
47435	34	556	15.75
47436	34	557	15.75
47437	34	558	15.75
47438	34	559	15.75
47439	34	560	15.75
47440	34	561	15.75
47441	34	562	15.75
47442	34	563	15.75
47443	34	564	15.75
47444	34	565	15.75
47445	34	566	15.75
47446	34	567	15.75
47447	34	568	15.75
47448	34	569	15.75
47449	34	570	15.75
47450	34	571	15.75
47451	34	572	15.75
47452	34	573	15.75
47453	34	574	15.75
47454	34	575	15.75
47455	34	576	15.75
47456	34	577	15.75
47457	34	578	15.75
47458	34	579	15.75
47459	34	580	15.75
47460	34	581	15.75
47461	34	582	15.75
47462	34	583	15.75
47463	34	584	15.75
47464	34	585	15.75
47465	34	586	15.75
47466	34	587	15.75
47467	34	588	15.75
47468	34	589	15.75
47469	34	590	15.75
47470	34	591	15.75
47471	34	592	15.75
47472	34	593	15.75
47473	34	594	15.75
47474	34	595	15.75
47475	34	596	15.75
47476	34	597	15.75
47477	34	598	15.75
47478	34	599	15.75
47479	34	600	15.75
47480	34	601	15.75
47481	34	602	15.75
47482	34	603	15.75
47483	34	604	15.75
47484	34	605	15.75
47485	34	606	15.75
47486	34	607	15.75
47487	34	608	15.75
47488	34	609	15.75
47489	34	610	15.75
47490	34	611	15.75
47491	34	612	15.75
47492	34	613	15.75
47493	34	614	15.75
47494	34	615	15.75
47495	34	616	15.75
47496	34	617	15.75
47497	34	618	15.75
47498	34	619	15.75
47499	34	620	15.75
47500	34	621	15.75
47501	34	622	15.75
47502	34	623	15.75
47503	34	624	15.75
47504	34	625	15.75
47505	34	626	15.75
47506	34	627	15.75
47507	34	628	15.75
47508	34	629	15.75
47509	34	630	15.75
47510	34	631	15.75
47511	34	632	15.75
47512	34	633	15.75
47513	34	634	15.75
47514	34	635	15.75
47515	34	636	15.75
47516	34	637	15.75
47517	34	638	15.75
47518	34	639	15.75
47519	34	640	15.75
47520	34	641	15.75
47521	34	642	15.75
47522	34	643	15.75
47523	34	644	15.75
47524	34	645	15.75
47525	34	646	15.75
47526	34	647	15.75
47527	34	648	15.75
47528	34	649	15.75
47529	34	650	15.75
47530	34	651	15.75
47531	34	652	15.75
47532	34	653	15.75
47533	34	654	15.75
47534	34	655	15.75
47535	34	656	15.75
47536	34	657	15.75
47537	34	658	15.75
47538	34	659	15.75
47539	34	660	15.75
47540	34	661	15.75
47541	34	662	15.75
47542	34	663	15.75
47543	34	664	15.75
47544	34	665	15.75
47545	34	666	15.75
47546	34	667	15.75
47547	34	668	15.75
47548	34	669	15.75
47549	34	670	15.75
47550	34	671	15.75
47551	34	672	15.75
47552	34	673	15.75
47553	34	674	15.75
47554	34	675	15.75
47555	34	676	15.75
47556	34	677	15.75
47557	34	678	15.75
47558	34	679	15.75
47559	34	680	15.75
47560	34	681	15.75
47561	34	682	15.75
47562	34	683	15.75
47563	34	684	15.75
47564	34	685	15.75
47565	34	686	15.75
47566	34	687	15.75
47567	34	688	15.75
47568	34	689	15.75
47569	34	690	15.75
47570	34	691	15.75
47571	34	692	15.75
47572	34	693	15.75
47573	34	694	15.75
47574	34	695	15.75
47575	34	696	15.75
47576	34	697	15.75
47577	34	698	15.75
47578	34	699	15.75
47579	34	700	15.75
47580	34	701	15.75
47581	34	702	15.75
47582	34	703	15.75
47583	34	704	15.75
47584	34	705	15.75
47585	34	706	15.75
47586	34	707	15.75
47587	34	708	15.75
47588	34	709	15.75
47589	34	710	15.75
47590	34	711	15.75
47591	34	712	15.75
47592	34	713	15.75
47593	34	714	15.75
47594	34	715	15.75
47595	34	716	15.75
47596	34	717	15.75
47597	34	718	15.75
47598	34	719	15.75
47599	34	720	15.75
47600	34	721	15.75
47601	34	722	15.75
47602	34	723	15.75
47603	34	724	15.75
47604	34	725	15.75
47605	34	726	15.75
47606	34	727	15.75
47607	34	728	15.75
47608	34	729	15.75
47609	34	730	15.75
47610	34	731	15.75
47611	34	732	15.75
47612	34	733	15.75
47613	34	734	15.75
47614	34	735	15.75
47615	34	736	15.75
47616	34	737	15.75
47617	34	738	15.75
47618	34	739	15.75
47619	34	740	15.75
47620	34	741	15.75
47621	34	742	15.75
47622	34	743	15.75
47623	34	744	15.75
47624	34	745	15.75
47625	34	746	15.75
47626	34	747	15.75
47627	34	748	15.75
47628	34	749	15.75
47629	34	750	15.75
47630	34	751	15.75
47631	34	752	15.75
47632	34	753	15.75
47633	34	754	15.75
47634	34	755	15.75
47635	34	756	15.75
47636	34	757	15.75
47637	34	758	15.75
47638	34	759	15.75
47639	34	760	15.75
47640	34	761	15.75
47641	34	762	15.75
47642	34	763	15.75
47643	34	764	15.75
47644	34	765	15.75
47645	34	766	15.75
47646	34	767	15.75
47647	34	768	15.75
47648	34	769	15.75
47649	34	770	15.75
47650	34	771	15.75
47651	34	772	15.75
47652	34	773	15.75
47653	34	774	15.75
47654	34	775	15.75
47655	34	776	15.75
47656	34	777	15.75
47657	34	778	15.75
47658	34	779	15.75
47659	34	780	15.75
47660	34	781	15.75
47661	34	782	15.75
47662	34	783	15.75
47663	34	784	15.75
47664	34	785	15.75
47665	34	786	15.75
47666	34	787	15.75
47667	34	788	15.75
47668	34	789	15.75
47669	34	790	15.75
47670	34	791	15.75
47671	34	792	15.75
47672	34	793	15.75
47673	34	794	15.75
47674	34	795	15.75
47675	34	796	15.75
47676	34	797	15.75
47677	34	798	15.75
47678	34	799	15.75
47679	34	800	15.75
47680	34	801	15.75
47681	34	802	15.75
47682	34	803	15.75
47683	34	804	15.75
47684	34	805	15.75
47685	34	806	15.75
47686	34	807	15.75
47687	34	808	15.75
47688	34	809	15.75
47689	34	810	15.75
47690	34	811	15.75
47691	34	812	15.75
47692	34	813	15.75
47693	34	814	15.75
47694	34	815	15.75
47695	34	816	15.75
47696	34	817	15.75
47697	34	818	15.75
47698	34	819	15.75
47699	34	820	15.75
47700	34	821	15.75
47701	34	822	15.75
47702	34	823	15.75
47703	34	824	15.75
47704	34	825	15.75
47705	34	826	15.75
47706	34	827	15.75
47707	34	828	15.75
47708	34	829	15.75
47709	34	830	15.75
47710	34	831	15.75
47711	34	832	15.75
47712	34	833	15.75
47713	34	834	15.75
47714	34	835	15.75
47715	34	836	15.75
47716	34	837	15.75
47717	34	838	15.75
47718	34	839	15.75
47719	34	840	15.75
47720	34	841	15.75
47721	34	842	15.75
47722	34	843	15.75
47723	34	844	15.75
47724	34	845	15.75
47725	34	846	15.75
47726	34	847	15.75
47727	34	848	15.75
47728	34	849	15.75
47729	34	850	15.75
47730	34	851	15.75
47731	34	852	15.75
47732	34	853	15.75
47733	34	854	15.75
47734	34	855	15.75
47735	34	856	15.75
47736	34	857	15.75
47737	34	858	15.75
47738	34	859	15.75
47739	34	860	15.75
47740	34	861	15.75
47741	34	862	15.75
47742	34	863	15.75
47743	34	864	15.75
47744	34	865	15.75
47745	34	866	15.75
47746	34	867	15.75
47747	34	868	15.75
47748	34	869	15.75
47749	34	870	15.75
47750	34	871	15.75
47751	34	872	15.75
47752	34	873	15.75
47753	34	874	15.75
47754	34	875	15.75
47755	34	876	15.75
47756	34	877	15.75
47757	34	878	15.75
47758	34	879	15.75
47759	34	880	15.75
47760	34	881	15.75
47761	34	882	15.75
47762	34	883	15.75
47763	34	884	15.75
47764	34	885	15.75
47765	34	886	15.75
47766	34	887	15.75
47767	34	888	15.75
47768	34	889	15.75
47769	34	890	15.75
47770	34	891	15.75
47771	34	892	15.75
47772	34	893	15.75
47773	34	894	15.75
47774	34	895	15.75
47775	34	896	15.75
47776	34	897	15.75
47777	34	898	15.75
47778	34	899	15.75
47779	34	900	15.75
47780	34	901	15.75
47781	34	902	15.75
47782	34	903	15.75
47783	34	904	15.75
47784	34	905	15.75
47785	34	906	15.75
47786	34	907	15.75
47787	34	908	15.75
47788	34	909	15.75
47789	34	910	15.75
47790	34	911	15.75
47791	34	912	15.75
47792	34	913	15.75
47793	34	914	15.75
47794	34	915	15.75
47795	34	916	15.75
47796	34	917	15.75
47797	34	918	15.75
47798	34	919	15.75
47799	34	920	15.75
47800	34	921	15.75
47801	34	922	15.75
47802	34	923	15.75
47803	34	924	15.75
47804	34	925	15.75
47805	34	926	15.75
47806	34	927	15.75
47807	34	928	15.75
47808	34	929	15.75
47809	34	930	15.75
47810	34	931	15.75
47811	34	932	15.75
47812	34	933	15.75
47813	34	934	15.75
47814	34	935	15.75
47815	34	936	15.75
47816	34	937	15.75
47817	34	938	15.75
47818	34	939	15.75
47819	34	940	15.75
47820	34	941	15.75
47821	34	942	15.75
47822	34	943	15.75
47823	34	944	15.75
47824	34	945	15.75
47825	34	946	15.75
47826	34	947	15.75
47827	34	948	15.75
47828	34	949	15.75
47829	34	950	15.75
47830	34	951	15.75
47831	34	952	15.75
47832	34	953	15.75
47833	34	954	15.75
47834	34	955	15.75
47835	34	956	15.75
47836	34	957	15.75
47837	34	958	15.75
47838	34	959	15.75
47839	34	960	15.75
47840	34	961	15.75
47841	34	962	15.75
47842	34	963	15.75
47843	34	964	15.75
47844	34	965	15.75
47845	34	966	15.75
47846	34	967	15.75
47847	34	968	15.75
47848	34	969	15.75
47849	34	970	15.75
47850	34	971	15.75
47851	34	972	15.75
47852	34	973	15.75
47853	34	974	15.75
47854	34	975	15.75
47855	34	976	15.75
47856	34	977	15.75
47857	34	978	15.75
47858	34	979	15.75
47859	34	980	15.75
47860	34	981	15.75
47861	34	982	15.75
47862	34	983	15.75
47863	34	984	15.75
47864	34	985	15.75
47865	34	986	15.75
47866	34	987	15.75
47867	34	988	15.75
47868	34	989	15.75
47869	34	990	15.75
47870	34	991	15.75
47871	34	992	15.75
47872	34	993	15.75
47873	34	994	15.75
47874	34	995	15.75
47875	34	996	15.75
47876	34	997	15.75
47877	34	998	15.75
47878	34	999	15.75
\.


--
-- Data for Name: cell_styles; Type: TABLE DATA; Schema: public; Owner: user
--

COPY public.cell_styles (id, cell_id, font_bold, font_color, font_size, bg_color, border_top_style, border_top_color, border_right_style, border_right_color, border_bottom_style, border_bottom_color, border_left_style, border_left_color, alignment_horizontal, alignment_vertical) FROM stdin;
25404	25486	f	Values must be of type <class 'str'>	\N	00000000	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
25405	25487	f	Values must be of type <class 'str'>	\N	00000000	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
25406	25488	f	Values must be of type <class 'str'>	\N	00000000	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
25407	25489	f	Values must be of type <class 'str'>	\N	00000000	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
25408	25490	f	Values must be of type <class 'str'>	\N	00000000	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
25409	25491	f	Values must be of type <class 'str'>	\N	00000000	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
\.


--
-- Data for Name: classifications; Type: TABLE DATA; Schema: public; Owner: user
--

COPY public.classifications (id, name, type_id, sort) FROM stdin;
9	その他	5	999
18	Ruby on Rails	4	11
19	Ruby on Rails(ORM)	4	12
5	PHP	1	10
12	インフラ	5	10
14	Bootstrap	4	1
1	HTML	1	2
16	Javascript	3	3
15	React	4	4
17	Ruby	1	5
10	Django(基本)	4	6
8	その他	1	7
3	Javascript	1	8
13	Django(ORM)	4	10
4	Python	1	9
2	CSS	1	10
7	Git	5	10
6	Laravel	4	10
11	Linux	5	10
\.


--
-- Data for Name: departments; Type: TABLE DATA; Schema: public; Owner: user
--

COPY public.departments (id, name, sort) FROM stdin;
27	管理者	1
28	製造部	2
29	総務部	3
1	未設定	4
\.


--
-- Data for Name: employee_authority; Type: TABLE DATA; Schema: public; Owner: user
--

COPY public.employee_authority (employee_id, department_id, admin, start_date, end_date) FROM stdin;
1	27	t	2025-03-22	\N
14	28	t	2025-03-22	\N
31	28	f	2025-03-22	\N
15	29	t	2025-03-22	\N
32	29	f	2025-03-23	\N
\.


--
-- Data for Name: employee_credential; Type: TABLE DATA; Schema: public; Owner: user
--

COPY public.employee_credential (employee_id, hashed_password, password_updated_at) FROM stdin;
1	$2b$12$r2Z64R5NUyKiwBKO.wcIJewkhmPSLG.uN/02pNxkjgKGhjMjDoyzO	2025-02-23
14	$2b$12$6ezu8Eje0GOTYLP6hqeA7erj0O2rexQDsvxJqpEr.7cGWLD3Wgmge	2025-03-09
15	$2b$12$AGNwmJboAtqZTLT5OEyZj.kah7aslnZRdygzDluH3HYnuNPG3WwyW	2025-03-09
31	$2b$12$pYubHEns4o17RV3yvsSR3OUU7BXueM.u9mXQ9HIGI34LcxIkbrQ0G	2025-03-22
32	$2b$12$ocq7YX4uJJVk9Fn6Y0R4z.WT0QiNfq5EiFPKT1wuWU0PN1A246Nbe	2025-03-22
\.


--
-- Data for Name: employeeinfos; Type: TABLE DATA; Schema: public; Owner: user
--

COPY public.employeeinfos (employee_id, phone_number, gender, emergency_contact, address, birth_date, employment_type, hire_date, leave_date, contract_expiration) FROM stdin;
1	080-1111-1111	男性	\N	東京都品川区	2025-11-11	正社員	2025-11-11	\N	\N
31	080-0000-0000	未設定	\N	未設定	2025-03-22	正社員	2025-03-22	\N	\N
32	080-0000-0000	未設定	\N	未設定	2025-03-22	正社員	2025-03-22	\N	\N
14	080-0000-0000	未設定	\N	未設定	2025-03-09	正社員	2025-03-09	\N	\N
15	08000000000	未設定	\N	未設定	2025-03-09	正社員	2025-03-09	\N	\N
\.


--
-- Data for Name: employees; Type: TABLE DATA; Schema: public; Owner: user
--

COPY public.employees (id, employee_no, name, email, last_login) FROM stdin;
15	soumu00	総務部管理者	test@test.com	\N
31	seizou1	製造部利用者	test@test.com	\N
32	soumu11	総務部利用者	test@test.com	\N
14	seizou0	製造部管理者	test@test.com	\N
1	admin00	管理者	test@test.com	\N
\.


--
-- Data for Name: types; Type: TABLE DATA; Schema: public; Owner: user
--

COPY public.types (id, sort, name) FROM stdin;
3	1	組み込み関数など
4	2	フレームワーク
6	3	プラグイン、モジュール
1	4	プログラミング基礎
5	5	その他
\.


--
-- Data for Name: user_sessions; Type: TABLE DATA; Schema: public; Owner: user
--

COPY public.user_sessions (id, user_id, jti, created_at, expires_at, is_active) FROM stdin;
1	1	8d4deed9-9f5a-46e8-8805-57cfa7502d04	2025-03-16 15:17:56.243841	2025-03-23 15:17:56.242117	f
2	1	62171944-684a-4f84-90ea-58ef868484eb	2025-03-16 15:18:12.575593	2025-03-23 15:18:12.574205	f
3	1	8705ae78-e227-4f33-81e9-e36a48a8ee3b	2025-03-16 15:18:38.673094	2025-03-23 15:18:38.672462	f
4	1	bd6a0c4e-306f-47d3-8d36-4d97f6afd46b	2025-03-16 15:40:44.640302	2025-03-23 15:40:44.639042	f
5	1	b7fe0b24-8ab8-4b0c-a56e-8280d3344388	2025-03-16 16:44:44.01107	2025-03-23 16:44:44.005094	f
6	1	01a383ec-d03e-4cf3-b76a-06b4227f0af5	2025-03-17 01:19:08.93111	2025-03-24 01:19:08.929254	f
7	1	e23a771f-031d-4664-a9ec-f806b62b0b78	2025-03-22 14:27:51.523524	2025-03-29 14:27:51.519728	f
8	1	be24883e-85c0-4d60-af3c-edf8d6bc0f99	2025-03-22 21:46:48.816345	2025-03-29 21:46:48.814782	f
9	1	7b74018c-1caa-457c-850a-bb98decf58b6	2025-03-22 22:04:51.543554	2025-03-29 22:04:51.539689	f
10	32	b29bde88-6ad6-4d91-97de-954ab4cf2e2a	2025-03-22 22:06:23.9865	2025-03-29 22:06:23.985665	f
11	1	f43e1108-3ae2-4597-a475-c65b7039f2b5	2025-03-22 22:06:58.525911	2025-03-29 22:06:58.524991	f
12	32	f54b830e-fe7e-46f3-aec3-032850aea688	2025-03-22 22:07:14.45196	2025-03-29 22:07:14.451148	f
13	1	69fb0dea-58fb-43f7-91d7-89c5b8da5298	2025-03-22 22:07:43.473028	2025-03-29 22:07:43.472234	f
14	1	f7e4f3a6-ba3c-4e9f-9e25-a306c8063f2c	2025-03-22 22:12:27.288497	2025-03-29 22:12:27.287493	f
15	15	d98c8e90-715f-43d4-bf24-075394d8bb64	2025-03-22 22:13:21.600829	2025-03-29 22:13:21.599963	f
16	1	38a2c689-b2e1-4230-904e-ff6f283b7182	2025-03-22 22:16:18.160306	2025-03-29 22:16:18.159285	f
17	14	5fdf343c-df62-4cdf-8758-16c7c5a1f2f7	2025-03-22 22:19:32.805029	2025-03-29 22:19:32.80395	f
18	1	6d9b96ba-b57c-415e-8b0e-6da1d78f6c14	2025-03-22 22:21:24.720199	2025-03-29 22:21:24.719304	f
19	1	9e62c1c7-2916-4da8-9a22-d5c5a22fd10f	2025-03-22 22:22:30.884242	2025-03-29 22:22:30.882925	f
20	1	f9ccc608-6493-45df-9a0c-b54715f36c2b	2025-03-22 22:52:44.647077	2025-03-29 22:52:44.645402	f
21	15	d86f5adc-86af-4e91-b696-cde3ccd8bb36	2025-03-22 22:58:02.572404	2025-03-29 22:58:02.571507	f
22	1	868795b1-537b-4ac6-98a0-c30232eeaded	2025-03-22 22:58:43.42849	2025-03-29 22:58:43.427645	f
23	15	14f0d7a7-e086-4840-a05e-ee08be07a286	2025-03-22 22:59:11.602406	2025-03-29 22:59:11.601348	f
24	32	2c5b9fc0-9315-4c9f-b5a2-228e1408701f	2025-03-22 22:59:49.631536	2025-03-29 22:59:49.630655	f
25	1	29bd6737-6bd3-43d0-80ca-26d6afc6c1c0	2025-03-22 23:02:48.322919	2025-03-29 23:02:48.322257	f
26	1	7929e4d4-16f7-4359-b8e6-5da850292186	2025-03-22 23:07:05.306841	2025-03-29 23:07:05.305824	f
27	32	a3cb0de7-96a1-49b4-963f-5ff067be2c85	2025-03-22 23:12:28.302258	2025-03-29 23:12:28.301122	f
28	1	0091389d-ff4d-48df-8b72-648218307690	2025-03-22 23:13:06.636342	2025-03-29 23:13:06.635514	f
29	32	5cebba76-2124-4ef5-944b-61069673eb22	2025-03-22 23:19:28.594354	2025-03-29 23:19:28.593557	f
30	1	d5f103c6-354c-4377-b2e8-c4db26d6e138	2025-03-22 23:30:17.302361	2025-03-29 23:30:17.301002	f
31	32	45265040-9fd9-4e66-bc32-cffb08d3e29e	2025-03-23 01:58:05.754176	2025-03-30 01:58:05.75339	f
32	15	eaf9fdd8-ef90-4d5d-abd0-826cf169b4b4	2025-03-23 01:58:34.661129	2025-03-30 01:58:34.660418	f
33	1	d708568b-6dc4-451e-9565-1ab61e7d0cad	2025-03-23 01:58:55.510792	2025-03-30 01:58:55.51002	f
34	1	4a09f831-218b-4b78-b402-284976713e15	2025-03-23 02:04:13.796474	2025-03-30 02:04:13.795606	f
35	15	85366d6b-7e22-4967-a667-50afc9fd67c3	2025-03-23 02:06:13.036042	2025-03-30 02:06:13.034764	f
36	15	0f2fd23d-195a-4f27-bc7f-c0be781b253b	2025-03-23 02:18:14.968404	2025-03-30 02:18:14.967506	f
37	1	477070fd-5efb-4484-92f2-9b8812ccc230	2025-03-23 02:22:21.678756	2025-03-30 02:22:21.677973	f
38	15	ceba06d1-690b-48f8-a6f5-1afa34147bcb	2025-03-23 02:33:01.981998	2025-03-30 02:33:01.981123	f
39	1	47edf250-866d-4494-a596-8ea63e8b4a77	2025-03-23 02:44:54.698518	2025-03-30 02:44:54.69698	f
40	1	29b85618-0e68-4d80-a448-34b96736439c	2025-03-23 02:53:29.315419	2025-03-30 02:53:29.312543	f
41	1	ecd145aa-de9c-4538-8382-cf378a74e2b5	2025-03-23 02:56:14.419343	2025-03-30 02:56:14.418355	f
42	1	793c5ea5-ac27-40f9-8dcb-48bc160c2594	2025-03-23 02:56:19.144785	2025-03-30 02:56:19.143922	f
43	1	4e4b843d-baae-43eb-b76a-1444ca824629	2025-03-23 02:56:58.045861	2025-03-30 02:56:58.043862	f
44	1	f724311d-cd65-4149-917c-518b56d302cb	2025-03-23 02:57:17.10953	2025-03-30 02:57:17.108628	f
45	1	dd72e104-e651-445f-b01f-cabffd25b97b	2025-03-23 02:57:59.154221	2025-03-30 02:57:59.153219	f
46	1	09d01289-216e-45f9-9aab-24671dd649a3	2025-03-23 02:59:06.700136	2025-03-30 02:59:06.699134	f
47	1	c62e88da-9e85-474a-b7d8-daeda1da0bc8	2025-03-23 02:59:38.857099	2025-03-30 02:59:38.856174	f
48	1	35f41e62-8ba7-4230-a49a-cdea96327252	2025-03-23 03:00:14.733473	2025-03-30 03:00:14.732105	f
49	1	ca35fccb-2cbc-4471-a1ff-3de387018020	2025-03-23 03:00:19.5175	2025-03-30 03:00:19.516598	f
50	1	cee70133-25df-4826-9cbd-61d4a1483a5c	2025-03-23 03:00:34.094651	2025-03-30 03:00:34.093098	f
51	1	0edcb876-86a7-4771-b19e-291ce6a40288	2025-03-23 03:00:48.774627	2025-03-30 03:00:48.773775	f
52	1	15befd86-11b8-4d45-b134-fa9e3f06ca66	2025-03-23 03:01:07.12338	2025-03-30 03:01:07.122366	f
53	1	35b2715a-9738-42d5-a862-7ac38511b5cd	2025-03-23 03:01:23.271028	2025-03-30 03:01:23.270022	f
54	1	a248d3fb-32e7-4dd8-8447-c9ad72435c45	2025-03-23 03:01:44.905125	2025-03-30 03:01:44.903502	f
55	15	a847286b-c4f8-4fda-9d24-c671698e3d4a	2025-03-23 03:03:05.398606	2025-03-30 03:03:05.397873	f
56	1	83324183-68e8-4a98-b94e-487ddcff49ed	2025-03-23 03:03:37.816154	2025-03-30 03:03:37.814911	t
\.


--
-- Name: articles_id_seq; Type: SEQUENCE SET; Schema: public; Owner: user
--

SELECT pg_catalog.setval('public.articles_id_seq', 290, true);


--
-- Name: bulletin_cells_id_seq; Type: SEQUENCE SET; Schema: public; Owner: user
--

SELECT pg_catalog.setval('public.bulletin_cells_id_seq', 25491, true);


--
-- Name: bulletin_column_dimensions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: user
--

SELECT pg_catalog.setval('public.bulletin_column_dimensions_id_seq', 221, true);


--
-- Name: bulletin_images_id_seq; Type: SEQUENCE SET; Schema: public; Owner: user
--

SELECT pg_catalog.setval('public.bulletin_images_id_seq', 49, true);


--
-- Name: bulletin_merges_id_seq; Type: SEQUENCE SET; Schema: public; Owner: user
--

SELECT pg_catalog.setval('public.bulletin_merges_id_seq', 967, true);


--
-- Name: bulletin_posts_id_seq; Type: SEQUENCE SET; Schema: public; Owner: user
--

SELECT pg_catalog.setval('public.bulletin_posts_id_seq', 40, true);


--
-- Name: bulletin_row_dimensions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: user
--

SELECT pg_catalog.setval('public.bulletin_row_dimensions_id_seq', 47878, true);


--
-- Name: cell_styles_id_seq; Type: SEQUENCE SET; Schema: public; Owner: user
--

SELECT pg_catalog.setval('public.cell_styles_id_seq', 25409, true);


--
-- Name: classifications_id_seq; Type: SEQUENCE SET; Schema: public; Owner: user
--

SELECT pg_catalog.setval('public.classifications_id_seq', 20, true);


--
-- Name: departments_id_seq; Type: SEQUENCE SET; Schema: public; Owner: user
--

SELECT pg_catalog.setval('public.departments_id_seq', 35, true);


--
-- Name: employees_id_seq; Type: SEQUENCE SET; Schema: public; Owner: user
--

SELECT pg_catalog.setval('public.employees_id_seq', 38, true);


--
-- Name: types_id_seq; Type: SEQUENCE SET; Schema: public; Owner: user
--

SELECT pg_catalog.setval('public.types_id_seq', 17, true);


--
-- Name: user_sessions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: user
--

SELECT pg_catalog.setval('public.user_sessions_id_seq', 56, true);


--
-- Name: alembic_version alembic_version_pkc; Type: CONSTRAINT; Schema: public; Owner: user
--

ALTER TABLE ONLY public.alembic_version
    ADD CONSTRAINT alembic_version_pkc PRIMARY KEY (version_num);


--
-- Name: articles articles_pkey; Type: CONSTRAINT; Schema: public; Owner: user
--

ALTER TABLE ONLY public.articles
    ADD CONSTRAINT articles_pkey PRIMARY KEY (id);


--
-- Name: bulletin_cells bulletin_cells_pkey; Type: CONSTRAINT; Schema: public; Owner: user
--

ALTER TABLE ONLY public.bulletin_cells
    ADD CONSTRAINT bulletin_cells_pkey PRIMARY KEY (id);


--
-- Name: bulletin_column_dimensions bulletin_column_dimensions_pkey; Type: CONSTRAINT; Schema: public; Owner: user
--

ALTER TABLE ONLY public.bulletin_column_dimensions
    ADD CONSTRAINT bulletin_column_dimensions_pkey PRIMARY KEY (id);


--
-- Name: bulletin_images bulletin_images_pkey; Type: CONSTRAINT; Schema: public; Owner: user
--

ALTER TABLE ONLY public.bulletin_images
    ADD CONSTRAINT bulletin_images_pkey PRIMARY KEY (id);


--
-- Name: bulletin_merges bulletin_merges_pkey; Type: CONSTRAINT; Schema: public; Owner: user
--

ALTER TABLE ONLY public.bulletin_merges
    ADD CONSTRAINT bulletin_merges_pkey PRIMARY KEY (id);


--
-- Name: bulletin_posts bulletin_posts_pkey; Type: CONSTRAINT; Schema: public; Owner: user
--

ALTER TABLE ONLY public.bulletin_posts
    ADD CONSTRAINT bulletin_posts_pkey PRIMARY KEY (id);


--
-- Name: bulletin_row_dimensions bulletin_row_dimensions_pkey; Type: CONSTRAINT; Schema: public; Owner: user
--

ALTER TABLE ONLY public.bulletin_row_dimensions
    ADD CONSTRAINT bulletin_row_dimensions_pkey PRIMARY KEY (id);


--
-- Name: cell_styles cell_styles_cell_id_key; Type: CONSTRAINT; Schema: public; Owner: user
--

ALTER TABLE ONLY public.cell_styles
    ADD CONSTRAINT cell_styles_cell_id_key UNIQUE (cell_id);


--
-- Name: cell_styles cell_styles_pkey; Type: CONSTRAINT; Schema: public; Owner: user
--

ALTER TABLE ONLY public.cell_styles
    ADD CONSTRAINT cell_styles_pkey PRIMARY KEY (id);


--
-- Name: classifications classifications_pkey; Type: CONSTRAINT; Schema: public; Owner: user
--

ALTER TABLE ONLY public.classifications
    ADD CONSTRAINT classifications_pkey PRIMARY KEY (id);


--
-- Name: departments departments_pkey; Type: CONSTRAINT; Schema: public; Owner: user
--

ALTER TABLE ONLY public.departments
    ADD CONSTRAINT departments_pkey PRIMARY KEY (id);


--
-- Name: employee_authority employee_authority_pkey; Type: CONSTRAINT; Schema: public; Owner: user
--

ALTER TABLE ONLY public.employee_authority
    ADD CONSTRAINT employee_authority_pkey PRIMARY KEY (employee_id, department_id);


--
-- Name: employee_credential employee_credential_pkey; Type: CONSTRAINT; Schema: public; Owner: user
--

ALTER TABLE ONLY public.employee_credential
    ADD CONSTRAINT employee_credential_pkey PRIMARY KEY (employee_id);


--
-- Name: employeeinfos employeeinfos_pkey; Type: CONSTRAINT; Schema: public; Owner: user
--

ALTER TABLE ONLY public.employeeinfos
    ADD CONSTRAINT employeeinfos_pkey PRIMARY KEY (employee_id);


--
-- Name: employees employees_pkey; Type: CONSTRAINT; Schema: public; Owner: user
--

ALTER TABLE ONLY public.employees
    ADD CONSTRAINT employees_pkey PRIMARY KEY (id);


--
-- Name: types types_pkey; Type: CONSTRAINT; Schema: public; Owner: user
--

ALTER TABLE ONLY public.types
    ADD CONSTRAINT types_pkey PRIMARY KEY (id);


--
-- Name: bulletin_cells uix_cell_position; Type: CONSTRAINT; Schema: public; Owner: user
--

ALTER TABLE ONLY public.bulletin_cells
    ADD CONSTRAINT uix_cell_position UNIQUE (bulletin_id, "row", col);


--
-- Name: bulletin_column_dimensions uix_column_dimension; Type: CONSTRAINT; Schema: public; Owner: user
--

ALTER TABLE ONLY public.bulletin_column_dimensions
    ADD CONSTRAINT uix_column_dimension UNIQUE (bulletin_id, col);


--
-- Name: bulletin_row_dimensions uix_row_dimension; Type: CONSTRAINT; Schema: public; Owner: user
--

ALTER TABLE ONLY public.bulletin_row_dimensions
    ADD CONSTRAINT uix_row_dimension UNIQUE (bulletin_id, "row");


--
-- Name: user_sessions user_sessions_pkey; Type: CONSTRAINT; Schema: public; Owner: user
--

ALTER TABLE ONLY public.user_sessions
    ADD CONSTRAINT user_sessions_pkey PRIMARY KEY (id);


--
-- Name: ix_articles_id; Type: INDEX; Schema: public; Owner: user
--

CREATE INDEX ix_articles_id ON public.articles USING btree (id);


--
-- Name: ix_bulletin_cells_id; Type: INDEX; Schema: public; Owner: user
--

CREATE INDEX ix_bulletin_cells_id ON public.bulletin_cells USING btree (id);


--
-- Name: ix_bulletin_column_dimensions_id; Type: INDEX; Schema: public; Owner: user
--

CREATE INDEX ix_bulletin_column_dimensions_id ON public.bulletin_column_dimensions USING btree (id);


--
-- Name: ix_bulletin_images_id; Type: INDEX; Schema: public; Owner: user
--

CREATE INDEX ix_bulletin_images_id ON public.bulletin_images USING btree (id);


--
-- Name: ix_bulletin_merges_id; Type: INDEX; Schema: public; Owner: user
--

CREATE INDEX ix_bulletin_merges_id ON public.bulletin_merges USING btree (id);


--
-- Name: ix_bulletin_posts_id; Type: INDEX; Schema: public; Owner: user
--

CREATE INDEX ix_bulletin_posts_id ON public.bulletin_posts USING btree (id);


--
-- Name: ix_bulletin_row_dimensions_id; Type: INDEX; Schema: public; Owner: user
--

CREATE INDEX ix_bulletin_row_dimensions_id ON public.bulletin_row_dimensions USING btree (id);


--
-- Name: ix_cell_styles_id; Type: INDEX; Schema: public; Owner: user
--

CREATE INDEX ix_cell_styles_id ON public.cell_styles USING btree (id);


--
-- Name: ix_classifications_id; Type: INDEX; Schema: public; Owner: user
--

CREATE INDEX ix_classifications_id ON public.classifications USING btree (id);


--
-- Name: ix_departments_id; Type: INDEX; Schema: public; Owner: user
--

CREATE INDEX ix_departments_id ON public.departments USING btree (id);


--
-- Name: ix_departments_name; Type: INDEX; Schema: public; Owner: user
--

CREATE UNIQUE INDEX ix_departments_name ON public.departments USING btree (name);


--
-- Name: ix_employees_email; Type: INDEX; Schema: public; Owner: user
--

CREATE INDEX ix_employees_email ON public.employees USING btree (email);


--
-- Name: ix_employees_employee_no; Type: INDEX; Schema: public; Owner: user
--

CREATE UNIQUE INDEX ix_employees_employee_no ON public.employees USING btree (employee_no);


--
-- Name: ix_employees_id; Type: INDEX; Schema: public; Owner: user
--

CREATE INDEX ix_employees_id ON public.employees USING btree (id);


--
-- Name: ix_employees_name; Type: INDEX; Schema: public; Owner: user
--

CREATE INDEX ix_employees_name ON public.employees USING btree (name);


--
-- Name: ix_types_id; Type: INDEX; Schema: public; Owner: user
--

CREATE INDEX ix_types_id ON public.types USING btree (id);


--
-- Name: ix_user_sessions_id; Type: INDEX; Schema: public; Owner: user
--

CREATE INDEX ix_user_sessions_id ON public.user_sessions USING btree (id);


--
-- Name: ix_user_sessions_jti; Type: INDEX; Schema: public; Owner: user
--

CREATE UNIQUE INDEX ix_user_sessions_jti ON public.user_sessions USING btree (jti);


--
-- Name: articles articles_classification_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: user
--

ALTER TABLE ONLY public.articles
    ADD CONSTRAINT articles_classification_id_fkey FOREIGN KEY (classification_id) REFERENCES public.classifications(id) ON DELETE SET NULL;


--
-- Name: articles articles_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: user
--

ALTER TABLE ONLY public.articles
    ADD CONSTRAINT articles_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.types(id) ON DELETE SET NULL;


--
-- Name: bulletin_cells bulletin_cells_bulletin_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: user
--

ALTER TABLE ONLY public.bulletin_cells
    ADD CONSTRAINT bulletin_cells_bulletin_id_fkey FOREIGN KEY (bulletin_id) REFERENCES public.bulletin_posts(id);


--
-- Name: bulletin_column_dimensions bulletin_column_dimensions_bulletin_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: user
--

ALTER TABLE ONLY public.bulletin_column_dimensions
    ADD CONSTRAINT bulletin_column_dimensions_bulletin_id_fkey FOREIGN KEY (bulletin_id) REFERENCES public.bulletin_posts(id);


--
-- Name: bulletin_images bulletin_images_bulletin_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: user
--

ALTER TABLE ONLY public.bulletin_images
    ADD CONSTRAINT bulletin_images_bulletin_id_fkey FOREIGN KEY (bulletin_id) REFERENCES public.bulletin_posts(id);


--
-- Name: bulletin_merges bulletin_merges_bulletin_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: user
--

ALTER TABLE ONLY public.bulletin_merges
    ADD CONSTRAINT bulletin_merges_bulletin_id_fkey FOREIGN KEY (bulletin_id) REFERENCES public.bulletin_posts(id);


--
-- Name: bulletin_posts bulletin_posts_employee_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: user
--

ALTER TABLE ONLY public.bulletin_posts
    ADD CONSTRAINT bulletin_posts_employee_id_fkey FOREIGN KEY (employee_id) REFERENCES public.employees(id);


--
-- Name: bulletin_row_dimensions bulletin_row_dimensions_bulletin_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: user
--

ALTER TABLE ONLY public.bulletin_row_dimensions
    ADD CONSTRAINT bulletin_row_dimensions_bulletin_id_fkey FOREIGN KEY (bulletin_id) REFERENCES public.bulletin_posts(id);


--
-- Name: cell_styles cell_styles_cell_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: user
--

ALTER TABLE ONLY public.cell_styles
    ADD CONSTRAINT cell_styles_cell_id_fkey FOREIGN KEY (cell_id) REFERENCES public.bulletin_cells(id);


--
-- Name: classifications classifications_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: user
--

ALTER TABLE ONLY public.classifications
    ADD CONSTRAINT classifications_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.types(id) ON DELETE CASCADE;


--
-- Name: employee_authority employee_authority_department_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: user
--

ALTER TABLE ONLY public.employee_authority
    ADD CONSTRAINT employee_authority_department_id_fkey FOREIGN KEY (department_id) REFERENCES public.departments(id) ON DELETE CASCADE;


--
-- Name: employee_authority employee_authority_employee_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: user
--

ALTER TABLE ONLY public.employee_authority
    ADD CONSTRAINT employee_authority_employee_id_fkey FOREIGN KEY (employee_id) REFERENCES public.employees(id) ON DELETE CASCADE;


--
-- Name: employee_credential employee_credential_employee_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: user
--

ALTER TABLE ONLY public.employee_credential
    ADD CONSTRAINT employee_credential_employee_id_fkey FOREIGN KEY (employee_id) REFERENCES public.employees(id) ON DELETE CASCADE;


--
-- Name: employeeinfos employeeinfos_employee_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: user
--

ALTER TABLE ONLY public.employeeinfos
    ADD CONSTRAINT employeeinfos_employee_id_fkey FOREIGN KEY (employee_id) REFERENCES public.employees(id) ON DELETE CASCADE;


--
-- Name: user_sessions user_sessions_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: user
--

ALTER TABLE ONLY public.user_sessions
    ADD CONSTRAINT user_sessions_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.employees(id);


--
-- Name: SCHEMA public; Type: ACL; Schema: -; Owner: user
--

REVOKE USAGE ON SCHEMA public FROM PUBLIC;
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- PostgreSQL database dump complete
--

